(()=>{"use strict";var t={365:(t,n,e)=>{function r(t,n){return null==t||null==n?NaN:t<n?-1:t>n?1:t>=n?0:NaN}function i(t,n){return null==t||null==n?NaN:n<t?-1:n>t?1:n>=t?0:NaN}function o(t){let n,e,o;function u(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<0?i=n+1:o=n}while(i<o)}return i}return 2!==t.length?(n=r,e=(n,e)=>r(t(n),e),o=(n,e)=>t(n)-e):(n=t===r||t===i?t:a,e=t,o=t),{left:u,center:function(t,n,e=0,r=t.length){const i=u(t,n,e,r-1);return i>e&&o(t[i-1],n)>-o(t[i],n)?i-1:i},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<=0?i=n+1:o=n}while(i<o)}return i}}}function a(){return 0}function u(t){return null===t?NaN:+t}e.r(n),e.d(n,{Adder:()=>k,Delaunay:()=>Xu,FormatSpecifier:()=>ls,InternMap:()=>z,InternSet:()=>$,Node:()=>Rg,Path:()=>ca,Voronoi:()=>Iu,ZoomTransform:()=>LA,active:()=>ho,arc:()=>NM,area:()=>OM,areaRadial:()=>HM,ascending:()=>r,autoType:()=>Ac,axisBottom:()=>mn,axisLeft:()=>xn,axisRight:()=>bn,axisTop:()=>_n,bin:()=>dt,bisect:()=>h,bisectCenter:()=>l,bisectLeft:()=>s,bisectRight:()=>f,bisector:()=>o,blob:()=>gf,blur:()=>d,blur2:()=>p,blurImage:()=>g,brush:()=>Yo,brushSelection:()=>Uo,brushX:()=>Io,brushY:()=>Bo,buffer:()=>vf,chord:()=>Jo,chordDirected:()=>na,chordTranspose:()=>ta,cluster:()=>Ng,color:()=>hr,contourDensity:()=>vu,contours:()=>fu,count:()=>m,create:()=>eM,creator:()=>Ee,cross:()=>T,csv:()=>wf,csvFormat:()=>hc,csvFormatBody:()=>dc,csvFormatRow:()=>gc,csvFormatRows:()=>pc,csvFormatValue:()=>yc,csvParse:()=>sc,csvParseRows:()=>lc,cubehelix:()=>Ja,cumsum:()=>A,curveBasis:()=>RT,curveBasisClosed:()=>qT,curveBasisOpen:()=>UT,curveBumpX:()=>WM,curveBumpY:()=>ZM,curveBundle:()=>BT,curveCardinal:()=>LT,curveCardinalClosed:()=>XT,curveCardinalOpen:()=>VT,curveCatmullRom:()=>KT,curveCatmullRomClosed:()=>JT,curveCatmullRomOpen:()=>nA,curveLinear:()=>zM,curveLinearClosed:()=>rA,curveMonotoneX:()=>lA,curveMonotoneY:()=>hA,curveNatural:()=>gA,curveStep:()=>vA,curveStepAfter:()=>bA,curveStepBefore:()=>_A,descending:()=>i,deviation:()=>E,difference:()=>Kt,disjoint:()=>Qt,dispatch:()=>En,drag:()=>Ju,dragDisable:()=>Xe,dragEnable:()=>Ge,dsv:()=>xf,dsvFormat:()=>cc,easeBack:()=>ff,easeBackIn:()=>uf,easeBackInOut:()=>ff,easeBackOut:()=>cf,easeBounce:()=>rf,easeBounceIn:()=>ef,easeBounceInOut:()=>of,easeBounceOut:()=>rf,easeCircle:()=>Hc,easeCircleIn:()=>jc,easeCircleInOut:()=>Hc,easeCircleOut:()=>Lc,easeCubic:()=>co,easeCubicIn:()=>ao,easeCubicInOut:()=>co,easeCubicOut:()=>uo,easeElastic:()=>hf,easeElasticIn:()=>lf,easeElasticInOut:()=>df,easeElasticOut:()=>hf,easeExp:()=>Yc,easeExpIn:()=>Ic,easeExpInOut:()=>Yc,easeExpOut:()=>Bc,easeLinear:()=>Ec,easePoly:()=>$c,easePolyIn:()=>Pc,easePolyInOut:()=>$c,easePolyOut:()=>zc,easeQuad:()=>Cc,easeQuadIn:()=>Nc,easeQuadInOut:()=>Cc,easeQuadOut:()=>kc,easeSin:()=>Fc,easeSinIn:()=>Oc,easeSinInOut:()=>Fc,easeSinOut:()=>qc,every:()=>Ht,extent:()=>N,fcumsum:()=>P,filter:()=>Gt,flatGroup:()=>Y,flatRollup:()=>j,forceCenter:()=>Pf,forceCollide:()=>Lf,forceLink:()=>Gf,forceManyBody:()=>es,forceRadial:()=>rs,forceSimulation:()=>ns,forceX:()=>is,forceY:()=>os,format:()=>ys,formatDefaultLocale:()=>xs,formatLocale:()=>ms,formatPrefix:()=>vs,formatSpecifier:()=>ss,fsum:()=>C,geoAlbers:()=>jp,geoAlbersUsa:()=>Lp,geoArea:()=>Al,geoAzimuthalEqualArea:()=>Vp,geoAzimuthalEqualAreaRaw:()=>Gp,geoAzimuthalEquidistant:()=>Zp,geoAzimuthalEquidistantRaw:()=>Wp,geoBounds:()=>ah,geoCentroid:()=>_h,geoCircle:()=>kh,geoClipAntimeridian:()=>Ih,geoClipCircle:()=>Bh,geoClipExtent:()=>Wh,geoClipRectangle:()=>Vh,geoConicConformal:()=>eg,geoConicConformalRaw:()=>ng,geoConicEqualArea:()=>Yp,geoConicEqualAreaRaw:()=>Bp,geoConicEquidistant:()=>ag,geoConicEquidistantRaw:()=>og,geoContains:()=>hd,geoDistance:()=>rd,geoEqualEarth:()=>dg,geoEqualEarthRaw:()=>hg,geoEquirectangular:()=>ig,geoEquirectangularRaw:()=>rg,geoGnomonic:()=>gg,geoGnomonicRaw:()=>pg,geoGraticule:()=>gd,geoGraticule10:()=>yd,geoIdentity:()=>yg,geoInterpolate:()=>vd,geoLength:()=>td,geoMercator:()=>Qp,geoMercatorRaw:()=>Kp,geoNaturalEarth1:()=>_g,geoNaturalEarth1Raw:()=>vg,geoOrthographic:()=>mg,geoOrthographicRaw:()=>bg,geoPath:()=>Tp,geoProjection:()=>Fp,geoProjectionMutator:()=>Up,geoRotation:()=>Sh,geoStereographic:()=>wg,geoStereographicRaw:()=>xg,geoStream:()=>nl,geoTransform:()=>Ap,geoTransverseMercator:()=>Tg,geoTransverseMercatorRaw:()=>Mg,gray:()=>$a,greatest:()=>mt,greatestIndex:()=>qt,group:()=>U,groupSort:()=>tt,groups:()=>I,hcl:()=>Ya,hierarchy:()=>Cg,histogram:()=>dt,hsl:()=>Ar,html:()=>kf,image:()=>Tf,index:()=>X,indexes:()=>G,interpolate:()=>Kr,interpolateArray:()=>jr,interpolateBasis:()=>Pr,interpolateBasisClosed:()=>zr,interpolateBlues:()=>kw,interpolateBrBG:()=>Bx,interpolateBuGn:()=>ow,interpolateBuPu:()=>uw,interpolateCividis:()=>Iw,interpolateCool:()=>jw,interpolateCubehelix:()=>Wy,interpolateCubehelixDefault:()=>Bw,interpolateCubehelixLong:()=>Zy,interpolateDate:()=>Hr,interpolateDiscrete:()=>Oy,interpolateGnBu:()=>fw,interpolateGreens:()=>Pw,interpolateGreys:()=>$w,interpolateHcl:()=>Xy,interpolateHclLong:()=>Gy,interpolateHsl:()=>Yy,interpolateHslLong:()=>jy,interpolateHue:()=>qy,interpolateInferno:()=>tM,interpolateLab:()=>Ly,interpolateMagma:()=>Jw,interpolateNumber:()=>Xr,interpolateNumberArray:()=>Br,interpolateObject:()=>Gr,interpolateOrRd:()=>lw,interpolateOranges:()=>Uw,interpolatePRGn:()=>jx,interpolatePiYG:()=>Hx,interpolatePlasma:()=>nM,interpolatePuBu:()=>gw,interpolatePuBuGn:()=>dw,interpolatePuOr:()=>Gx,interpolatePuRd:()=>vw,interpolatePurples:()=>Rw,interpolateRainbow:()=>Hw,interpolateRdBu:()=>Wx,interpolateRdGy:()=>Kx,interpolateRdPu:()=>bw,interpolateRdYlBu:()=>Jx,interpolateRdYlGn:()=>nw,interpolateReds:()=>qw,interpolateRgb:()=>qr,interpolateRgbBasis:()=>Ur,interpolateRgbBasisClosed:()=>Ir,interpolateRound:()=>Fy,interpolateSinebow:()=>Ww,interpolateSpectral:()=>rw,interpolateString:()=>Zr,interpolateTransformCss:()=>Ri,interpolateTransformSvg:()=>Oi,interpolateTurbo:()=>Zw,interpolateViridis:()=>Qw,interpolateWarm:()=>Yw,interpolateYlGn:()=>Mw,interpolateYlGnBu:()=>xw,interpolateYlOrBr:()=>Aw,interpolateYlOrRd:()=>Ew,interpolateZoom:()=>Iy,interrupt:()=>ki,intersection:()=>Jt,interval:()=>BA,isoFormat:()=>FA,isoParse:()=>IA,json:()=>Sf,lab:()=>Da,lch:()=>Ba,least:()=>Rt,leastIndex:()=>Ot,line:()=>RM,lineRadial:()=>LM,link:()=>tT,linkHorizontal:()=>nT,linkRadial:()=>rT,linkVertical:()=>eT,local:()=>iM,map:()=>Vt,matcher:()=>$n,max:()=>pt,maxIndex:()=>gt,mean:()=>St,median:()=>Et,medianIndex:()=>Nt,merge:()=>kt,min:()=>yt,minIndex:()=>vt,mode:()=>Ct,namespace:()=>Vn,namespaces:()=>Gn,nice:()=>lt,now:()=>si,pack:()=>ay,packEnclose:()=>Lg,packSiblings:()=>iy,pairs:()=>Pt,partition:()=>hy,path:()=>fa,pathRound:()=>sa,permute:()=>Z,pie:()=>UM,piecewise:()=>Ky,pointRadial:()=>XM,pointer:()=>Jr,pointers:()=>aM,polygonArea:()=>Jy,polygonCentroid:()=>tv,polygonContains:()=>ov,polygonHull:()=>iv,polygonLength:()=>av,precisionFixed:()=>ws,precisionPrefix:()=>Ms,precisionRound:()=>Ts,quadtree:()=>Of,quantile:()=>xt,quantileIndex:()=>Mt,quantileSorted:()=>wt,quantize:()=>Qy,quickselect:()=>_t,radialArea:()=>HM,radialLine:()=>LM,randomBates:()=>dv,randomBernoulli:()=>yv,randomBeta:()=>bv,randomBinomial:()=>mv,randomCauchy:()=>wv,randomExponential:()=>pv,randomGamma:()=>_v,randomGeometric:()=>vv,randomInt:()=>fv,randomIrwinHall:()=>hv,randomLcg:()=>Nv,randomLogNormal:()=>lv,randomLogistic:()=>Mv,randomNormal:()=>sv,randomPareto:()=>gv,randomPoisson:()=>Tv,randomUniform:()=>cv,randomWeibull:()=>xv,range:()=>$t,rank:()=>Dt,reduce:()=>Wt,reverse:()=>Zt,rgb:()=>yr,ribbon:()=>xa,ribbonArrow:()=>wa,rollup:()=>L,rollups:()=>H,scaleBand:()=>$v,scaleDiverging:()=>wx,scaleDivergingLog:()=>Mx,scaleDivergingPow:()=>Ax,scaleDivergingSqrt:()=>Sx,scaleDivergingSymlog:()=>Tx,scaleIdentity:()=>Vv,scaleImplicit:()=>Pv,scaleLinear:()=>Gv,scaleLog:()=>r_,scaleOrdinal:()=>zv,scalePoint:()=>Rv,scalePow:()=>h_,scaleQuantile:()=>y_,scaleQuantize:()=>v_,scaleRadial:()=>g_,scaleSequential:()=>gx,scaleSequentialLog:()=>yx,scaleSequentialPow:()=>_x,scaleSequentialQuantile:()=>mx,scaleSequentialSqrt:()=>bx,scaleSequentialSymlog:()=>vx,scaleSqrt:()=>d_,scaleSymlog:()=>u_,scaleThreshold:()=>__,scaleTime:()=>lx,scaleUtc:()=>hx,scan:()=>Ft,schemeAccent:()=>kx,schemeBlues:()=>Nw,schemeBrBG:()=>Ix,schemeBuGn:()=>iw,schemeBuPu:()=>aw,schemeCategory10:()=>Nx,schemeDark2:()=>Cx,schemeGnBu:()=>cw,schemeGreens:()=>Cw,schemeGreys:()=>zw,schemeObservable10:()=>Px,schemeOrRd:()=>sw,schemeOranges:()=>Fw,schemePRGn:()=>Yx,schemePaired:()=>zx,schemePastel1:()=>$x,schemePastel2:()=>Dx,schemePiYG:()=>Lx,schemePuBu:()=>pw,schemePuBuGn:()=>hw,schemePuOr:()=>Xx,schemePuRd:()=>yw,schemePurples:()=>Dw,schemeRdBu:()=>Vx,schemeRdGy:()=>Zx,schemeRdPu:()=>_w,schemeRdYlBu:()=>Qx,schemeRdYlGn:()=>tw,schemeReds:()=>Ow,schemeSet1:()=>Rx,schemeSet2:()=>Ox,schemeSet3:()=>qx,schemeSpectral:()=>ew,schemeTableau10:()=>Fx,schemeYlGn:()=>ww,schemeYlGnBu:()=>mw,schemeYlOrBr:()=>Tw,schemeYlOrRd:()=>Sw,select:()=>Be,selectAll:()=>uM,selection:()=>Ie,selector:()=>kn,selectorAll:()=>zn,shuffle:()=>Ut,shuffler:()=>It,some:()=>Xt,sort:()=>K,stack:()=>TA,stackOffsetDiverging:()=>SA,stackOffsetExpand:()=>AA,stackOffsetNone:()=>mA,stackOffsetSilhouette:()=>EA,stackOffsetWiggle:()=>NA,stackOrderAppearance:()=>kA,stackOrderAscending:()=>PA,stackOrderDescending:()=>$A,stackOrderInsideOut:()=>DA,stackOrderNone:()=>xA,stackOrderReverse:()=>RA,stratify:()=>_y,style:()=>oe,subset:()=>rn,sum:()=>Bt,superset:()=>nn,svg:()=>Cf,symbol:()=>PT,symbolAsterisk:()=>oT,symbolCircle:()=>aT,symbolCross:()=>uT,symbolDiamond:()=>sT,symbolDiamond2:()=>lT,symbolPlus:()=>hT,symbolSquare:()=>dT,symbolSquare2:()=>pT,symbolStar:()=>_T,symbolTimes:()=>NT,symbolTriangle:()=>mT,symbolTriangle2:()=>wT,symbolWye:()=>ET,symbolX:()=>NT,symbols:()=>kT,symbolsFill:()=>kT,symbolsStroke:()=>CT,text:()=>bf,thresholdFreedmanDiaconis:()=>Tt,thresholdScott:()=>At,thresholdSturges:()=>ht,tickFormat:()=>Hv,tickIncrement:()=>ft,tickStep:()=>st,ticks:()=>ct,timeDay:()=>I_,timeDays:()=>B_,timeFormat:()=>Ib,timeFormatDefaultLocale:()=>ux,timeFormatLocale:()=>Fb,timeFriday:()=>Q_,timeFridays:()=>ob,timeHour:()=>O_,timeHours:()=>q_,timeInterval:()=>E_,timeMillisecond:()=>N_,timeMilliseconds:()=>k_,timeMinute:()=>z_,timeMinutes:()=>$_,timeMonday:()=>V_,timeMondays:()=>nb,timeMonth:()=>wb,timeMonths:()=>Mb,timeParse:()=>Bb,timeSaturday:()=>J_,timeSaturdays:()=>ab,timeSecond:()=>C_,timeSeconds:()=>P_,timeSunday:()=>G_,timeSundays:()=>tb,timeThursday:()=>K_,timeThursdays:()=>ib,timeTickInterval:()=>Db,timeTicks:()=>$b,timeTuesday:()=>W_,timeTuesdays:()=>eb,timeWednesday:()=>Z_,timeWednesdays:()=>rb,timeWeek:()=>G_,timeWeeks:()=>tb,timeYear:()=>Sb,timeYears:()=>Eb,timeout:()=>_i,timer:()=>di,timerFlush:()=>pi,transition:()=>ro,transpose:()=>Yt,tree:()=>Ey,treemap:()=>zy,treemapBinary:()=>$y,treemapDice:()=>ly,treemapResquarify:()=>Ry,treemapSlice:()=>Ny,treemapSliceDice:()=>Dy,treemapSquarify:()=>Py,tsv:()=>Mf,tsvFormat:()=>mc,tsvFormatBody:()=>xc,tsvFormatRow:()=>Mc,tsvFormatRows:()=>wc,tsvFormatValue:()=>Tc,tsvParse:()=>_c,tsvParseRows:()=>bc,union:()=>on,unixDay:()=>L_,unixDays:()=>H_,utcDay:()=>Y_,utcDays:()=>j_,utcFormat:()=>Yb,utcFriday:()=>db,utcFridays:()=>mb,utcHour:()=>F_,utcHours:()=>U_,utcMillisecond:()=>N_,utcMilliseconds:()=>k_,utcMinute:()=>D_,utcMinutes:()=>R_,utcMonday:()=>fb,utcMondays:()=>yb,utcMonth:()=>Tb,utcMonths:()=>Ab,utcParse:()=>jb,utcSaturday:()=>pb,utcSaturdays:()=>xb,utcSecond:()=>C_,utcSeconds:()=>P_,utcSunday:()=>cb,utcSundays:()=>gb,utcThursday:()=>hb,utcThursdays:()=>bb,utcTickInterval:()=>zb,utcTicks:()=>Pb,utcTuesday:()=>sb,utcTuesdays:()=>vb,utcWednesday:()=>lb,utcWednesdays:()=>_b,utcWeek:()=>cb,utcWeeks:()=>gb,utcYear:()=>Nb,utcYears:()=>kb,variance:()=>S,window:()=>ne,xml:()=>Nf,zip:()=>Lt,zoom:()=>nS,zoomIdentity:()=>HA,zoomTransform:()=>XA});const c=o(r),f=c.right,s=c.left,l=o(u).center,h=f;function d(t,n){if(!((n=+n)>=0))throw new RangeError("invalid r");let e=t.length;if(!((e=Math.floor(e))>=0))throw new RangeError("invalid length");if(!e||!n)return t;const r=b(n),i=t.slice();return r(t,i,0,e,1),r(i,t,0,e,1),r(t,i,0,e,1),t}const p=y(b),g=y((function(t){const n=b(t);return(t,e,r,i,o)=>{n(t,e,0+(r<<=2),0+(i<<=2),o<<=2),n(t,e,r+1,i+1,o),n(t,e,r+2,i+2,o),n(t,e,r+3,i+3,o)}}));function y(t){return function(n,e,r=e){if(!((e=+e)>=0))throw new RangeError("invalid rx");if(!((r=+r)>=0))throw new RangeError("invalid ry");let{data:i,width:o,height:a}=n;if(!((o=Math.floor(o))>=0))throw new RangeError("invalid width");if(!((a=Math.floor(void 0!==a?a:i.length/o))>=0))throw new RangeError("invalid height");if(!o||!a||!e&&!r)return n;const u=e&&t(e),c=r&&t(r),f=i.slice();return u&&c?(v(u,f,i,o,a),v(u,i,f,o,a),v(u,f,i,o,a),_(c,i,f,o,a),_(c,f,i,o,a),_(c,i,f,o,a)):u?(v(u,i,f,o,a),v(u,f,i,o,a),v(u,i,f,o,a)):c&&(_(c,i,f,o,a),_(c,f,i,o,a),_(c,i,f,o,a)),n}}function v(t,n,e,r,i){for(let o=0,a=r*i;o<a;)t(n,e,o,o+=r,1)}function _(t,n,e,r,i){for(let o=0,a=r*i;o<r;++o)t(n,e,o,o+a,r)}function b(t){const n=Math.floor(t);if(n===t)return function(t){const n=2*t+1;return(e,r,i,o,a)=>{if(!((o-=a)>=i))return;let u=t*r[i];const c=a*t;for(let t=i,n=i+c;t<n;t+=a)u+=r[Math.min(o,t)];for(let t=i,f=o;t<=f;t+=a)u+=r[Math.min(o,t+c)],e[t]=u/n,u-=r[Math.max(i,t-c)]}}(t);const e=t-n,r=2*t+1;return(t,i,o,a,u)=>{if(!((a-=u)>=o))return;let c=n*i[o];const f=u*n,s=f+u;for(let t=o,n=o+f;t<n;t+=u)c+=i[Math.min(a,t)];for(let n=o,l=a;n<=l;n+=u)c+=i[Math.min(a,n+f)],t[n]=(c+e*(i[Math.max(o,n-s)]+i[Math.min(a,n+s)]))/r,c-=i[Math.max(o,n-f)]}}function m(t,n){let e=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&++e;else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(i=+i)>=i&&++e}return e}function x(t){return 0|t.length}function w(t){return!(t>0)}function M(t){return"object"!=typeof t||"length"in t?t:Array.from(t)}function T(...t){const n="function"==typeof t[t.length-1]&&function(t){return n=>t(...n)}(t.pop()),e=(t=t.map(M)).map(x),r=t.length-1,i=new Array(r+1).fill(0),o=[];if(r<0||e.some(w))return o;for(;;){o.push(i.map(((n,e)=>t[e][n])));let a=r;for(;++i[a]===e[a];){if(0===a)return n?o.map(n):o;i[a--]=0}}}function A(t,n){var e=0,r=0;return Float64Array.from(t,void 0===n?t=>e+=+t||0:i=>e+=+n(i,r++,t)||0)}function S(t,n){let e,r=0,i=0,o=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(e=n-i,i+=e/++r,o+=e*(n-i));else{let a=-1;for(let u of t)null!=(u=n(u,++a,t))&&(u=+u)>=u&&(e=u-i,i+=e/++r,o+=e*(u-i))}if(r>1)return o/(r-1)}function E(t,n){const e=S(t,n);return e?Math.sqrt(e):e}function N(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]}class k{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const n=this._partials;let e=0;for(let r=0;r<this._n&&r<32;r++){const i=n[r],o=t+i,a=Math.abs(t)<Math.abs(i)?t-(o-i):i-(o-t);a&&(n[e++]=a),t=o}return n[e]=t,this._n=e+1,this}valueOf(){const t=this._partials;let n,e,r,i=this._n,o=0;if(i>0){for(o=t[--i];i>0&&(n=o,e=t[--i],o=n+e,r=e-(o-n),!r););i>0&&(r<0&&t[i-1]<0||r>0&&t[i-1]>0)&&(e=2*r,n=o+e,e==n-o&&(o=n))}return o}}function C(t,n){const e=new k;if(void 0===n)for(let n of t)(n=+n)&&e.add(n);else{let r=-1;for(let i of t)(i=+n(i,++r,t))&&e.add(i)}return+e}function P(t,n){const e=new k;let r=-1;return Float64Array.from(t,void 0===n?t=>e.add(+t||0):i=>e.add(+n(i,++r,t)||0))}class z extends Map{constructor(t,n=q){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=t)for(const[n,e]of t)this.set(n,e)}get(t){return super.get(D(this,t))}has(t){return super.has(D(this,t))}set(t,n){return super.set(R(this,t),n)}delete(t){return super.delete(O(this,t))}}class $ extends Set{constructor(t,n=q){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=t)for(const n of t)this.add(n)}has(t){return super.has(D(this,t))}add(t){return super.add(R(this,t))}delete(t){return super.delete(O(this,t))}}function D({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):e}function R({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):(t.set(r,e),e)}function O({_intern:t,_key:n},e){const r=n(e);return t.has(r)&&(e=t.get(r),t.delete(r)),e}function q(t){return null!==t&&"object"==typeof t?t.valueOf():t}function F(t){return t}function U(t,...n){return W(t,F,F,n)}function I(t,...n){return W(t,Array.from,F,n)}function B(t,n){for(let e=1,r=n.length;e<r;++e)t=t.flatMap((t=>t.pop().map((([n,e])=>[...t,n,e]))));return t}function Y(t,...n){return B(I(t,...n),n)}function j(t,n,...e){return B(H(t,n,...e),e)}function L(t,n,...e){return W(t,F,n,e)}function H(t,n,...e){return W(t,Array.from,n,e)}function X(t,...n){return W(t,F,V,n)}function G(t,...n){return W(t,Array.from,V,n)}function V(t){if(1!==t.length)throw new Error("duplicate key");return t[0]}function W(t,n,e,r){return function t(i,o){if(o>=r.length)return e(i);const a=new z,u=r[o++];let c=-1;for(const t of i){const n=u(t,++c,i),e=a.get(n);e?e.push(t):a.set(n,[t])}for(const[n,e]of a)a.set(n,t(e,o));return n(a)}(t,0)}function Z(t,n){return Array.from(n,(n=>t[n]))}function K(t,...n){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");t=Array.from(t);let[e]=n;if(e&&2!==e.length||n.length>1){const r=Uint32Array.from(t,((t,n)=>n));return n.length>1?(n=n.map((n=>t.map(n))),r.sort(((t,e)=>{for(const r of n){const n=J(r[t],r[e]);if(n)return n}}))):(e=t.map(e),r.sort(((t,n)=>J(e[t],e[n])))),Z(t,r)}return t.sort(Q(e))}function Q(t=r){if(t===r)return J;if("function"!=typeof t)throw new TypeError("compare is not a function");return(n,e)=>{const r=t(n,e);return r||0===r?r:(0===t(e,e))-(0===t(n,n))}}function J(t,n){return(null==t||!(t>=t))-(null==n||!(n>=n))||(t<n?-1:t>n?1:0)}function tt(t,n,e){return(2!==n.length?K(L(t,n,e),(([t,n],[e,i])=>r(n,i)||r(t,e))):K(U(t,e),(([t,e],[i,o])=>n(e,o)||r(t,i)))).map((([t])=>t))}var nt=Array.prototype,et=nt.slice;function rt(t){return()=>t}nt.map;const it=Math.sqrt(50),ot=Math.sqrt(10),at=Math.sqrt(2);function ut(t,n,e){const r=(n-t)/Math.max(0,e),i=Math.floor(Math.log10(r)),o=r/Math.pow(10,i),a=o>=it?10:o>=ot?5:o>=at?2:1;let u,c,f;return i<0?(f=Math.pow(10,-i)/a,u=Math.round(t*f),c=Math.round(n*f),u/f<t&&++u,c/f>n&&--c,f=-f):(f=Math.pow(10,i)*a,u=Math.round(t/f),c=Math.round(n/f),u*f<t&&++u,c*f>n&&--c),c<u&&.5<=e&&e<2?ut(t,n,2*e):[u,c,f]}function ct(t,n,e){if(!((e=+e)>0))return[];if((t=+t)==(n=+n))return[t];const r=n<t,[i,o,a]=r?ut(n,t,e):ut(t,n,e);if(!(o>=i))return[];const u=o-i+1,c=new Array(u);if(r)if(a<0)for(let t=0;t<u;++t)c[t]=(o-t)/-a;else for(let t=0;t<u;++t)c[t]=(o-t)*a;else if(a<0)for(let t=0;t<u;++t)c[t]=(i+t)/-a;else for(let t=0;t<u;++t)c[t]=(i+t)*a;return c}function ft(t,n,e){return ut(t=+t,n=+n,e=+e)[2]}function st(t,n,e){e=+e;const r=(n=+n)<(t=+t),i=r?ft(n,t,e):ft(t,n,e);return(r?-1:1)*(i<0?1/-i:i)}function lt(t,n,e){let r;for(;;){const i=ft(t,n,e);if(i===r||0===i||!isFinite(i))return[t,n];i>0?(t=Math.floor(t/i)*i,n=Math.ceil(n/i)*i):i<0&&(t=Math.ceil(t*i)/i,n=Math.floor(n*i)/i),r=i}}function ht(t){return Math.max(1,Math.ceil(Math.log(m(t))/Math.LN2)+1)}function dt(){var t=F,n=N,e=ht;function r(r){Array.isArray(r)||(r=Array.from(r));var i,o,a,u=r.length,c=new Array(u);for(i=0;i<u;++i)c[i]=t(r[i],i,r);var f=n(c),s=f[0],l=f[1],d=e(c,s,l);if(!Array.isArray(d)){const t=l,e=+d;if(n===N&&([s,l]=lt(s,l,e)),(d=ct(s,l,e))[0]<=s&&(a=ft(s,l,e)),d[d.length-1]>=l)if(t>=l&&n===N){const t=ft(s,l,e);isFinite(t)&&(t>0?l=(Math.floor(l/t)+1)*t:t<0&&(l=(Math.ceil(l*-t)+1)/-t))}else d.pop()}for(var p=d.length,g=0,y=p;d[g]<=s;)++g;for(;d[y-1]>l;)--y;(g||y<p)&&(d=d.slice(g,y),p=y-g);var v,_=new Array(p+1);for(i=0;i<=p;++i)(v=_[i]=[]).x0=i>0?d[i-1]:s,v.x1=i<p?d[i]:l;if(isFinite(a)){if(a>0)for(i=0;i<u;++i)null!=(o=c[i])&&s<=o&&o<=l&&_[Math.min(p,Math.floor((o-s)/a))].push(r[i]);else if(a<0)for(i=0;i<u;++i)if(null!=(o=c[i])&&s<=o&&o<=l){const t=Math.floor((s-o)*a);_[Math.min(p,t+(d[t]<=o))].push(r[i])}}else for(i=0;i<u;++i)null!=(o=c[i])&&s<=o&&o<=l&&_[h(d,o,0,p)].push(r[i]);return _}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:rt(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:rt([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:rt(Array.isArray(t)?et.call(t):t),r):e},r}function pt(t,n){let e;if(void 0===n)for(const n of t)null!=n&&(e<n||void 0===e&&n>=n)&&(e=n);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(e<i||void 0===e&&i>=i)&&(e=i)}return e}function gt(t,n){let e,r=-1,i=-1;if(void 0===n)for(const n of t)++i,null!=n&&(e<n||void 0===e&&n>=n)&&(e=n,r=i);else for(let o of t)null!=(o=n(o,++i,t))&&(e<o||void 0===e&&o>=o)&&(e=o,r=i);return r}function yt(t,n){let e;if(void 0===n)for(const n of t)null!=n&&(e>n||void 0===e&&n>=n)&&(e=n);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(e>i||void 0===e&&i>=i)&&(e=i)}return e}function vt(t,n){let e,r=-1,i=-1;if(void 0===n)for(const n of t)++i,null!=n&&(e>n||void 0===e&&n>=n)&&(e=n,r=i);else for(let o of t)null!=(o=n(o,++i,t))&&(e>o||void 0===e&&o>=o)&&(e=o,r=i);return r}function _t(t,n,e=0,r=1/0,i){if(n=Math.floor(n),e=Math.floor(Math.max(0,e)),r=Math.floor(Math.min(t.length-1,r)),!(e<=n&&n<=r))return t;for(i=void 0===i?J:Q(i);r>e;){if(r-e>600){const o=r-e+1,a=n-e+1,u=Math.log(o),c=.5*Math.exp(2*u/3),f=.5*Math.sqrt(u*c*(o-c)/o)*(a-o/2<0?-1:1);_t(t,n,Math.max(e,Math.floor(n-a*c/o+f)),Math.min(r,Math.floor(n+(o-a)*c/o+f)),i)}const o=t[n];let a=e,u=r;for(bt(t,e,n),i(t[r],o)>0&&bt(t,e,r);a<u;){for(bt(t,a,u),++a,--u;i(t[a],o)<0;)++a;for(;i(t[u],o)>0;)--u}0===i(t[e],o)?bt(t,e,u):(++u,bt(t,u,r)),u<=n&&(e=u+1),n<=u&&(r=u-1)}return t}function bt(t,n,e){const r=t[n];t[n]=t[e],t[e]=r}function mt(t,n=r){let e,i=!1;if(1===n.length){let o;for(const a of t){const t=n(a);(i?r(t,o)>0:0===r(t,t))&&(e=a,o=t,i=!0)}}else for(const r of t)(i?n(r,e)>0:0===n(r,r))&&(e=r,i=!0);return e}function xt(t,n,e){if(t=Float64Array.from(function*(t,n){if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(yield n);else{let e=-1;for(let r of t)null!=(r=n(r,++e,t))&&(r=+r)>=r&&(yield r)}}(t,e)),(r=t.length)&&!isNaN(n=+n)){if(n<=0||r<2)return yt(t);if(n>=1)return pt(t);var r,i=(r-1)*n,o=Math.floor(i),a=pt(_t(t,o).subarray(0,o+1));return a+(yt(t.subarray(o+1))-a)*(i-o)}}function wt(t,n,e=u){if((r=t.length)&&!isNaN(n=+n)){if(n<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function Mt(t,n,e=u){if(!isNaN(n=+n)){if(r=Float64Array.from(t,((n,r)=>u(e(t[r],r,t)))),n<=0)return vt(r);if(n>=1)return gt(r);var r,i=Uint32Array.from(t,((t,n)=>n)),o=r.length-1,a=Math.floor(o*n);return _t(i,a,0,o,((t,n)=>J(r[t],r[n]))),(a=mt(i.subarray(0,a+1),(t=>r[t])))>=0?a:-1}}function Tt(t,n,e){const r=m(t),i=xt(t,.75)-xt(t,.25);return r&&i?Math.ceil((e-n)/(2*i*Math.pow(r,-1/3))):1}function At(t,n,e){const r=m(t),i=E(t);return r&&i?Math.ceil((e-n)*Math.cbrt(r)/(3.49*i)):1}function St(t,n){let e=0,r=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(++e,r+=n);else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(o=+o)>=o&&(++e,r+=o)}if(e)return r/e}function Et(t,n){return xt(t,.5,n)}function Nt(t,n){return Mt(t,.5,n)}function kt(t){return Array.from(function*(t){for(const n of t)yield*n}(t))}function Ct(t,n){const e=new z;if(void 0===n)for(let n of t)null!=n&&n>=n&&e.set(n,(e.get(n)||0)+1);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&i>=i&&e.set(i,(e.get(i)||0)+1)}let r,i=0;for(const[t,n]of e)n>i&&(i=n,r=t);return r}function Pt(t,n=zt){const e=[];let r,i=!1;for(const o of t)i&&e.push(n(r,o)),r=o,i=!0;return e}function zt(t,n){return[t,n]}function $t(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}function Dt(t,n=r){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");let e=Array.from(t);const i=new Float64Array(e.length);2!==n.length&&(e=e.map(n),n=r);const o=(t,r)=>n(e[t],e[r]);let a,u;return(t=Uint32Array.from(e,((t,n)=>n))).sort(n===r?(t,n)=>J(e[t],e[n]):Q(o)),t.forEach(((t,n)=>{const e=o(t,void 0===a?t:a);e>=0?((void 0===a||e>0)&&(a=t,u=n),i[t]=u):i[t]=NaN})),i}function Rt(t,n=r){let e,i=!1;if(1===n.length){let o;for(const a of t){const t=n(a);(i?r(t,o)<0:0===r(t,t))&&(e=a,o=t,i=!0)}}else for(const r of t)(i?n(r,e)<0:0===n(r,r))&&(e=r,i=!0);return e}function Ot(t,n=r){if(1===n.length)return vt(t,n);let e,i=-1,o=-1;for(const r of t)++o,(i<0?0===n(r,r):n(r,e)<0)&&(e=r,i=o);return i}function qt(t,n=r){if(1===n.length)return gt(t,n);let e,i=-1,o=-1;for(const r of t)++o,(i<0?0===n(r,r):n(r,e)>0)&&(e=r,i=o);return i}function Ft(t,n){const e=Ot(t,n);return e<0?void 0:e}const Ut=It(Math.random);function It(t){return function(n,e=0,r=n.length){let i=r-(e=+e);for(;i;){const r=t()*i--|0,o=n[i+e];n[i+e]=n[r+e],n[r+e]=o}return n}}function Bt(t,n){let e=0;if(void 0===n)for(let n of t)(n=+n)&&(e+=n);else{let r=-1;for(let i of t)(i=+n(i,++r,t))&&(e+=i)}return e}function Yt(t){if(!(i=t.length))return[];for(var n=-1,e=yt(t,jt),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r}function jt(t){return t.length}function Lt(){return Yt(arguments)}function Ht(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");let e=-1;for(const r of t)if(!n(r,++e,t))return!1;return!0}function Xt(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");let e=-1;for(const r of t)if(n(r,++e,t))return!0;return!1}function Gt(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");const e=[];let r=-1;for(const i of t)n(i,++r,t)&&e.push(i);return e}function Vt(t,n){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof n)throw new TypeError("mapper is not a function");return Array.from(t,((e,r)=>n(e,r,t)))}function Wt(t,n,e){if("function"!=typeof n)throw new TypeError("reducer is not a function");const r=t[Symbol.iterator]();let i,o,a=-1;if(arguments.length<3){if(({done:i,value:e}=r.next()),i)return;++a}for(;({done:i,value:o}=r.next()),!i;)e=n(e,o,++a,t);return e}function Zt(t){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(t).reverse()}function Kt(t,...n){t=new $(t);for(const e of n)for(const n of e)t.delete(n);return t}function Qt(t,n){const e=n[Symbol.iterator](),r=new $;for(const n of t){if(r.has(n))return!1;let t,i;for(;({value:t,done:i}=e.next())&&!i;){if(Object.is(n,t))return!1;r.add(t)}}return!0}function Jt(t,...n){t=new $(t),n=n.map(tn);t:for(const e of t)for(const r of n)if(!r.has(e)){t.delete(e);continue t}return t}function tn(t){return t instanceof $?t:new $(t)}function nn(t,n){const e=t[Symbol.iterator](),r=new Set;for(const t of n){const n=en(t);if(r.has(n))continue;let i,o;for(;({value:i,done:o}=e.next());){if(o)return!1;const t=en(i);if(r.add(t),Object.is(n,t))break}}return!0}function en(t){return null!==t&&"object"==typeof t?t.valueOf():t}function rn(t,n){return nn(n,t)}function on(...t){const n=new $;for(const e of t)for(const t of e)n.add(t);return n}function an(t){return t}var un=1,cn=2,fn=3,sn=4,ln=1e-6;function hn(t){return"translate("+t+",0)"}function dn(t){return"translate(0,"+t+")"}function pn(t){return n=>+t(n)}function gn(t,n){return n=Math.max(0,t.bandwidth()-2*n)/2,t.round()&&(n=Math.round(n)),e=>+t(e)+n}function yn(){return!this.__axis}function vn(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,c="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,f=t===un||t===sn?-1:1,s=t===sn||t===cn?"x":"y",l=t===un||t===fn?hn:dn;function h(h){var d=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):an:i,g=Math.max(o,0)+u,y=n.range(),v=+y[0]+c,_=+y[y.length-1]+c,b=(n.bandwidth?gn:pn)(n.copy(),c),m=h.selection?h.selection():h,x=m.selectAll(".domain").data([null]),w=m.selectAll(".tick").data(d,n).order(),M=w.exit(),T=w.enter().append("g").attr("class","tick"),A=w.select("line"),S=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(T),A=A.merge(T.append("line").attr("stroke","currentColor").attr(s+"2",f*o)),S=S.merge(T.append("text").attr("fill","currentColor").attr(s,f*g).attr("dy",t===un?"0em":t===fn?"0.71em":"0.32em")),h!==m&&(x=x.transition(h),w=w.transition(h),A=A.transition(h),S=S.transition(h),M=M.transition(h).attr("opacity",ln).attr("transform",(function(t){return isFinite(t=b(t))?l(t+c):this.getAttribute("transform")})),T.attr("opacity",ln).attr("transform",(function(t){var n=this.parentNode.__axis;return l((n&&isFinite(n=n(t))?n:b(t))+c)}))),M.remove(),x.attr("d",t===sn||t===cn?a?"M"+f*a+","+v+"H"+c+"V"+_+"H"+f*a:"M"+c+","+v+"V"+_:a?"M"+v+","+f*a+"V"+c+"H"+_+"V"+f*a:"M"+v+","+c+"H"+_),w.attr("opacity",1).attr("transform",(function(t){return l(b(t)+c)})),A.attr(s+"2",f*o),S.attr(s,f*g).text(p),m.filter(yn).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===cn?"start":t===sn?"end":"middle"),m.each((function(){this.__axis=b}))}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=Array.from(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:Array.from(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(u=+t,h):u},h.offset=function(t){return arguments.length?(c=+t,h):c},h}function _n(t){return vn(un,t)}function bn(t){return vn(cn,t)}function mn(t){return vn(fn,t)}function xn(t){return vn(sn,t)}var wn={value:()=>{}};function Mn(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Tn(r)}function Tn(t){this._=t}function An(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Sn(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=wn,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Tn.prototype=Mn.prototype={constructor:Tn,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=Sn(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Sn(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=An(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Tn(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const En=Mn;function Nn(){}function kn(t){return null==t?Nn:function(){return this.querySelector(t)}}function Cn(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function Pn(){return[]}function zn(t){return null==t?Pn:function(){return this.querySelectorAll(t)}}function $n(t){return function(){return this.matches(t)}}function Dn(t){return function(n){return n.matches(t)}}var Rn=Array.prototype.find;function On(){return this.firstElementChild}var qn=Array.prototype.filter;function Fn(){return Array.from(this.children)}function Un(t){return new Array(t.length)}function In(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function Bn(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new In(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function Yn(t,n,e,r,i,o,a){var u,c,f,s=new Map,l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f=a.call(c,c.__data__,u,n)+"",s.has(f)?i[u]=c:s.set(f,c));for(u=0;u<h;++u)f=a.call(t,o[u],u,o)+"",(c=s.get(f))?(r[u]=c,c.__data__=o[u],s.delete(f)):e[u]=new In(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s.get(d[u])===c&&(i[u]=c)}function jn(t){return t.__data__}function Ln(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Hn(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}In.prototype={constructor:In,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Xn="http://www.w3.org/1999/xhtml";const Gn={svg:"http://www.w3.org/2000/svg",xhtml:Xn,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Vn(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Gn.hasOwnProperty(n)?{space:Gn[n],local:t}:t}function Wn(t){return function(){this.removeAttribute(t)}}function Zn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Kn(t,n){return function(){this.setAttribute(t,n)}}function Qn(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Jn(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function te(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function ne(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ee(t){return function(){this.style.removeProperty(t)}}function re(t,n,e){return function(){this.style.setProperty(t,n,e)}}function ie(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function oe(t,n){return t.style.getPropertyValue(n)||ne(t).getComputedStyle(t,null).getPropertyValue(n)}function ae(t){return function(){delete this[t]}}function ue(t,n){return function(){this[t]=n}}function ce(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function fe(t){return t.trim().split(/^|\s+/)}function se(t){return t.classList||new le(t)}function le(t){this._node=t,this._names=fe(t.getAttribute("class")||"")}function he(t,n){for(var e=se(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function de(t,n){for(var e=se(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function pe(t){return function(){he(this,t)}}function ge(t){return function(){de(this,t)}}function ye(t,n){return function(){(n.apply(this,arguments)?he:de)(this,t)}}function ve(){this.textContent=""}function _e(t){return function(){this.textContent=t}}function be(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function me(){this.innerHTML=""}function xe(t){return function(){this.innerHTML=t}}function we(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Me(){this.nextSibling&&this.parentNode.appendChild(this)}function Te(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ae(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Xn&&n.documentElement.namespaceURI===Xn?n.createElement(t):n.createElementNS(e,t)}}function Se(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Ee(t){var n=Vn(t);return(n.local?Se:Ae)(n)}function Ne(){return null}function ke(){var t=this.parentNode;t&&t.removeChild(this)}function Ce(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Pe(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ze(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function $e(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function De(t,n,e){var r=ne(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Re(t,n){return function(){return De(this,t,n)}}function Oe(t,n){return function(){return De(this,t,n.apply(this,arguments))}}le.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qe=[null];function Fe(t,n){this._groups=t,this._parents=n}function Ue(){return new Fe([[document.documentElement]],qe)}Fe.prototype=Ue.prototype={constructor:Fe,select:function(t){"function"!=typeof t&&(t=kn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new Fe(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return Cn(t.apply(this,arguments))}}(t):zn(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,f=0;f<c;++f)(a=u[f])&&(r.push(t.call(a,a.__data__,f,u)),i.push(a));return new Fe(r,i)},selectChild:function(t){return this.select(null==t?On:function(t){return function(){return Rn.call(this.children,t)}}("function"==typeof t?t:Dn(t)))},selectChildren:function(t){return this.selectAll(null==t?Fn:function(t){return function(){return qn.call(this.children,t)}}("function"==typeof t?t:Dn(t)))},filter:function(t){"function"!=typeof t&&(t=$n(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Fe(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,jn);var e,r=n?Yn:Bn,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),s=0;s<a;++s){var l=i[s],h=o[s],d=h.length,p=Ln(t.call(l,l&&l.__data__,s,i)),g=p.length,y=c[s]=new Array(g),v=u[s]=new Array(g);r(l,h,y,v,f[s]=new Array(d),p,n);for(var _,b,m=0,x=0;m<g;++m)if(_=y[m]){for(m>=x&&(x=m+1);!(b=v[x])&&++x<g;);_._next=b||null}}return(u=new Fe(u,i))._enter=c,u._exit=f,u},enter:function(){return new Fe(this._enter||this._groups.map(Un),this._parents)},exit:function(){return new Fe(this._exit||this._groups.map(Un),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),c=0;c<a;++c)for(var f,s=e[c],l=r[c],h=s.length,d=u[c]=new Array(h),p=0;p<h;++p)(f=s[p]||l[p])&&(d[p]=f);for(;c<i;++c)u[c]=e[c];return new Fe(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Hn);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new Fe(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=Vn(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Zn:Wn:"function"==typeof n?e.local?te:Jn:e.local?Qn:Kn)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?ee:"function"==typeof n?ie:re)(t,n,null==e?"":e)):oe(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?ae:"function"==typeof n?ce:ue)(t,n)):this.node()[t]},classed:function(t,n){var e=fe(t+"");if(arguments.length<2){for(var r=se(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?ye:n?pe:ge)(e,n))},text:function(t){return arguments.length?this.each(null==t?ve:("function"==typeof t?be:_e)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?me:("function"==typeof t?we:xe)(t)):this.node().innerHTML},raise:function(){return this.each(Me)},lower:function(){return this.each(Te)},append:function(t){var n="function"==typeof t?t:Ee(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Ee(t),r=null==n?Ne:"function"==typeof n?n:kn(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ke)},clone:function(t){return this.select(t?Pe:Ce)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?$e:ze,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?Oe:Re)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ie=Ue;function Be(t){return"string"==typeof t?new Fe([[document.querySelector(t)]],[document.documentElement]):new Fe([[t]],qe)}const Ye={passive:!1},je={capture:!0,passive:!1};function Le(t){t.stopImmediatePropagation()}function He(t){t.preventDefault(),t.stopImmediatePropagation()}function Xe(t){var n=t.document.documentElement,e=Be(t).on("dragstart.drag",He,je);"onselectstart"in n?e.on("selectstart.drag",He,je):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Ge(t,n){var e=t.document.documentElement,r=Be(t).on("dragstart.drag",null);n&&(r.on("click.drag",He,je),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Ve(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function We(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Ze(){}var Ke=.7,Qe=1/Ke,Je="\\s*([+-]?\\d+)\\s*",tr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",nr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",er=/^#([0-9a-f]{3,8})$/,rr=new RegExp(`^rgb\\(${Je},${Je},${Je}\\)$`),ir=new RegExp(`^rgb\\(${nr},${nr},${nr}\\)$`),or=new RegExp(`^rgba\\(${Je},${Je},${Je},${tr}\\)$`),ar=new RegExp(`^rgba\\(${nr},${nr},${nr},${tr}\\)$`),ur=new RegExp(`^hsl\\(${tr},${nr},${nr}\\)$`),cr=new RegExp(`^hsla\\(${tr},${nr},${nr},${tr}\\)$`),fr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function sr(){return this.rgb().formatHex()}function lr(){return this.rgb().formatRgb()}function hr(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=er.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?dr(n):3===e?new vr(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?pr(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?pr(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=rr.exec(t))?new vr(n[1],n[2],n[3],1):(n=ir.exec(t))?new vr(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=or.exec(t))?pr(n[1],n[2],n[3],n[4]):(n=ar.exec(t))?pr(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ur.exec(t))?Mr(n[1],n[2]/100,n[3]/100,1):(n=cr.exec(t))?Mr(n[1],n[2]/100,n[3]/100,n[4]):fr.hasOwnProperty(t)?dr(fr[t]):"transparent"===t?new vr(NaN,NaN,NaN,0):null}function dr(t){return new vr(t>>16&255,t>>8&255,255&t,1)}function pr(t,n,e,r){return r<=0&&(t=n=e=NaN),new vr(t,n,e,r)}function gr(t){return t instanceof Ze||(t=hr(t)),t?new vr((t=t.rgb()).r,t.g,t.b,t.opacity):new vr}function yr(t,n,e,r){return 1===arguments.length?gr(t):new vr(t,n,e,null==r?1:r)}function vr(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function _r(){return`#${wr(this.r)}${wr(this.g)}${wr(this.b)}`}function br(){const t=mr(this.opacity);return`${1===t?"rgb(":"rgba("}${xr(this.r)}, ${xr(this.g)}, ${xr(this.b)}${1===t?")":`, ${t})`}`}function mr(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function xr(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function wr(t){return((t=xr(t))<16?"0":"")+t.toString(16)}function Mr(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Sr(t,n,e,r)}function Tr(t){if(t instanceof Sr)return new Sr(t.h,t.s,t.l,t.opacity);if(t instanceof Ze||(t=hr(t)),!t)return new Sr;if(t instanceof Sr)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new Sr(a,u,c,t.opacity)}function Ar(t,n,e,r){return 1===arguments.length?Tr(t):new Sr(t,n,e,null==r?1:r)}function Sr(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Er(t){return(t=(t||0)%360)<0?t+360:t}function Nr(t){return Math.max(0,Math.min(1,t||0))}function kr(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Cr(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function Pr(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Cr((e-r/n)*n,a,i,o,u)}}function zr(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Cr((e-r/n)*n,i,o,a,u)}}Ve(Ze,hr,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:sr,formatHex:sr,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Tr(this).formatHsl()},formatRgb:lr,toString:lr}),Ve(vr,yr,We(Ze,{brighter(t){return t=null==t?Qe:Math.pow(Qe,t),new vr(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Ke:Math.pow(Ke,t),new vr(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new vr(xr(this.r),xr(this.g),xr(this.b),mr(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_r,formatHex:_r,formatHex8:function(){return`#${wr(this.r)}${wr(this.g)}${wr(this.b)}${wr(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:br,toString:br})),Ve(Sr,Ar,We(Ze,{brighter(t){return t=null==t?Qe:Math.pow(Qe,t),new Sr(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Ke:Math.pow(Ke,t),new Sr(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new vr(kr(t>=240?t-240:t+120,i,r),kr(t,i,r),kr(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Sr(Er(this.h),Nr(this.s),Nr(this.l),mr(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=mr(this.opacity);return`${1===t?"hsl(":"hsla("}${Er(this.h)}, ${100*Nr(this.s)}%, ${100*Nr(this.l)}%${1===t?")":`, ${t})`}`}}));const $r=t=>()=>t;function Dr(t,n){return function(e){return t+e*n}}function Rr(t,n){var e=n-t;return e?Dr(t,e>180||e<-180?e-360*Math.round(e/360):e):$r(isNaN(t)?n:t)}function Or(t,n){var e=n-t;return e?Dr(t,e):$r(isNaN(t)?n:t)}const qr=function t(n){var e=function(t){return 1==(t=+t)?Or:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):$r(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=yr(t)).r,(n=yr(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Or(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Fr(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=yr(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var Ur=Fr(Pr),Ir=Fr(zr);function Br(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function Yr(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function jr(t,n){return(Yr(n)?Br:Lr)(t,n)}function Lr(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Kr(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function Hr(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Xr(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Gr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Kr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var Vr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Wr=new RegExp(Vr.source,"g");function Zr(t,n){var e,r,i,o=Vr.lastIndex=Wr.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=Vr.exec(t))&&(r=Wr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Xr(e,r)})),o=Wr.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})}function Kr(t,n){var e,r=typeof n;return null==n||"boolean"===r?$r(n):("number"===r?Xr:"string"===r?(e=hr(n))?(n=e,qr):Zr:n instanceof hr?qr:n instanceof Date?Hr:Yr(n)?Br:Array.isArray(n)?Lr:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Gr:Xr)(t,n)}function Qr(t){let n;for(;n=t.sourceEvent;)t=n;return t}function Jr(t,n){if(t=Qr(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}}return[t.pageX,t.pageY]}var ti,ni,ei=0,ri=0,ii=0,oi=0,ai=0,ui=0,ci="object"==typeof performance&&performance.now?performance:Date,fi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function si(){return ai||(fi(li),ai=ci.now()+ui)}function li(){ai=0}function hi(){this._call=this._time=this._next=null}function di(t,n,e){var r=new hi;return r.restart(t,n,e),r}function pi(){si(),++ei;for(var t,n=ti;n;)(t=ai-n._time)>=0&&n._call.call(void 0,t),n=n._next;--ei}function gi(){ai=(oi=ci.now())+ui,ei=ri=0;try{pi()}finally{ei=0,function(){for(var t,n,e=ti,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ti=n);ni=t,vi(r)}(),ai=0}}function yi(){var t=ci.now(),n=t-oi;n>1e3&&(ui-=n,oi=t)}function vi(t){ei||(ri&&(ri=clearTimeout(ri)),t-ai>24?(t<1/0&&(ri=setTimeout(gi,t-ci.now()-ui)),ii&&(ii=clearInterval(ii))):(ii||(oi=ci.now(),ii=setInterval(yi,1e3)),ei=1,fi(gi)))}function _i(t,n,e){var r=new hi;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}hi.prototype=di.prototype={constructor:hi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?si():+e)+(null==n?0:+n),this._next||ni===this||(ni?ni._next=this:ti=this,ni=this),this._call=t,this._time=e,vi()},stop:function(){this._call&&(this._call=null,this._time=1/0,vi())}};var bi=En("start","end","cancel","interrupt"),mi=[],xi=1,wi=2,Mi=5,Ti=6;function Ai(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(e.state!==xi)return u();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return _i(o);4===h.state?(h.state=Ti,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=Ti,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(_i((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=wi,e.on.call("start",t,t.__data__,e.index,e.group),e.state===wi){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Mi,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===Mi&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Ti,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=di((function(t){e.state=xi,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:bi,tween:mi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Si(t,n){var e=Ni(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Ei(t,n){var e=Ni(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Ni(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function ki(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>wi&&e.state<Mi,e.state=Ti,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}var Ci,Pi=180/Math.PI,zi={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function $i(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Pi,skewX:Math.atan(c)*Pi,scaleX:a,scaleY:u}}function Di(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:Xr(t,i)},{i:c-2,x:Xr(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Xr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Xr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Xr(t,e)},{i:u-2,x:Xr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var Ri=Di((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?zi:$i(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),Oi=Di((function(t){return null==t?zi:(Ci||(Ci=document.createElementNS("http://www.w3.org/2000/svg","g")),Ci.setAttribute("transform",t),(t=Ci.transform.baseVal.consolidate())?$i((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):zi)}),", ",")",")");function qi(t,n){var e,r;return function(){var i=Ei(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Fi(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Ei(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=u;break}c===f&&i.push(u)}o.tween=i}}function Ui(t,n,e){var r=t._id;return t.each((function(){var t=Ei(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Ni(t,r).value[n]}}function Ii(t,n){var e;return("number"==typeof n?Xr:n instanceof hr?qr:(e=hr(n))?(n=e,qr):Zr)(t,n)}function Bi(t){return function(){this.removeAttribute(t)}}function Yi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ji(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Li(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Hi(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function Xi(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function Gi(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}(t,i)),e}return i._value=n,i}function Vi(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}(t,i)),e}return i._value=n,i}function Wi(t,n){return function(){Si(this,t).delay=+n.apply(this,arguments)}}function Zi(t,n){return n=+n,function(){Si(this,t).delay=n}}function Ki(t,n){return function(){Ei(this,t).duration=+n.apply(this,arguments)}}function Qi(t,n){return n=+n,function(){Ei(this,t).duration=n}}var Ji=Ie.prototype.constructor;function to(t){return function(){this.style.removeProperty(t)}}var no=0;function eo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ro(t){return Ie().transition(t)}function io(){return++no}var oo=Ie.prototype;function ao(t){return t*t*t}function uo(t){return--t*t*t+1}function co(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}eo.prototype=ro.prototype={constructor:eo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=kn(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],s=f.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,Ai(l[h],n,e,h,l,Ni(u,e)));return new eo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=zn(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=Ni(c,e),g=0,y=d.length;g<y;++g)(h=d[g])&&Ai(h,n,e,g,d,p);o.push(d),a.push(c)}return new eo(o,a,n,e)},selectChild:oo.selectChild,selectChildren:oo.selectChildren,filter:function(t){"function"!=typeof t&&(t=$n(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new eo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new eo(a,this._parents,this._name,this._id)},selection:function(){return new Ji(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=io(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)if(a=u[f]){var s=Ni(a,n);Ai(a,t,e,f,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new eo(r,this._parents,t,e)},call:oo.call,nodes:oo.nodes,node:oo.node,size:oo.size,empty:oo.empty,each:oo.each,on:function(t,n){var e=this._id;return arguments.length<2?Ni(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Si:Ei;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=Vn(t),r="transform"===e?Oi:Ii;return this.attrTween(t,"function"==typeof n?(e.local?Xi:Hi)(e,r,Ui(this,"attr."+t,n)):null==n?(e.local?Yi:Bi)(e):(e.local?Li:ji)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Vn(t);return this.tween(e,(r.local?Gi:Vi)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ri:Ii;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=oe(this,t),a=(this.style.removeProperty(t),oe(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,to(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=oe(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=oe(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,Ui(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=Ei(this,t),f=c.on,s=null==c.value[a]?o||(o=to(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(u,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=oe(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ui(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,function(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&function(t){return function(n){this.textContent=t.call(this,n)}}(r)),n}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Ni(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?qi:Fi)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Wi:Zi)(n,t)):Ni(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ki:Qi)(n,t)):Ni(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Ei(this,t).ease=n}}(n,t)):Ni(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Ei(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=Ei(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:oo[Symbol.iterator]};var fo={time:null,delay:0,duration:250,ease:co};function so(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ie.prototype.interrupt=function(t){return this.each((function(){ki(this,t)}))},Ie.prototype.transition=function(t){var n,e;t instanceof eo?(n=t._id,t=t._name):(n=io(),(e=fo).time=si(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&Ai(a,t,n,f,u,e||so(a,n));return new eo(r,this._parents,t,n)};var lo=[null];function ho(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>xi&&e.name===n)return new eo([[t]],lo,n,+r);return null}const po=t=>()=>t;function go(t,{sourceEvent:n,target:e,selection:r,mode:i,dispatch:o}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:e,enumerable:!0,configurable:!0},selection:{value:r,enumerable:!0,configurable:!0},mode:{value:i,enumerable:!0,configurable:!0},_:{value:o}})}function yo(t){t.preventDefault(),t.stopImmediatePropagation()}var vo={name:"drag"},_o={name:"space"},bo={name:"handle"},mo={name:"center"};const{abs:xo,max:wo,min:Mo}=Math;function To(t){return[+t[0],+t[1]]}function Ao(t){return[To(t[0]),To(t[1])]}var So={name:"x",handles:["w","e"].map(Do),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Eo={name:"y",handles:["n","s"].map(Do),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Do),input:function(t){return null==t?null:Ao(t)},output:function(t){return t}},ko={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Co={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},zo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},$o={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Do(t){return{type:t}}function Ro(t){return!t.ctrlKey&&!t.button}function Oo(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function qo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Fo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Uo(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Io(){return jo(So)}function Bo(){return jo(Eo)}function Yo(){return jo(No)}function jo(t){var n,e=Oo,r=Ro,i=qo,o=!0,a=En("start","brush","end"),u=6;function c(n){var e=n.property("__brush",g).selectAll(".overlay").data([Do("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ko.overlay).merge(e).each((function(){var t=Fo(this).extent;Be(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Do("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ko.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return ko[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=Be(this),n=Fo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){var r=t.__brush.emitter;return!r||e&&r.clean?new l(t,n,e):r}function l(t,n,e){this.that=t,this.args=n,this.state=t.__brush,this.active=0,this.clean=e}function h(e){if((!n||e.touches)&&r.apply(this,arguments)){var i,a,u,c,l,h,d,p,g,y,v,_=this,b=e.target.__data__.type,m="selection"===(o&&e.metaKey?b="overlay":b)?vo:o&&e.altKey?mo:bo,x=t===Eo?null:zo[b],w=t===So?null:$o[b],M=Fo(_),T=M.extent,A=M.selection,S=T[0][0],E=T[0][1],N=T[1][0],k=T[1][1],C=0,P=0,z=x&&w&&o&&e.shiftKey,$=Array.from(e.touches||[e],(t=>{const n=t.identifier;return(t=Jr(t,_)).point0=t.slice(),t.identifier=n,t}));ki(_);var D=s(_,arguments,!0).beforestart();if("overlay"===b){A&&(g=!0);const n=[$[0],$[1]||$[0]];M.selection=A=[[i=t===Eo?S:Mo(n[0][0],n[1][0]),u=t===So?E:Mo(n[0][1],n[1][1])],[l=t===Eo?N:wo(n[0][0],n[1][0]),d=t===So?k:wo(n[0][1],n[1][1])]],$.length>1&&U(e)}else i=A[0][0],u=A[0][1],l=A[1][0],d=A[1][1];a=i,c=u,h=l,p=d;var R=Be(_).attr("pointer-events","none"),O=R.selectAll(".overlay").attr("cursor",ko[b]);if(e.touches)D.moved=F,D.ended=I;else{var q=Be(e.view).on("mousemove.brush",F,!0).on("mouseup.brush",I,!0);o&&q.on("keydown.brush",(function(t){switch(t.keyCode){case 16:z=x&&w;break;case 18:m===bo&&(x&&(l=h-C*x,i=a+C*x),w&&(d=p-P*w,u=c+P*w),m=mo,U(t));break;case 32:m!==bo&&m!==mo||(x<0?l=h-C:x>0&&(i=a-C),w<0?d=p-P:w>0&&(u=c-P),m=_o,O.attr("cursor",ko.selection),U(t));break;default:return}yo(t)}),!0).on("keyup.brush",(function(t){switch(t.keyCode){case 16:z&&(y=v=z=!1,U(t));break;case 18:m===mo&&(x<0?l=h:x>0&&(i=a),w<0?d=p:w>0&&(u=c),m=bo,U(t));break;case 32:m===_o&&(t.altKey?(x&&(l=h-C*x,i=a+C*x),w&&(d=p-P*w,u=c+P*w),m=mo):(x<0?l=h:x>0&&(i=a),w<0?d=p:w>0&&(u=c),m=bo),O.attr("cursor",ko[b]),U(t));break;default:return}yo(t)}),!0),Xe(e.view)}f.call(_),D.start(e,m.name)}function F(t){for(const n of t.changedTouches||[t])for(const t of $)t.identifier===n.identifier&&(t.cur=Jr(n,_));if(z&&!y&&!v&&1===$.length){const t=$[0];xo(t.cur[0]-t[0])>xo(t.cur[1]-t[1])?v=!0:y=!0}for(const t of $)t.cur&&(t[0]=t.cur[0],t[1]=t.cur[1]);g=!0,yo(t),U(t)}function U(t){const n=$[0],e=n.point0;var r;switch(C=n[0]-e[0],P=n[1]-e[1],m){case _o:case vo:x&&(C=wo(S-i,Mo(N-l,C)),a=i+C,h=l+C),w&&(P=wo(E-u,Mo(k-d,P)),c=u+P,p=d+P);break;case bo:$[1]?(x&&(a=wo(S,Mo(N,$[0][0])),h=wo(S,Mo(N,$[1][0])),x=1),w&&(c=wo(E,Mo(k,$[0][1])),p=wo(E,Mo(k,$[1][1])),w=1)):(x<0?(C=wo(S-i,Mo(N-i,C)),a=i+C,h=l):x>0&&(C=wo(S-l,Mo(N-l,C)),a=i,h=l+C),w<0?(P=wo(E-u,Mo(k-u,P)),c=u+P,p=d):w>0&&(P=wo(E-d,Mo(k-d,P)),c=u,p=d+P));break;case mo:x&&(a=wo(S,Mo(N,i-C*x)),h=wo(S,Mo(N,l+C*x))),w&&(c=wo(E,Mo(k,u-P*w)),p=wo(E,Mo(k,d+P*w)))}h<a&&(x*=-1,r=i,i=l,l=r,r=a,a=h,h=r,b in Co&&O.attr("cursor",ko[b=Co[b]])),p<c&&(w*=-1,r=u,u=d,d=r,r=c,c=p,p=r,b in Po&&O.attr("cursor",ko[b=Po[b]])),M.selection&&(A=M.selection),y&&(a=A[0][0],h=A[1][0]),v&&(c=A[0][1],p=A[1][1]),A[0][0]===a&&A[0][1]===c&&A[1][0]===h&&A[1][1]===p||(M.selection=[[a,c],[h,p]],f.call(_),D.brush(t,m.name))}function I(t){if(function(t){t.stopImmediatePropagation()}(t),t.touches){if(t.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Ge(t.view,g),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),O.attr("cursor",ko.overlay),M.selection&&(A=M.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(A)&&(M.selection=null,f.call(_)),D.end(t,m.name)}}function d(t){s(this,arguments).moved(t)}function p(t){s(this,arguments).ended(t)}function g(){var n=this.__brush||{selection:null};return n.extent=Ao(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e,r){n.tween?n.on("start.brush",(function(t){s(this,arguments).beforestart().start(t)})).on("interrupt.brush end.brush",(function(t){s(this,arguments).end(t)})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Kr(o,a);function c(t){r.selection=1===t&&null===a?null:u(t),f.call(n),i.brush()}return null!==o&&null!==a?c:c(1)})):n.each((function(){var n=this,i=arguments,o=n.__brush,a=t.input("function"==typeof e?e.apply(n,i):e,o.extent),u=s(n,i).beforestart();ki(n),o.selection=null===a?null:a,f.call(n),u.start(r).brush(r).end(r)}))},c.clear=function(t,n){c.move(t,null,n)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(t,n){return this.starting?(this.starting=!1,this.emit("start",t,n)):this.emit("brush",t),this},brush:function(t,n){return this.emit("brush",t,n),this},end:function(t,n){return 0==--this.active&&(delete this.state.emitter,this.emit("end",t,n)),this},emit:function(n,e,r){var i=Be(this.that).datum();a.call(n,this.that,new go(n,{sourceEvent:e,target:c,selection:t.output(this.state.selection),mode:r,dispatch:a}),i)}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:po(Ao(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:po(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:po(!!t),c):i},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var Lo=Math.abs,Ho=Math.cos,Xo=Math.sin,Go=Math.PI,Vo=Go/2,Wo=2*Go,Zo=Math.max,Ko=1e-12;function Qo(t,n){return Array.from({length:n-t},((n,e)=>t+e))}function Jo(){return ea(!1,!1)}function ta(){return ea(!1,!0)}function na(){return ea(!0,!1)}function ea(t,n){var e=0,r=null,i=null,o=null;function a(a){var u,c=a.length,f=new Array(c),s=Qo(0,c),l=new Array(c*c),h=new Array(c),d=0;a=Float64Array.from({length:c*c},n?(t,n)=>a[n%c][n/c|0]:(t,n)=>a[n/c|0][n%c]);for(let n=0;n<c;++n){let e=0;for(let r=0;r<c;++r)e+=a[n*c+r]+t*a[r*c+n];d+=f[n]=e}u=(d=Zo(0,Wo-e*c)/d)?e:Wo/c;{let n=0;r&&s.sort(((t,n)=>r(f[t],f[n])));for(const e of s){const r=n;if(t){const t=Qo(1+~c,c).filter((t=>t<0?a[~t*c+e]:a[e*c+t]));i&&t.sort(((t,n)=>i(t<0?-a[~t*c+e]:a[e*c+t],n<0?-a[~n*c+e]:a[e*c+n])));for(const r of t)r<0?(l[~r*c+e]||(l[~r*c+e]={source:null,target:null})).target={index:e,startAngle:n,endAngle:n+=a[~r*c+e]*d,value:a[~r*c+e]}:(l[e*c+r]||(l[e*c+r]={source:null,target:null})).source={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]};h[e]={index:e,startAngle:r,endAngle:n,value:f[e]}}else{const t=Qo(0,c).filter((t=>a[e*c+t]||a[t*c+e]));i&&t.sort(((t,n)=>i(a[e*c+t],a[e*c+n])));for(const r of t){let t;if(e<r?(t=l[e*c+r]||(l[e*c+r]={source:null,target:null}),t.source={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]}):(t=l[r*c+e]||(l[r*c+e]={source:null,target:null}),t.target={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]},e===r&&(t.source=t.target)),t.source&&t.target&&t.source.value<t.target.value){const n=t.source;t.source=t.target,t.target=n}}h[e]={index:e,startAngle:r,endAngle:n,value:f[e]}}n+=u}}return(l=Object.values(l)).groups=h,o?l.sort(o):l}return a.padAngle=function(t){return arguments.length?(e=Zo(0,t),a):e},a.sortGroups=function(t){return arguments.length?(r=t,a):r},a.sortSubgroups=function(t){return arguments.length?(i=t,a):i},a.sortChords=function(t){return arguments.length?(null==t?o=null:(n=t,o=function(t,e){return n(t.source.value+t.target.value,e.source.value+e.target.value)})._=t,a):o&&o._;var n},a}const ra=Math.PI,ia=2*ra,oa=1e-6,aa=ia-oa;function ua(t){this._+=t[0];for(let n=1,e=t.length;n<e;++n)this._+=arguments[n]+t[n]}class ca{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?ua:function(t){let n=Math.floor(t);if(!(n>=0))throw new Error(`invalid digits: ${t}`);if(n>15)return ua;const e=10**n;return function(t){this._+=t[0];for(let n=1,r=t.length;n<r;++n)this._+=Math.round(arguments[n]*e)/e+t[n]}}(t)}moveTo(t,n){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,n){this._append`L${this._x1=+t},${this._y1=+n}`}quadraticCurveTo(t,n,e,r){this._append`Q${+t},${+n},${this._x1=+e},${this._y1=+r}`}bezierCurveTo(t,n,e,r,i,o){this._append`C${+t},${+n},${+e},${+r},${this._x1=+i},${this._y1=+o}`}arcTo(t,n,e,r,i){if(t=+t,n=+n,e=+e,r=+r,(i=+i)<0)throw new Error(`negative radius: ${i}`);let o=this._x1,a=this._y1,u=e-t,c=r-n,f=o-t,s=a-n,l=f*f+s*s;if(null===this._x1)this._append`M${this._x1=t},${this._y1=n}`;else if(l>oa)if(Math.abs(s*u-c*f)>oa&&i){let h=e-o,d=r-a,p=u*u+c*c,g=h*h+d*d,y=Math.sqrt(p),v=Math.sqrt(l),_=i*Math.tan((ra-Math.acos((p+l-g)/(2*y*v)))/2),b=_/v,m=_/y;Math.abs(b-1)>oa&&this._append`L${t+b*f},${n+b*s}`,this._append`A${i},${i},0,0,${+(s*h>f*d)},${this._x1=t+m*u},${this._y1=n+m*c}`}else this._append`L${this._x1=t},${this._y1=n}`}arc(t,n,e,r,i,o){if(t=+t,n=+n,o=!!o,(e=+e)<0)throw new Error(`negative radius: ${e}`);let a=e*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,s=1^o,l=o?r-i:i-r;null===this._x1?this._append`M${c},${f}`:(Math.abs(this._x1-c)>oa||Math.abs(this._y1-f)>oa)&&this._append`L${c},${f}`,e&&(l<0&&(l=l%ia+ia),l>aa?this._append`A${e},${e},0,1,${s},${t-a},${n-u}A${e},${e},0,1,${s},${this._x1=c},${this._y1=f}`:l>oa&&this._append`A${e},${e},0,${+(l>=ra)},${s},${this._x1=t+e*Math.cos(i)},${this._y1=n+e*Math.sin(i)}`)}rect(t,n,e,r){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${e=+e}v${+r}h${-e}Z`}toString(){return this._}}function fa(){return new ca}function sa(t=3){return new ca(+t)}fa.prototype=ca.prototype;var la=Array.prototype.slice;function ha(t){return function(){return t}}function da(t){return t.source}function pa(t){return t.target}function ga(t){return t.radius}function ya(t){return t.startAngle}function va(t){return t.endAngle}function _a(){return 0}function ba(){return 10}function ma(t){var n=da,e=pa,r=ga,i=ga,o=ya,a=va,u=_a,c=null;function f(){var f,s=n.apply(this,arguments),l=e.apply(this,arguments),h=u.apply(this,arguments)/2,d=la.call(arguments),p=+r.apply(this,(d[0]=s,d)),g=o.apply(this,d)-Vo,y=a.apply(this,d)-Vo,v=+i.apply(this,(d[0]=l,d)),_=o.apply(this,d)-Vo,b=a.apply(this,d)-Vo;if(c||(c=f=fa()),h>Ko&&(Lo(y-g)>2*h+Ko?y>g?(g+=h,y-=h):(g-=h,y+=h):g=y=(g+y)/2,Lo(b-_)>2*h+Ko?b>_?(_+=h,b-=h):(_-=h,b+=h):_=b=(_+b)/2),c.moveTo(p*Ho(g),p*Xo(g)),c.arc(0,0,p,g,y),g!==_||y!==b)if(t){var m=v-+t.apply(this,arguments),x=(_+b)/2;c.quadraticCurveTo(0,0,m*Ho(_),m*Xo(_)),c.lineTo(v*Ho(x),v*Xo(x)),c.lineTo(m*Ho(b),m*Xo(b))}else c.quadraticCurveTo(0,0,v*Ho(_),v*Xo(_)),c.arc(0,0,v,_,b);if(c.quadraticCurveTo(0,0,p*Ho(g),p*Xo(g)),c.closePath(),f)return c=null,f+""||null}return t&&(f.headRadius=function(n){return arguments.length?(t="function"==typeof n?n:ha(+n),f):t}),f.radius=function(t){return arguments.length?(r=i="function"==typeof t?t:ha(+t),f):r},f.sourceRadius=function(t){return arguments.length?(r="function"==typeof t?t:ha(+t),f):r},f.targetRadius=function(t){return arguments.length?(i="function"==typeof t?t:ha(+t),f):i},f.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:ha(+t),f):o},f.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:ha(+t),f):a},f.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:ha(+t),f):u},f.source=function(t){return arguments.length?(n=t,f):n},f.target=function(t){return arguments.length?(e=t,f):e},f.context=function(t){return arguments.length?(c=null==t?null:t,f):c},f}function xa(){return ma()}function wa(){return ma(ba)}const Ma=Math.PI/180,Ta=180/Math.PI,Aa=.96422,Sa=1,Ea=.82521,Na=4/29,ka=6/29,Ca=3*ka*ka,Pa=ka*ka*ka;function za(t){if(t instanceof Ra)return new Ra(t.l,t.a,t.b,t.opacity);if(t instanceof ja)return La(t);t instanceof vr||(t=gr(t));var n,e,r=Ua(t.r),i=Ua(t.g),o=Ua(t.b),a=Oa((.2225045*r+.7168786*i+.0606169*o)/Sa);return r===i&&i===o?n=e=a:(n=Oa((.4360747*r+.3850649*i+.1430804*o)/Aa),e=Oa((.0139322*r+.0971045*i+.7141733*o)/Ea)),new Ra(116*a-16,500*(n-a),200*(a-e),t.opacity)}function $a(t,n){return new Ra(t,0,0,null==n?1:n)}function Da(t,n,e,r){return 1===arguments.length?za(t):new Ra(t,n,e,null==r?1:r)}function Ra(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Oa(t){return t>Pa?Math.pow(t,1/3):t/Ca+Na}function qa(t){return t>ka?t*t*t:Ca*(t-Na)}function Fa(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ua(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ia(t){if(t instanceof ja)return new ja(t.h,t.c,t.l,t.opacity);if(t instanceof Ra||(t=za(t)),0===t.a&&0===t.b)return new ja(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Ta;return new ja(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ba(t,n,e,r){return 1===arguments.length?Ia(t):new ja(e,n,t,null==r?1:r)}function Ya(t,n,e,r){return 1===arguments.length?Ia(t):new ja(t,n,e,null==r?1:r)}function ja(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function La(t){if(isNaN(t.h))return new Ra(t.l,0,0,t.opacity);var n=t.h*Ma;return new Ra(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Ve(Ra,Da,We(Ze,{brighter(t){return new Ra(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker(t){return new Ra(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new vr(Fa(3.1338561*(n=Aa*qa(n))-1.6168667*(t=Sa*qa(t))-.4906146*(e=Ea*qa(e))),Fa(-.9787684*n+1.9161415*t+.033454*e),Fa(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ve(ja,Ya,We(Ze,{brighter(t){return new ja(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker(t){return new ja(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb(){return La(this).rgb()}}));var Ha=-.14861,Xa=1.78277,Ga=-.29227,Va=-.90649,Wa=1.97294,Za=Wa*Va,Ka=Wa*Xa,Qa=Xa*Ga-Va*Ha;function Ja(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof tu)return new tu(t.h,t.s,t.l,t.opacity);t instanceof vr||(t=gr(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Qa*r+Za*n-Ka*e)/(Qa+Za-Ka),o=r-i,a=(Wa*(e-i)-Ga*o)/Va,u=Math.sqrt(a*a+o*o)/(Wa*i*(1-i)),c=u?Math.atan2(a,o)*Ta-120:NaN;return new tu(c<0?c+360:c,u,i,t.opacity)}(t):new tu(t,n,e,null==r?1:r)}function tu(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Ve(tu,Ja,We(Ze,{brighter(t){return t=null==t?Qe:Math.pow(Qe,t),new tu(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Ke:Math.pow(Ke,t),new tu(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=isNaN(this.h)?0:(this.h+120)*Ma,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new vr(255*(n+e*(Ha*r+Xa*i)),255*(n+e*(Ga*r+Va*i)),255*(n+e*(Wa*r)),this.opacity)}}));var nu=Array.prototype.slice;function eu(t,n){return t-n}const ru=t=>()=>t;function iu(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=ou(t,n[r]))return e;return 0}function ou(t,n){for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],f=c[0],s=c[1],l=t[u],h=l[0],d=l[1];if(au(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function au(t,n,e){var r,i,o,a;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],a=n[r],i<=o&&o<=a||a<=o&&o<=i)}function uu(){}var cu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function fu(){var t=1,n=1,e=ht,r=u;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(eu);else{const e=N(t,su);for(n=ct(...lt(e[0],e[1],n),n);n[n.length-1]>=e[1];)n.pop();for(;n[1]<e[0];)n.shift()}return n.map((n=>o(t,n)))}function o(e,i){const o=null==i?NaN:+i;if(isNaN(o))throw new Error(`invalid value: ${i}`);var u=[],c=[];return function(e,r,i){var o,u,c,f,s,l,h=new Array,d=new Array;for(o=u=-1,f=lu(e[0],r),cu[f<<1].forEach(p);++o<t-1;)c=f,f=lu(e[o+1],r),cu[c|f<<1].forEach(p);for(cu[0|f].forEach(p);++u<n-1;){for(o=-1,f=lu(e[u*t+t],r),s=lu(e[u*t],r),cu[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=lu(e[u*t+t+o+1],r),l=s,s=lu(e[u*t+o+1],r),cu[c|f<<1|s<<2|l<<3].forEach(p);cu[f|s<<3].forEach(p)}for(o=-1,s=e[u*t]>=r,cu[s<<2].forEach(p);++o<t-1;)l=s,s=lu(e[u*t+o+1],r),cu[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],f=a(r),s=a(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}cu[s<<3].forEach(p)}(e,o,(function(t){r(t,e,o),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?u.push([t]):c.push(t)})),c.forEach((function(t){for(var n,e=0,r=u.length;e<r;++e)if(-1!==iu((n=u[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:u}}function a(n){return 2*n[0]+n[1]*(t+1)*4}function u(e,r,i){e.forEach((function(e){var o=e[0],a=e[1],u=0|o,c=0|a,f=hu(r[c*t+u]);o>0&&o<t&&u===o&&(e[0]=du(o,hu(r[c*t+u-1]),f,i)),a>0&&a<n&&c===a&&(e[1]=du(a,hu(r[(c-1)*t+u]),f,i))}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.floor(e[0]),o=Math.floor(e[1]);if(!(r>=0&&o>=0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?ru(nu.call(t)):ru(t),i):e},i.smooth=function(t){return arguments.length?(r=t?u:uu,i):r===u},i}function su(t){return isFinite(t)?t:NaN}function lu(t,n){return null!=t&&+t>=n}function hu(t){return null==t||isNaN(t=+t)?-1/0:t}function du(t,n,e,r){const i=r-n,o=e-n,a=isFinite(i)||isFinite(o)?i/o:Math.sign(i)/Math.sign(o);return isNaN(a)?t:t+a-.5}function pu(t){return t[0]}function gu(t){return t[1]}function yu(){return 1}function vu(){var t=pu,n=gu,e=yu,r=960,i=500,o=20,a=2,u=3*o,c=r+2*u>>a,f=i+2*u>>a,s=ru(20);function l(r){var i=new Float32Array(c*f),s=Math.pow(2,-a),l=-1;for(const o of r){var h=(t(o,++l,r)+u)*s,d=(n(o,l,r)+u)*s,g=+e(o,l,r);if(g&&h>=0&&h<c&&d>=0&&d<f){var y=Math.floor(h),v=Math.floor(d),_=h-y-.5,b=d-v-.5;i[y+v*c]+=(1-_)*(1-b)*g,i[y+1+v*c]+=_*(1-b)*g,i[y+1+(v+1)*c]+=_*b*g,i[y+(v+1)*c]+=(1-_)*b*g}}return p({data:i,width:c,height:f},o*s),i}function h(t){var n=l(t),e=s(n),r=Math.pow(2,2*a);return Array.isArray(e)||(e=ct(Number.MIN_VALUE,pt(n)/r,e)),fu().size([c,f]).thresholds(e.map((t=>t*r)))(n).map(((t,n)=>(t.value=+e[n],d(t))))}function d(t){return t.coordinates.forEach(g),t}function g(t){t.forEach(y)}function y(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function _(){return c=r+2*(u=3*o)>>a,f=i+2*u>>a,h}return h.contours=function(t){var n=l(t),e=fu().size([c,f]),r=Math.pow(2,2*a),i=t=>{t=+t;var i=d(e.contour(n,t*r));return i.value=t,i};return Object.defineProperty(i,"max",{get:()=>pt(n)/r}),i},h.x=function(n){return arguments.length?(t="function"==typeof n?n:ru(+n),h):t},h.y=function(t){return arguments.length?(n="function"==typeof t?t:ru(+t),h):n},h.weight=function(t){return arguments.length?(e="function"==typeof t?t:ru(+t),h):e},h.size=function(t){if(!arguments.length)return[r,i];var n=+t[0],e=+t[1];if(!(n>=0&&e>=0))throw new Error("invalid size");return r=n,i=e,_()},h.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),_()},h.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?ru(nu.call(t)):ru(t),h):s},h.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=(Math.sqrt(4*t*t+1)-1)/2,_()},h}const _u=134217729;function bu(t,n,e,r,i){let o,a,u,c,f=n[0],s=r[0],l=0,h=0;s>f==s>-f?(o=f,f=n[++l]):(o=s,s=r[++h]);let d=0;if(l<t&&h<e)for(s>f==s>-f?(a=f+o,u=o-(a-f),f=n[++l]):(a=s+o,u=o-(a-s),s=r[++h]),o=a,0!==u&&(i[d++]=u);l<t&&h<e;)s>f==s>-f?(a=o+f,c=a-o,u=o-(a-c)+(f-c),f=n[++l]):(a=o+s,c=a-o,u=o-(a-c)+(s-c),s=r[++h]),o=a,0!==u&&(i[d++]=u);for(;l<t;)a=o+f,c=a-o,u=o-(a-c)+(f-c),f=n[++l],o=a,0!==u&&(i[d++]=u);for(;h<e;)a=o+s,c=a-o,u=o-(a-c)+(s-c),s=r[++h],o=a,0!==u&&(i[d++]=u);return 0===o&&0!==d||(i[d++]=o),d}function mu(t){return new Float64Array(t)}const xu=mu(4),wu=mu(8),Mu=mu(12),Tu=mu(16),Au=mu(4);function Su(t,n,e,r,i,o){const a=(n-o)*(e-i),u=(t-i)*(r-o),c=a-u,f=Math.abs(a+u);return Math.abs(c)>=33306690738754716e-32*f?c:-function(t,n,e,r,i,o,a){let u,c,f,s,l,h,d,p,g,y,v,_,b,m,x,w,M,T;const A=t-i,S=e-i,E=n-o,N=r-o;m=A*N,h=_u*A,d=h-(h-A),p=A-d,h=_u*N,g=h-(h-N),y=N-g,x=p*y-(m-d*g-p*g-d*y),w=E*S,h=_u*E,d=h-(h-E),p=E-d,h=_u*S,g=h-(h-S),y=S-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,xu[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,xu[1]=b-(v+l)+(l-w),T=_+v,l=T-_,xu[2]=_-(T-l)+(v-l),xu[3]=T;let k=function(t,n){let e=n[0];for(let t=1;t<4;t++)e+=n[t];return e}(0,xu),C=22204460492503146e-32*a;if(k>=C||-k>=C)return k;if(l=t-A,u=t-(A+l)+(l-i),l=e-S,f=e-(S+l)+(l-i),l=n-E,c=n-(E+l)+(l-o),l=r-N,s=r-(N+l)+(l-o),0===u&&0===c&&0===f&&0===s)return k;if(C=11093356479670487e-47*a+33306690738754706e-32*Math.abs(k),k+=A*s+N*u-(E*f+S*c),k>=C||-k>=C)return k;m=u*N,h=_u*u,d=h-(h-u),p=u-d,h=_u*N,g=h-(h-N),y=N-g,x=p*y-(m-d*g-p*g-d*y),w=c*S,h=_u*c,d=h-(h-c),p=c-d,h=_u*S,g=h-(h-S),y=S-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Au[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Au[1]=b-(v+l)+(l-w),T=_+v,l=T-_,Au[2]=_-(T-l)+(v-l),Au[3]=T;const P=bu(4,xu,4,Au,wu);m=A*s,h=_u*A,d=h-(h-A),p=A-d,h=_u*s,g=h-(h-s),y=s-g,x=p*y-(m-d*g-p*g-d*y),w=E*f,h=_u*E,d=h-(h-E),p=E-d,h=_u*f,g=h-(h-f),y=f-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Au[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Au[1]=b-(v+l)+(l-w),T=_+v,l=T-_,Au[2]=_-(T-l)+(v-l),Au[3]=T;const z=bu(P,wu,4,Au,Mu);m=u*s,h=_u*u,d=h-(h-u),p=u-d,h=_u*s,g=h-(h-s),y=s-g,x=p*y-(m-d*g-p*g-d*y),w=c*f,h=_u*c,d=h-(h-c),p=c-d,h=_u*f,g=h-(h-f),y=f-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Au[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Au[1]=b-(v+l)+(l-w),T=_+v,l=T-_,Au[2]=_-(T-l)+(v-l),Au[3]=T;const $=bu(z,Mu,4,Au,Tu);return Tu[$-1]}(t,n,e,r,i,o,f)}mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(8),mu(8),mu(8),mu(4),mu(8),mu(8),mu(8),mu(12),mu(192),mu(192),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(4),mu(4),mu(4),mu(8),mu(16),mu(16),mu(16),mu(32),mu(32),mu(48),mu(64),mu(1152),mu(1152),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(1152),mu(1152),mu(1152),mu(1152),mu(1152),mu(2304),mu(2304),mu(3456),mu(5760),mu(8),mu(8),mu(8),mu(16),mu(24),mu(48),mu(48),mu(96),mu(192),mu(384),mu(384),mu(384),mu(768),mu(96),mu(96),mu(96),mu(1152);const Eu=Math.pow(2,-52),Nu=new Uint32Array(512);class ku{static from(t,n=Ru,e=Ou){const r=t.length,i=new Float64Array(2*r);for(let o=0;o<r;o++){const r=t[o];i[2*o]=n(r),i[2*o+1]=e(r)}return new ku(i)}constructor(t){const n=t.length>>1;if(n>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const e=Math.max(2*n-5,0);this._triangles=new Uint32Array(3*e),this._halfedges=new Int32Array(3*e),this._hashSize=Math.ceil(Math.sqrt(n)),this._hullPrev=new Uint32Array(n),this._hullNext=new Uint32Array(n),this._hullTri=new Uint32Array(n),this._hullHash=new Int32Array(this._hashSize),this._ids=new Uint32Array(n),this._dists=new Float64Array(n),this.update()}update(){const{coords:t,_hullPrev:n,_hullNext:e,_hullTri:r,_hullHash:i}=this,o=t.length>>1;let a=1/0,u=1/0,c=-1/0,f=-1/0;for(let n=0;n<o;n++){const e=t[2*n],r=t[2*n+1];e<a&&(a=e),r<u&&(u=r),e>c&&(c=e),r>f&&(f=r),this._ids[n]=n}const s=(a+c)/2,l=(u+f)/2;let h,d,p;for(let n=0,e=1/0;n<o;n++){const r=Cu(s,l,t[2*n],t[2*n+1]);r<e&&(h=n,e=r)}const g=t[2*h],y=t[2*h+1];for(let n=0,e=1/0;n<o;n++){if(n===h)continue;const r=Cu(g,y,t[2*n],t[2*n+1]);r<e&&r>0&&(d=n,e=r)}let v=t[2*d],_=t[2*d+1],b=1/0;for(let n=0;n<o;n++){if(n===h||n===d)continue;const e=zu(g,y,v,_,t[2*n],t[2*n+1]);e<b&&(p=n,b=e)}let m=t[2*p],x=t[2*p+1];if(b===1/0){for(let n=0;n<o;n++)this._dists[n]=t[2*n]-t[0]||t[2*n+1]-t[1];$u(this._ids,this._dists,0,o-1);const n=new Uint32Array(o);let e=0;for(let t=0,r=-1/0;t<o;t++){const i=this._ids[t],o=this._dists[i];o>r&&(n[e++]=i,r=o)}return this.hull=n.subarray(0,e),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(Su(g,y,v,_,m,x)<0){const t=d,n=v,e=_;d=p,v=m,_=x,p=t,m=n,x=e}const w=function(t,n,e,r,i,o){const a=e-t,u=r-n,c=i-t,f=o-n,s=a*a+u*u,l=c*c+f*f,h=.5/(a*f-u*c);return{x:t+(f*s-u*l)*h,y:n+(a*l-c*s)*h}}(g,y,v,_,m,x);this._cx=w.x,this._cy=w.y;for(let n=0;n<o;n++)this._dists[n]=Cu(t[2*n],t[2*n+1],w.x,w.y);$u(this._ids,this._dists,0,o-1),this._hullStart=h;let M=3;e[h]=n[p]=d,e[d]=n[h]=p,e[p]=n[d]=h,r[h]=0,r[d]=1,r[p]=2,i.fill(-1),i[this._hashKey(g,y)]=h,i[this._hashKey(v,_)]=d,i[this._hashKey(m,x)]=p,this.trianglesLen=0,this._addTriangle(h,d,p,-1,-1,-1);for(let o,a,u=0;u<this._ids.length;u++){const c=this._ids[u],f=t[2*c],s=t[2*c+1];if(u>0&&Math.abs(f-o)<=Eu&&Math.abs(s-a)<=Eu)continue;if(o=f,a=s,c===h||c===d||c===p)continue;let l=0;for(let t=0,n=this._hashKey(f,s);t<this._hashSize&&(l=i[(n+t)%this._hashSize],-1===l||l===e[l]);t++);l=n[l];let g,y=l;for(;g=e[y],Su(f,s,t[2*y],t[2*y+1],t[2*g],t[2*g+1])>=0;)if(y=g,y===l){y=-1;break}if(-1===y)continue;let v=this._addTriangle(y,c,e[y],-1,-1,r[y]);r[c]=this._legalize(v+2),r[y]=v,M++;let _=e[y];for(;g=e[_],Su(f,s,t[2*_],t[2*_+1],t[2*g],t[2*g+1])<0;)v=this._addTriangle(_,c,g,r[c],-1,r[_]),r[c]=this._legalize(v+2),e[_]=_,M--,_=g;if(y===l)for(;g=n[y],Su(f,s,t[2*g],t[2*g+1],t[2*y],t[2*y+1])<0;)v=this._addTriangle(g,c,y,-1,r[y],r[g]),this._legalize(v+2),r[g]=v,e[y]=y,M--,y=g;this._hullStart=n[c]=y,e[y]=n[_]=c,e[c]=_,i[this._hashKey(f,s)]=c,i[this._hashKey(t[2*y],t[2*y+1])]=y}this.hull=new Uint32Array(M);for(let t=0,n=this._hullStart;t<M;t++)this.hull[t]=n,n=e[n];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,n){return Math.floor(function(t,n){const e=t/(Math.abs(t)+Math.abs(n));return(n>0?3-e:1+e)/4}(t-this._cx,n-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:n,_halfedges:e,coords:r}=this;let i=0,o=0;for(;;){const a=e[t],u=t-t%3;if(o=u+(t+2)%3,-1===a){if(0===i)break;t=Nu[--i];continue}const c=a-a%3,f=u+(t+1)%3,s=c+(a+2)%3,l=n[o],h=n[t],d=n[f],p=n[s];if(Pu(r[2*l],r[2*l+1],r[2*h],r[2*h+1],r[2*d],r[2*d+1],r[2*p],r[2*p+1])){n[t]=p,n[a]=l;const r=e[s];if(-1===r){let n=this._hullStart;do{if(this._hullTri[n]===s){this._hullTri[n]=t;break}n=this._hullPrev[n]}while(n!==this._hullStart)}this._link(t,r),this._link(a,e[o]),this._link(o,s);const u=c+(a+1)%3;i<Nu.length&&(Nu[i++]=u)}else{if(0===i)break;t=Nu[--i]}}return o}_link(t,n){this._halfedges[t]=n,-1!==n&&(this._halfedges[n]=t)}_addTriangle(t,n,e,r,i,o){const a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=n,this._triangles[a+2]=e,this._link(a,r),this._link(a+1,i),this._link(a+2,o),this.trianglesLen+=3,a}}function Cu(t,n,e,r){const i=t-e,o=n-r;return i*i+o*o}function Pu(t,n,e,r,i,o,a,u){const c=t-a,f=n-u,s=e-a,l=r-u,h=i-a,d=o-u,p=s*s+l*l,g=h*h+d*d;return c*(l*g-p*d)-f*(s*g-p*h)+(c*c+f*f)*(s*d-l*h)<0}function zu(t,n,e,r,i,o){const a=e-t,u=r-n,c=i-t,f=o-n,s=a*a+u*u,l=c*c+f*f,h=.5/(a*f-u*c),d=(f*s-u*l)*h,p=(a*l-c*s)*h;return d*d+p*p}function $u(t,n,e,r){if(r-e<=20)for(let i=e+1;i<=r;i++){const r=t[i],o=n[r];let a=i-1;for(;a>=e&&n[t[a]]>o;)t[a+1]=t[a--];t[a+1]=r}else{let i=e+1,o=r;Du(t,e+r>>1,i),n[t[e]]>n[t[r]]&&Du(t,e,r),n[t[i]]>n[t[r]]&&Du(t,i,r),n[t[e]]>n[t[i]]&&Du(t,e,i);const a=t[i],u=n[a];for(;;){do{i++}while(n[t[i]]<u);do{o--}while(n[t[o]]>u);if(o<i)break;Du(t,i,o)}t[e+1]=t[o],t[o]=a,r-i+1>=o-e?($u(t,n,i,r),$u(t,n,e,o-1)):($u(t,n,e,o-1),$u(t,n,i,r))}}function Du(t,n,e){const r=t[n];t[n]=t[e],t[e]=r}function Ru(t){return t[0]}function Ou(t){return t[1]}const qu=1e-6;class Fu{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,n){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,n){this._+=`L${this._x1=+t},${this._y1=+n}`}arc(t,n,e){const r=(t=+t)+(e=+e),i=n=+n;if(e<0)throw new Error("negative radius");null===this._x1?this._+=`M${r},${i}`:(Math.abs(this._x1-r)>qu||Math.abs(this._y1-i)>qu)&&(this._+="L"+r+","+i),e&&(this._+=`A${e},${e},0,1,1,${t-e},${n}A${e},${e},0,1,1,${this._x1=r},${this._y1=i}`)}rect(t,n,e,r){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${+e}v${+r}h${-e}Z`}value(){return this._||null}}class Uu{constructor(){this._=[]}moveTo(t,n){this._.push([t,n])}closePath(){this._.push(this._[0].slice())}lineTo(t,n){this._.push([t,n])}value(){return this._.length?this._:null}}class Iu{constructor(t,[n,e,r,i]=[0,0,960,500]){if(!((r=+r)>=(n=+n)&&(i=+i)>=(e=+e)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=r,this.xmin=n,this.ymax=i,this.ymin=e,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:n,triangles:e},vectors:r}=this;let i,o;const a=this.circumcenters=this._circumcenters.subarray(0,e.length/3*2);for(let r,u,c=0,f=0,s=e.length;c<s;c+=3,f+=2){const s=2*e[c],l=2*e[c+1],h=2*e[c+2],d=t[s],p=t[s+1],g=t[l],y=t[l+1],v=t[h],_=t[h+1],b=g-d,m=y-p,x=v-d,w=_-p,M=2*(b*w-m*x);if(Math.abs(M)<1e-9){if(void 0===i){i=o=0;for(const e of n)i+=t[2*e],o+=t[2*e+1];i/=n.length,o/=n.length}const e=1e9*Math.sign((i-d)*w-(o-p)*x);r=(d+v)/2-e*w,u=(p+_)/2+e*x}else{const t=1/M,n=b*b+m*m,e=x*x+w*w;r=d+(w*n-m*e)*t,u=p+(b*e-x*n)*t}a[f]=r,a[f+1]=u}let u,c,f,s=n[n.length-1],l=4*s,h=t[2*s],d=t[2*s+1];r.fill(0);for(let e=0;e<n.length;++e)s=n[e],u=l,c=h,f=d,l=4*s,h=t[2*s],d=t[2*s+1],r[u+2]=r[l]=f-d,r[u+3]=r[l+1]=h-c}render(t){const n=null==t?t=new Fu:void 0,{delaunay:{halfedges:e,inedges:r,hull:i},circumcenters:o,vectors:a}=this;if(i.length<=1)return null;for(let n=0,r=e.length;n<r;++n){const r=e[n];if(r<n)continue;const i=2*Math.floor(n/3),a=2*Math.floor(r/3),u=o[i],c=o[i+1],f=o[a],s=o[a+1];this._renderSegment(u,c,f,s,t)}let u,c=i[i.length-1];for(let n=0;n<i.length;++n){u=c,c=i[n];const e=2*Math.floor(r[c]/3),f=o[e],s=o[e+1],l=4*u,h=this._project(f,s,a[l+2],a[l+3]);h&&this._renderSegment(f,s,h[0],h[1],t)}return n&&n.value()}renderBounds(t){const n=null==t?t=new Fu:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),n&&n.value()}renderCell(t,n){const e=null==n?n=new Fu:void 0,r=this._clip(t);if(null===r||!r.length)return;n.moveTo(r[0],r[1]);let i=r.length;for(;r[0]===r[i-2]&&r[1]===r[i-1]&&i>1;)i-=2;for(let t=2;t<i;t+=2)r[t]===r[t-2]&&r[t+1]===r[t-1]||n.lineTo(r[t],r[t+1]);return n.closePath(),e&&e.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let n=0,e=t.length/2;n<e;++n){const t=this.cellPolygon(n);t&&(t.index=n,yield t)}}cellPolygon(t){const n=new Uu;return this.renderCell(t,n),n.value()}_renderSegment(t,n,e,r,i){let o;const a=this._regioncode(t,n),u=this._regioncode(e,r);0===a&&0===u?(i.moveTo(t,n),i.lineTo(e,r)):(o=this._clipSegment(t,n,e,r,a,u))&&(i.moveTo(o[0],o[1]),i.lineTo(o[2],o[3]))}contains(t,n,e){return(n=+n)==n&&(e=+e)==e&&this.delaunay._step(t,n,e)===t}*neighbors(t){const n=this._clip(t);if(n)for(const e of this.delaunay.neighbors(t)){const t=this._clip(e);if(t)t:for(let r=0,i=n.length;r<i;r+=2)for(let o=0,a=t.length;o<a;o+=2)if(n[r]===t[o]&&n[r+1]===t[o+1]&&n[(r+2)%i]===t[(o+a-2)%a]&&n[(r+3)%i]===t[(o+a-1)%a]){yield e;break t}}}_cell(t){const{circumcenters:n,delaunay:{inedges:e,halfedges:r,triangles:i}}=this,o=e[t];if(-1===o)return null;const a=[];let u=o;do{const e=Math.floor(u/3);if(a.push(n[2*e],n[2*e+1]),u=u%3==2?u-2:u+1,i[u]!==t)break;u=r[u]}while(u!==o&&-1!==u);return a}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const n=this._cell(t);if(null===n)return null;const{vectors:e}=this,r=4*t;return this._simplify(e[r]||e[r+1]?this._clipInfinite(t,n,e[r],e[r+1],e[r+2],e[r+3]):this._clipFinite(t,n))}_clipFinite(t,n){const e=n.length;let r,i,o,a,u=null,c=n[e-2],f=n[e-1],s=this._regioncode(c,f),l=0;for(let h=0;h<e;h+=2)if(r=c,i=f,c=n[h],f=n[h+1],o=s,s=this._regioncode(c,f),0===o&&0===s)a=l,l=0,u?u.push(c,f):u=[c,f];else{let n,e,h,d,p;if(0===o){if(null===(n=this._clipSegment(r,i,c,f,o,s)))continue;[e,h,d,p]=n}else{if(null===(n=this._clipSegment(c,f,r,i,s,o)))continue;[d,p,e,h]=n,a=l,l=this._edgecode(e,h),a&&l&&this._edge(t,a,l,u,u.length),u?u.push(e,h):u=[e,h]}a=l,l=this._edgecode(d,p),a&&l&&this._edge(t,a,l,u,u.length),u?u.push(d,p):u=[d,p]}if(u)a=l,l=this._edgecode(u[0],u[1]),a&&l&&this._edge(t,a,l,u,u.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return u}_clipSegment(t,n,e,r,i,o){const a=i<o;for(a&&([t,n,e,r,i,o]=[e,r,t,n,o,i]);;){if(0===i&&0===o)return a?[e,r,t,n]:[t,n,e,r];if(i&o)return null;let u,c,f=i||o;8&f?(u=t+(e-t)*(this.ymax-n)/(r-n),c=this.ymax):4&f?(u=t+(e-t)*(this.ymin-n)/(r-n),c=this.ymin):2&f?(c=n+(r-n)*(this.xmax-t)/(e-t),u=this.xmax):(c=n+(r-n)*(this.xmin-t)/(e-t),u=this.xmin),i?(t=u,n=c,i=this._regioncode(t,n)):(e=u,r=c,o=this._regioncode(e,r))}}_clipInfinite(t,n,e,r,i,o){let a,u=Array.from(n);if((a=this._project(u[0],u[1],e,r))&&u.unshift(a[0],a[1]),(a=this._project(u[u.length-2],u[u.length-1],i,o))&&u.push(a[0],a[1]),u=this._clipFinite(t,u))for(let n,e=0,r=u.length,i=this._edgecode(u[r-2],u[r-1]);e<r;e+=2)n=i,i=this._edgecode(u[e],u[e+1]),n&&i&&(e=this._edge(t,n,i,u,e),r=u.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(u=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return u}_edge(t,n,e,r,i){for(;n!==e;){let e,o;switch(n){case 5:n=4;continue;case 4:n=6,e=this.xmax,o=this.ymin;break;case 6:n=2;continue;case 2:n=10,e=this.xmax,o=this.ymax;break;case 10:n=8;continue;case 8:n=9,e=this.xmin,o=this.ymax;break;case 9:n=1;continue;case 1:n=5,e=this.xmin,o=this.ymin}r[i]===e&&r[i+1]===o||!this.contains(t,e,o)||(r.splice(i,0,e,o),i+=2)}return i}_project(t,n,e,r){let i,o,a,u=1/0;if(r<0){if(n<=this.ymin)return null;(i=(this.ymin-n)/r)<u&&(a=this.ymin,o=t+(u=i)*e)}else if(r>0){if(n>=this.ymax)return null;(i=(this.ymax-n)/r)<u&&(a=this.ymax,o=t+(u=i)*e)}if(e>0){if(t>=this.xmax)return null;(i=(this.xmax-t)/e)<u&&(o=this.xmax,a=n+(u=i)*r)}else if(e<0){if(t<=this.xmin)return null;(i=(this.xmin-t)/e)<u&&(o=this.xmin,a=n+(u=i)*r)}return[o,a]}_edgecode(t,n){return(t===this.xmin?1:t===this.xmax?2:0)|(n===this.ymin?4:n===this.ymax?8:0)}_regioncode(t,n){return(t<this.xmin?1:t>this.xmax?2:0)|(n<this.ymin?4:n>this.ymax?8:0)}_simplify(t){if(t&&t.length>4){for(let n=0;n<t.length;n+=2){const e=(n+2)%t.length,r=(n+4)%t.length;(t[n]===t[e]&&t[e]===t[r]||t[n+1]===t[e+1]&&t[e+1]===t[r+1])&&(t.splice(e,2),n-=2)}t.length||(t=null)}return t}}const Bu=2*Math.PI,Yu=Math.pow;function ju(t){return t[0]}function Lu(t){return t[1]}function Hu(t,n,e){return[t+Math.sin(t+n)*e,n+Math.cos(t-n)*e]}class Xu{static from(t,n=ju,e=Lu,r){return new Xu("length"in t?function(t,n,e,r){const i=t.length,o=new Float64Array(2*i);for(let a=0;a<i;++a){const i=t[a];o[2*a]=n.call(r,i,a,t),o[2*a+1]=e.call(r,i,a,t)}return o}(t,n,e,r):Float64Array.from(function*(t,n,e,r){let i=0;for(const o of t)yield n.call(r,o,i,t),yield e.call(r,o,i,t),++i}(t,n,e,r)))}constructor(t){this._delaunator=new ku(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,n=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:n,coords:e}=t;for(let t=0;t<n.length;t+=3){const r=2*n[t],i=2*n[t+1],o=2*n[t+2];if((e[o]-e[r])*(e[i+1]-e[r+1])-(e[i]-e[r])*(e[o+1]-e[r+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:n.length/2},((t,n)=>n)).sort(((t,e)=>n[2*t]-n[2*e]||n[2*t+1]-n[2*e+1]));const t=this.collinear[0],e=this.collinear[this.collinear.length-1],r=[n[2*t],n[2*t+1],n[2*e],n[2*e+1]],i=1e-8*Math.hypot(r[3]-r[1],r[2]-r[0]);for(let t=0,e=n.length/2;t<e;++t){const e=Hu(n[2*t],n[2*t+1],i);n[2*t]=e[0],n[2*t+1]=e[1]}this._delaunator=new ku(n)}else delete this.collinear;const e=this.halfedges=this._delaunator.halfedges,r=this.hull=this._delaunator.hull,i=this.triangles=this._delaunator.triangles,o=this.inedges.fill(-1),a=this._hullIndex.fill(-1);for(let t=0,n=e.length;t<n;++t){const n=i[t%3==2?t-2:t+1];-1!==e[t]&&-1!==o[n]||(o[n]=t)}for(let t=0,n=r.length;t<n;++t)a[r[t]]=t;r.length<=2&&r.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=r[0],o[r[0]]=1,2===r.length&&(o[r[1]]=0,this.triangles[1]=r[1],this.triangles[2]=r[1]))}voronoi(t){return new Iu(this,t)}*neighbors(t){const{inedges:n,hull:e,_hullIndex:r,halfedges:i,triangles:o,collinear:a}=this;if(a){const n=a.indexOf(t);return n>0&&(yield a[n-1]),void(n<a.length-1&&(yield a[n+1]))}const u=n[t];if(-1===u)return;let c=u,f=-1;do{if(yield f=o[c],c=c%3==2?c-2:c+1,o[c]!==t)return;if(c=i[c],-1===c){const n=e[(r[t]+1)%e.length];return void(n!==f&&(yield n))}}while(c!==u)}find(t,n,e=0){if((t=+t)!=t||(n=+n)!=n)return-1;const r=e;let i;for(;(i=this._step(e,t,n))>=0&&i!==e&&i!==r;)e=i;return i}_step(t,n,e){const{inedges:r,hull:i,_hullIndex:o,halfedges:a,triangles:u,points:c}=this;if(-1===r[t]||!c.length)return(t+1)%(c.length>>1);let f=t,s=Yu(n-c[2*t],2)+Yu(e-c[2*t+1],2);const l=r[t];let h=l;do{let r=u[h];const l=Yu(n-c[2*r],2)+Yu(e-c[2*r+1],2);if(l<s&&(s=l,f=r),h=h%3==2?h-2:h+1,u[h]!==t)break;if(h=a[h],-1===h){if(h=i[(o[t]+1)%i.length],h!==r&&Yu(n-c[2*h],2)+Yu(e-c[2*h+1],2)<s)return h;break}}while(h!==l);return f}render(t){const n=null==t?t=new Fu:void 0,{points:e,halfedges:r,triangles:i}=this;for(let n=0,o=r.length;n<o;++n){const o=r[n];if(o<n)continue;const a=2*i[n],u=2*i[o];t.moveTo(e[a],e[a+1]),t.lineTo(e[u],e[u+1])}return this.renderHull(t),n&&n.value()}renderPoints(t,n){void 0!==n||t&&"function"==typeof t.moveTo||(n=t,t=null),n=null==n?2:+n;const e=null==t?t=new Fu:void 0,{points:r}=this;for(let e=0,i=r.length;e<i;e+=2){const i=r[e],o=r[e+1];t.moveTo(i+n,o),t.arc(i,o,n,0,Bu)}return e&&e.value()}renderHull(t){const n=null==t?t=new Fu:void 0,{hull:e,points:r}=this,i=2*e[0],o=e.length;t.moveTo(r[i],r[i+1]);for(let n=1;n<o;++n){const i=2*e[n];t.lineTo(r[i],r[i+1])}return t.closePath(),n&&n.value()}hullPolygon(){const t=new Uu;return this.renderHull(t),t.value()}renderTriangle(t,n){const e=null==n?n=new Fu:void 0,{points:r,triangles:i}=this,o=2*i[t*=3],a=2*i[t+1],u=2*i[t+2];return n.moveTo(r[o],r[o+1]),n.lineTo(r[a],r[a+1]),n.lineTo(r[u],r[u+1]),n.closePath(),e&&e.value()}*trianglePolygons(){const{triangles:t}=this;for(let n=0,e=t.length/3;n<e;++n)yield this.trianglePolygon(n)}trianglePolygon(t){const n=new Uu;return this.renderTriangle(t,n),n.value()}}const Gu=t=>()=>t;function Vu(t,{sourceEvent:n,subject:e,target:r,identifier:i,active:o,x:a,y:u,dx:c,dy:f,dispatch:s}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},subject:{value:e,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:a,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:c,enumerable:!0,configurable:!0},dy:{value:f,enumerable:!0,configurable:!0},_:{value:s}})}function Wu(t){return!t.ctrlKey&&!t.button}function Zu(){return this.parentNode}function Ku(t,n){return null==n?{x:t.x,y:t.y}:n}function Qu(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ju(){var t,n,e,r,i=Wu,o=Zu,a=Ku,u=Qu,c={},f=En("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(u).on("touchstart.drag",y).on("touchmove.drag",v,Ye).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(a,u){if(!r&&i.call(this,a,u)){var c=b(this,o.call(this,a,u),a,u,"mouse");c&&(Be(a.view).on("mousemove.drag",p,je).on("mouseup.drag",g,je),Xe(a.view),Le(a),e=!1,t=a.clientX,n=a.clientY,c("start",a))}}function p(r){if(He(r),!e){var i=r.clientX-t,o=r.clientY-n;e=i*i+o*o>l}c.mouse("drag",r)}function g(t){Be(t.view).on("mousemove.drag mouseup.drag",null),Ge(t.view,e),He(t),c.mouse("end",t)}function y(t,n){if(i.call(this,t,n)){var e,r,a=t.changedTouches,u=o.call(this,t,n),c=a.length;for(e=0;e<c;++e)(r=b(this,u,t,n,a[e].identifier,a[e]))&&(Le(t),r("start",t,a[e]))}}function v(t){var n,e,r=t.changedTouches,i=r.length;for(n=0;n<i;++n)(e=c[r[n].identifier])&&(He(t),e("drag",t,r[n]))}function _(t){var n,e,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),n=0;n<o;++n)(e=c[i[n].identifier])&&(Le(t),e("end",t,i[n]))}function b(t,n,e,r,i,o){var u,l,d,p=f.copy(),g=Jr(o||e,n);if(null!=(d=a.call(t,new Vu("beforestart",{sourceEvent:e,target:h,identifier:i,active:s,x:g[0],y:g[1],dx:0,dy:0,dispatch:p}),r)))return u=d.x-g[0]||0,l=d.y-g[1]||0,function e(o,a,f){var y,v=g;switch(o){case"start":c[i]=e,y=s++;break;case"end":delete c[i],--s;case"drag":g=Jr(f||a,n),y=s}p.call(o,t,new Vu(o,{sourceEvent:a,subject:d,target:h,identifier:i,active:y,x:g[0]+u,y:g[1]+l,dx:g[0]-v[0],dy:g[1]-v[1],dispatch:p}),r)}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Gu(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:Gu(t),h):o},h.subject=function(t){return arguments.length?(a="function"==typeof t?t:Gu(t),h):a},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Gu(!!t),h):u},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h}Vu.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var tc={},nc={},ec=34,rc=10,ic=13;function oc(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function ac(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function uc(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function cc(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,f=!1;function s(){if(c)return nc;if(f)return f=!1,tc;var n,r,i=a;if(t.charCodeAt(i)===ec){for(;a++<o&&t.charCodeAt(a)!==ec||t.charCodeAt(++a)===ec;);return(n=a)>=o?c=!0:(r=t.charCodeAt(a++))===rc?f=!0:r===ic&&(f=!0,t.charCodeAt(a)===rc&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(n=a++))===rc)f=!0;else if(r===ic)f=!0,t.charCodeAt(a)===rc&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===rc&&--o,t.charCodeAt(o-1)===ic&&--o;(r=s())!==nc;){for(var l=[];r!==tc&&r!==nc;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+uc(-n,6):n>9999?"+"+uc(n,6):uc(n,4))+"-"+uc(t.getUTCMonth()+1,2)+"-"+uc(t.getUTCDate(),2)+(o?"T"+uc(e,2)+":"+uc(r,2)+":"+uc(i,2)+"."+uc(o,3)+"Z":i?"T"+uc(e,2)+":"+uc(r,2)+":"+uc(i,2)+"Z":r||e?"T"+uc(e,2)+":"+uc(r,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=oc(t);return function(r,i){return n(e(r),i,t)}}(t,n):oc(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=ac(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=ac(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var fc=cc(","),sc=fc.parse,lc=fc.parseRows,hc=fc.format,dc=fc.formatBody,pc=fc.formatRows,gc=fc.formatRow,yc=fc.formatValue,vc=cc("\t"),_c=vc.parse,bc=vc.parseRows,mc=vc.format,xc=vc.formatBody,wc=vc.formatRows,Mc=vc.formatRow,Tc=vc.formatValue;function Ac(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Sc&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}const Sc=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),Ec=t=>+t;function Nc(t){return t*t}function kc(t){return t*(2-t)}function Cc(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Pc=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),zc=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),$c=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Dc=Math.PI,Rc=Dc/2;function Oc(t){return 1==+t?1:1-Math.cos(t*Rc)}function qc(t){return Math.sin(t*Rc)}function Fc(t){return(1-Math.cos(Dc*t))/2}function Uc(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Ic(t){return Uc(1-+t)}function Bc(t){return 1-Uc(t)}function Yc(t){return((t*=2)<=1?Uc(1-t):2-Uc(t-1))/2}function jc(t){return 1-Math.sqrt(1-t*t)}function Lc(t){return Math.sqrt(1- --t*t)}function Hc(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Xc=4/11,Gc=6/11,Vc=8/11,Wc=3/4,Zc=9/11,Kc=10/11,Qc=15/16,Jc=21/22,tf=63/64,nf=1/Xc/Xc;function ef(t){return 1-rf(1-t)}function rf(t){return(t=+t)<Xc?nf*t*t:t<Vc?nf*(t-=Gc)*t+Wc:t<Kc?nf*(t-=Zc)*t+Qc:nf*(t-=Jc)*t+tf}function of(t){return((t*=2)<=1?1-rf(1-t):rf(t-1)+1)/2}var af=1.70158,uf=function t(n){function e(t){return(t=+t)*t*(n*(t-1)+t)}return n=+n,e.overshoot=t,e}(af),cf=function t(n){function e(t){return--t*t*((t+1)*n+t)+1}return n=+n,e.overshoot=t,e}(af),ff=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(af),sf=2*Math.PI,lf=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=sf);function i(t){return n*Uc(- --t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*sf)},i.period=function(e){return t(n,e)},i}(1,.3),hf=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=sf);function i(t){return 1-n*Uc(t=+t)*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*sf)},i.period=function(e){return t(n,e)},i}(1,.3),df=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=sf);function i(t){return((t=2*t-1)<0?n*Uc(-t)*Math.sin((r-t)/e):2-n*Uc(t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*sf)},i.period=function(e){return t(n,e)},i}(1,.3);function pf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function gf(t,n){return fetch(t,n).then(pf)}function yf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function vf(t,n){return fetch(t,n).then(yf)}function _f(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function bf(t,n){return fetch(t,n).then(_f)}function mf(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),bf(n,e).then((function(n){return t(n,r)}))}}function xf(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=cc(t);return bf(n,e).then((function(t){return i.parse(t,r)}))}var wf=mf(sc),Mf=mf(_c);function Tf(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))}function Af(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Sf(t,n){return fetch(t,n).then(Af)}function Ef(t){return(n,e)=>bf(n,e).then((n=>(new DOMParser).parseFromString(n,t)))}const Nf=Ef("application/xml");var kf=Ef("text/html"),Cf=Ef("image/svg+xml");function Pf(t,n){var e,r=1;function i(){var i,o,a=e.length,u=0,c=0;for(i=0;i<a;++i)u+=(o=e[i]).x,c+=o.y;for(u=(u/a-t)*r,c=(c/a-n)*r,i=0;i<a;++i)(o=e[i]).x-=u,o.y-=c}return null==t&&(t=0),null==n&&(n=0),i.initialize=function(t){e=t},i.x=function(n){return arguments.length?(t=+n,i):t},i.y=function(t){return arguments.length?(n=+t,i):n},i.strength=function(t){return arguments.length?(r=+t,i):r},i}function zf(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,c,f,s,l,h,d=t._root,p={data:r},g=t._x0,y=t._y0,v=t._x1,_=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+_)/2))?y=a:_=a,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+_)/2))?y=a:_=a}while((l=s<<1|f)==(h=(c>=a)<<1|u>=o));return i[h]=d,i[l]=p,t}function $f(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Df(t){return t[0]}function Rf(t){return t[1]}function Of(t,n,e){var r=new qf(null==n?Df:n,null==e?Rf:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function qf(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ff(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Uf=Of.prototype=qf.prototype;function If(t){return function(){return t}}function Bf(t){return 1e-6*(t()-.5)}function Yf(t){return t.x+t.vx}function jf(t){return t.y+t.vy}function Lf(t){var n,e,r,i=1,o=1;function a(){for(var t,a,c,f,s,l,h,d=n.length,p=0;p<o;++p)for(a=Of(n,Yf,jf).visitAfter(u),t=0;t<d;++t)c=n[t],l=e[c.index],h=l*l,f=c.x+c.vx,s=c.y+c.vy,a.visit(g);function g(t,n,e,o,a){var u=t.data,d=t.r,p=l+d;if(!u)return n>f+p||o<f-p||e>s+p||a<s-p;if(u.index>c.index){var g=f-u.x-u.vx,y=s-u.y-u.vy,v=g*g+y*y;v<p*p&&(0===g&&(v+=(g=Bf(r))*g),0===y&&(v+=(y=Bf(r))*y),v=(p-(v=Math.sqrt(v)))/v*i,c.vx+=(g*=v)*(p=(d*=d)/(h+d)),c.vy+=(y*=v)*p,u.vx-=g*(p=1-p),u.vy-=y*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function c(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=If(null==t?1:+t)),a.initialize=function(t,e){n=t,r=e,c()},a.iterations=function(t){return arguments.length?(o=+t,a):o},a.strength=function(t){return arguments.length?(i=+t,a):i},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:If(+n),c(),a):t},a}function Hf(t){return t.index}function Xf(t,n){var e=t.get(n);if(!e)throw new Error("node not found: "+n);return e}function Gf(t){var n,e,r,i,o,a,u=Hf,c=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},f=If(30),s=1;function l(r){for(var i=0,u=t.length;i<s;++i)for(var c,f,l,h,d,p,g,y=0;y<u;++y)f=(c=t[y]).source,h=(l=c.target).x+l.vx-f.x-f.vx||Bf(a),d=l.y+l.vy-f.y-f.vy||Bf(a),h*=p=((p=Math.sqrt(h*h+d*d))-e[y])/p*r*n[y],d*=p,l.vx-=h*(g=o[y]),l.vy-=d*g,f.vx+=h*(g=1-g),f.vy+=d*g}function h(){if(r){var a,c,f=r.length,s=t.length,l=new Map(r.map(((t,n)=>[u(t,n,r),t])));for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Xf(l,c.source)),"object"!=typeof c.target&&(c.target=Xf(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),d(),e=new Array(s),p()}}function d(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+c(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+f(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t,n){r=t,a=n,h()},l.links=function(n){return arguments.length?(t=n,h(),l):t},l.id=function(t){return arguments.length?(u=t,l):u},l.iterations=function(t){return arguments.length?(s=+t,l):s},l.strength=function(t){return arguments.length?(c="function"==typeof t?t:If(+t),d(),l):c},l.distance=function(t){return arguments.length?(f="function"==typeof t?t:If(+t),p(),l):f},l}Uf.copy=function(){var t,n,e=new qf(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Ff(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Ff(n));return e},Uf.add=function(t){const n=+this._x.call(null,t),e=+this._y.call(null,t);return zf(this.cover(n,e),n,e,t)},Uf.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)zf(this,a[e],u[e],t[e]);return this},Uf.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,c=i-e||1,f=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=f,f=a,c*=2,u){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Uf.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Uf.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Uf.find=function(t,n,e){var r,i,o,a,u,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new $f(g,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(o=c.y0)>d||(a=c.x1)<s||(u=c.y1)<l))if(g.length){var y=(i+a)/2,v=(o+u)/2;p.push(new $f(g[3],y,v,a,u),new $f(g[2],i,v,y,u),new $f(g[1],y,o,a,v),new $f(g[0],i,o,y,v)),(f=(n>=v)<<1|t>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var _=t-+this._x.call(null,g.data),b=n-+this._y.call(null,g.data),m=_*_+b*b;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=g.data}}return r},Uf.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,c,f,s,l,h,d=this._root,p=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(u=(p+y)/2))?p=u:y=u,(s=a>=(c=(g+v)/2))?g=c:v=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Uf.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Uf.root=function(){return this._root},Uf.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Uf.visit=function(t){var n,e,r,i,o,a,u=[],c=this._root;for(c&&u.push(new $f(c,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&c.length){var f=(r+o)/2,s=(i+a)/2;(e=c[3])&&u.push(new $f(e,f,s,o,a)),(e=c[2])&&u.push(new $f(e,r,s,f,a)),(e=c[1])&&u.push(new $f(e,f,i,o,s)),(e=c[0])&&u.push(new $f(e,r,i,f,s))}return this},Uf.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new $f(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,c=n.x1,f=n.y1,s=(a+c)/2,l=(u+f)/2;(o=i[0])&&e.push(new $f(o,a,u,s,l)),(o=i[1])&&e.push(new $f(o,s,u,c,l)),(o=i[2])&&e.push(new $f(o,a,l,s,f)),(o=i[3])&&e.push(new $f(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Uf.x=function(t){return arguments.length?(this._x=t,this):this._x},Uf.y=function(t){return arguments.length?(this._y=t,this):this._y};const Vf=1664525,Wf=1013904223,Zf=4294967296;function Kf(t){return t.x}function Qf(t){return t.y}var Jf=10,ts=Math.PI*(3-Math.sqrt(5));function ns(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=new Map,c=di(l),f=En("tick","end"),s=function(){let t=1;return()=>(t=(Vf*t+Wf)%Zf)/Zf}();function l(){h(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function h(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,u.forEach((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=a:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=a:(f.y=f.fy,f.vy=0);return n}function d(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=Jf*Math.sqrt(.5+e),o=e*ts;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t,s),n}return null==t&&(t=[]),d(),n={tick:h,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,d(),u.forEach(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(a=1-t,n):1-a},randomSource:function(t){return arguments.length?(s=t,u.forEach(p),n):s},force:function(t,e){return arguments.length>1?(null==e?u.delete(t):u.set(t,p(e)),n):u.get(t)},find:function(n,e,r){var i,o,a,u,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(a=(i=n-(u=t[f]).x)*i+(o=e-u.y)*o)<r&&(c=u,r=a);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}}function es(){var t,n,e,r,i,o=If(-30),a=1,u=1/0,c=.81;function f(e){var i,o=t.length,a=Of(t,Kf,Qf).visitAfter(l);for(r=e,i=0;i<o;++i)n=t[i],a.visit(h)}function s(){if(t){var n,e,r=t.length;for(i=new Array(r),n=0;n<r;++n)e=t[n],i[e.index]=+o(e,n,t)}}function l(t){var n,e,r,o,a,u=0,c=0;if(t.length){for(r=o=a=0;a<4;++a)(n=t[a])&&(e=Math.abs(n.value))&&(u+=n.value,c+=e,r+=e*n.x,o+=e*n.y);t.x=r/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=i[n.data.index]}while(n=n.next)}t.value=u}function h(t,o,f,s){if(!t.value)return!0;var l=t.x-n.x,h=t.y-n.y,d=s-o,p=l*l+h*h;if(d*d/c<p)return p<u&&(0===l&&(p+=(l=Bf(e))*l),0===h&&(p+=(h=Bf(e))*h),p<a&&(p=Math.sqrt(a*p)),n.vx+=l*t.value*r/p,n.vy+=h*t.value*r/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Bf(e))*l),0===h&&(p+=(h=Bf(e))*h),p<a&&(p=Math.sqrt(a*p)));do{t.data!==n&&(d=i[t.data.index]*r/p,n.vx+=l*d,n.vy+=h*d)}while(t=t.next)}}return f.initialize=function(n,r){t=n,e=r,s()},f.strength=function(t){return arguments.length?(o="function"==typeof t?t:If(+t),s(),f):o},f.distanceMin=function(t){return arguments.length?(a=t*t,f):Math.sqrt(a)},f.distanceMax=function(t){return arguments.length?(u=t*t,f):Math.sqrt(u)},f.theta=function(t){return arguments.length?(c=t*t,f):Math.sqrt(c)},f}function rs(t,n,e){var r,i,o,a=If(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var c=r[a],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[a]-l)*i[a]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+a(r[n],n,r)}}return"function"!=typeof t&&(t=If(+t)),null==n&&(n=0),null==e&&(e=0),u.initialize=function(t){r=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:If(+t),c(),u):a},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:If(+n),c(),u):t},u.x=function(t){return arguments.length?(n=+t,u):n},u.y=function(t){return arguments.length?(e=+t,u):e},u}function is(t){var n,e,r,i=If(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=If(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:If(+t),a(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:If(+n),a(),o):t},o}function os(t){var n,e,r,i=If(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=If(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:If(+t),a(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:If(+n),a(),o):t},o}function as(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function us(t){return(t=as(Math.abs(t)))?t[1]:NaN}var cs,fs=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ss(t){if(!(n=fs.exec(t)))throw new Error("invalid format: "+t);var n;return new ls({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ls(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function hs(t,n){var e=as(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ss.prototype=ls.prototype,ls.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const ds={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>hs(100*t,n),r:hs,s:function(t,n){var e=as(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(cs=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+as(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function ps(t){return t}var gs,ys,vs,_s=Array.prototype.map,bs=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ms(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?ps:(n=_s.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?ps:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(_s.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"−":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=ss(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,y=t.precision,v=t.trim,_=t.type;"n"===_?(g=!0,_="g"):ds[_]||(void 0===y&&(y=12),v=!0,_="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",m="$"===h?o:/[%p]/.test(_)?c:"",x=ds[_],w=/[defgprs%]/.test(_);function M(t){var i,o,c,h=b,M=m;if("c"===_)M=x(t)+M,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),y),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),T&&0==+t&&"+"!==l&&(T=!1),h=(T?"("===l?l:f:"-"===l||"("===l?"":l)+h,M=("s"===_?bs[8+cs/3]:"")+M+(T&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){M=(46===c?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var A=h.length+t.length+M.length,S=A<p?new Array(p-A+1).join(n):"";switch(g&&d&&(t=r(S+t,S.length?p-M.length:1/0),S=""),e){case"<":t=h+t+M+S;break;case"=":t=h+S+t+M;break;case"^":t=S.slice(0,A=S.length>>1)+h+t+M+S.slice(A);break;default:t=S+h+t+M}return u(t)}return y=void 0===y?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=ss(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(us(n)/3))),i=Math.pow(10,-r),o=bs[8+r/3];return function(t){return e(i*t)+o}}}}function xs(t){return gs=ms(t),ys=gs.format,vs=gs.formatPrefix,gs}function ws(t){return Math.max(0,-us(Math.abs(t)))}function Ms(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(us(n)/3)))-us(Math.abs(t)))}function Ts(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,us(n)-us(t))+1}xs({thousands:",",grouping:[3],currency:["$",""]});var As=1e-6,Ss=1e-12,Es=Math.PI,Ns=Es/2,ks=Es/4,Cs=2*Es,Ps=180/Es,zs=Es/180,$s=Math.abs,Ds=Math.atan,Rs=Math.atan2,Os=Math.cos,qs=Math.ceil,Fs=Math.exp,Us=(Math.floor,Math.hypot),Is=Math.log,Bs=Math.pow,Ys=Math.sin,js=Math.sign||function(t){return t>0?1:t<0?-1:0},Ls=Math.sqrt,Hs=Math.tan;function Xs(t){return t>1?0:t<-1?Es:Math.acos(t)}function Gs(t){return t>1?Ns:t<-1?-Ns:Math.asin(t)}function Vs(t){return(t=Ys(t/2))*t}function Ws(){}function Zs(t,n){t&&Qs.hasOwnProperty(t.type)&&Qs[t.type](t,n)}var Ks={Feature:function(t,n){Zs(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Zs(e[r].geometry,n)}},Qs={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Js(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Js(e[r],n,0)},Polygon:function(t,n){tl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)tl(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Zs(e[r],n)}};function Js(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function tl(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Js(t[e],n,1);n.polygonEnd()}function nl(t,n){t&&Ks.hasOwnProperty(t.type)?Ks[t.type](t,n):Zs(t,n)}var el,rl,il,ol,al,ul,cl,fl,sl,ll,hl,dl,pl,gl,yl,vl,_l=new k,bl=new k,ml={point:Ws,lineStart:Ws,lineEnd:Ws,polygonStart:function(){_l=new k,ml.lineStart=xl,ml.lineEnd=wl},polygonEnd:function(){var t=+_l;bl.add(t<0?Cs+t:t),this.lineStart=this.lineEnd=this.point=Ws},sphere:function(){bl.add(Cs)}};function xl(){ml.point=Ml}function wl(){Tl(el,rl)}function Ml(t,n){ml.point=Tl,el=t,rl=n,il=t*=zs,ol=Os(n=(n*=zs)/2+ks),al=Ys(n)}function Tl(t,n){var e=(t*=zs)-il,r=e>=0?1:-1,i=r*e,o=Os(n=(n*=zs)/2+ks),a=Ys(n),u=al*a,c=ol*o+u*Os(i),f=u*r*Ys(i);_l.add(Rs(f,c)),il=t,ol=o,al=a}function Al(t){return bl=new k,nl(t,ml),2*bl}function Sl(t){return[Rs(t[1],t[0]),Gs(t[2])]}function El(t){var n=t[0],e=t[1],r=Os(e);return[r*Os(n),r*Ys(n),Ys(e)]}function Nl(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function kl(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Cl(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Pl(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function zl(t){var n=Ls(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var $l,Dl,Rl,Ol,ql,Fl,Ul,Il,Bl,Yl,jl,Ll,Hl,Xl,Gl,Vl,Wl={point:Zl,lineStart:Ql,lineEnd:Jl,polygonStart:function(){Wl.point=th,Wl.lineStart=nh,Wl.lineEnd=eh,gl=new k,ml.polygonStart()},polygonEnd:function(){ml.polygonEnd(),Wl.point=Zl,Wl.lineStart=Ql,Wl.lineEnd=Jl,_l<0?(ul=-(fl=180),cl=-(sl=90)):gl>As?sl=90:gl<-As&&(cl=-90),vl[0]=ul,vl[1]=fl},sphere:function(){ul=-(fl=180),cl=-(sl=90)}};function Zl(t,n){yl.push(vl=[ul=t,fl=t]),n<cl&&(cl=n),n>sl&&(sl=n)}function Kl(t,n){var e=El([t*zs,n*zs]);if(pl){var r=kl(pl,e),i=kl([r[1],-r[0],0],r);zl(i),i=Sl(i);var o,a=t-ll,u=a>0?1:-1,c=i[0]*Ps*u,f=$s(a)>180;f^(u*ll<c&&c<u*t)?(o=i[1]*Ps)>sl&&(sl=o):f^(u*ll<(c=(c+360)%360-180)&&c<u*t)?(o=-i[1]*Ps)<cl&&(cl=o):(n<cl&&(cl=n),n>sl&&(sl=n)),f?t<ll?rh(ul,t)>rh(ul,fl)&&(fl=t):rh(t,fl)>rh(ul,fl)&&(ul=t):fl>=ul?(t<ul&&(ul=t),t>fl&&(fl=t)):t>ll?rh(ul,t)>rh(ul,fl)&&(fl=t):rh(t,fl)>rh(ul,fl)&&(ul=t)}else yl.push(vl=[ul=t,fl=t]);n<cl&&(cl=n),n>sl&&(sl=n),pl=e,ll=t}function Ql(){Wl.point=Kl}function Jl(){vl[0]=ul,vl[1]=fl,Wl.point=Zl,pl=null}function th(t,n){if(pl){var e=t-ll;gl.add($s(e)>180?e+(e>0?360:-360):e)}else hl=t,dl=n;ml.point(t,n),Kl(t,n)}function nh(){ml.lineStart()}function eh(){th(hl,dl),ml.lineEnd(),$s(gl)>As&&(ul=-(fl=180)),vl[0]=ul,vl[1]=fl,pl=null}function rh(t,n){return(n-=t)<0?n+360:n}function ih(t,n){return t[0]-n[0]}function oh(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function ah(t){var n,e,r,i,o,a,u;if(sl=fl=-(ul=cl=1/0),yl=[],nl(t,Wl),e=yl.length){for(yl.sort(ih),n=1,o=[r=yl[0]];n<e;++n)oh(r,(i=yl[n])[0])||oh(r,i[1])?(rh(r[0],i[1])>rh(r[0],r[1])&&(r[1]=i[1]),rh(i[0],r[1])>rh(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(u=rh(r[1],i[0]))>a&&(a=u,ul=i[0],fl=r[1])}return yl=vl=null,ul===1/0||cl===1/0?[[NaN,NaN],[NaN,NaN]]:[[ul,cl],[fl,sl]]}var uh={sphere:Ws,point:ch,lineStart:sh,lineEnd:dh,polygonStart:function(){uh.lineStart=ph,uh.lineEnd=gh},polygonEnd:function(){uh.lineStart=sh,uh.lineEnd=dh}};function ch(t,n){t*=zs;var e=Os(n*=zs);fh(e*Os(t),e*Ys(t),Ys(n))}function fh(t,n,e){++$l,Rl+=(t-Rl)/$l,Ol+=(n-Ol)/$l,ql+=(e-ql)/$l}function sh(){uh.point=lh}function lh(t,n){t*=zs;var e=Os(n*=zs);Xl=e*Os(t),Gl=e*Ys(t),Vl=Ys(n),uh.point=hh,fh(Xl,Gl,Vl)}function hh(t,n){t*=zs;var e=Os(n*=zs),r=e*Os(t),i=e*Ys(t),o=Ys(n),a=Rs(Ls((a=Gl*o-Vl*i)*a+(a=Vl*r-Xl*o)*a+(a=Xl*i-Gl*r)*a),Xl*r+Gl*i+Vl*o);Dl+=a,Fl+=a*(Xl+(Xl=r)),Ul+=a*(Gl+(Gl=i)),Il+=a*(Vl+(Vl=o)),fh(Xl,Gl,Vl)}function dh(){uh.point=ch}function ph(){uh.point=yh}function gh(){vh(Ll,Hl),uh.point=ch}function yh(t,n){Ll=t,Hl=n,t*=zs,n*=zs,uh.point=vh;var e=Os(n);Xl=e*Os(t),Gl=e*Ys(t),Vl=Ys(n),fh(Xl,Gl,Vl)}function vh(t,n){t*=zs;var e=Os(n*=zs),r=e*Os(t),i=e*Ys(t),o=Ys(n),a=Gl*o-Vl*i,u=Vl*r-Xl*o,c=Xl*i-Gl*r,f=Us(a,u,c),s=Gs(f),l=f&&-s/f;Bl.add(l*a),Yl.add(l*u),jl.add(l*c),Dl+=s,Fl+=s*(Xl+(Xl=r)),Ul+=s*(Gl+(Gl=i)),Il+=s*(Vl+(Vl=o)),fh(Xl,Gl,Vl)}function _h(t){$l=Dl=Rl=Ol=ql=Fl=Ul=Il=0,Bl=new k,Yl=new k,jl=new k,nl(t,uh);var n=+Bl,e=+Yl,r=+jl,i=Us(n,e,r);return i<Ss&&(n=Fl,e=Ul,r=Il,Dl<As&&(n=Rl,e=Ol,r=ql),(i=Us(n,e,r))<Ss)?[NaN,NaN]:[Rs(e,n)*Ps,Gs(r/i)*Ps]}function bh(t){return function(){return t}}function mh(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function xh(t,n){return $s(t)>Es&&(t-=Math.round(t/Cs)*Cs),[t,n]}function wh(t,n,e){return(t%=Cs)?n||e?mh(Th(t),Ah(n,e)):Th(t):n||e?Ah(n,e):xh}function Mh(t){return function(n,e){return $s(n+=t)>Es&&(n-=Math.round(n/Cs)*Cs),[n,e]}}function Th(t){var n=Mh(t);return n.invert=Mh(-t),n}function Ah(t,n){var e=Os(t),r=Ys(t),i=Os(n),o=Ys(n);function a(t,n){var a=Os(n),u=Os(t)*a,c=Ys(t)*a,f=Ys(n),s=f*e+u*r;return[Rs(c*i-s*o,u*e-f*r),Gs(s*i+c*o)]}return a.invert=function(t,n){var a=Os(n),u=Os(t)*a,c=Ys(t)*a,f=Ys(n),s=f*i-c*o;return[Rs(c*i+f*o,u*e+s*r),Gs(s*e-u*r)]},a}function Sh(t){function n(n){return(n=t(n[0]*zs,n[1]*zs))[0]*=Ps,n[1]*=Ps,n}return t=wh(t[0]*zs,t[1]*zs,t.length>2?t[2]*zs:0),n.invert=function(n){return(n=t.invert(n[0]*zs,n[1]*zs))[0]*=Ps,n[1]*=Ps,n},n}function Eh(t,n,e,r,i,o){if(e){var a=Os(n),u=Ys(n),c=r*e;null==i?(i=n+r*Cs,o=n-c/2):(i=Nh(a,i),o=Nh(a,o),(r>0?i<o:i>o)&&(i+=r*Cs));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Sl([a,-u*Os(s),-u*Ys(s)]),t.point(f[0],f[1])}}function Nh(t,n){(n=El(n))[0]-=t,zl(n);var e=Xs(-n[1]);return((-n[2]<0?-e:e)+Cs-As)%Cs}function kh(){var t,n,e=bh([0,0]),r=bh(90),i=bh(2),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Ps,e[1]*=Ps}};function a(){var a=e.apply(this,arguments),u=r.apply(this,arguments)*zs,c=i.apply(this,arguments)*zs;return t=[],n=wh(-a[0]*zs,-a[1]*zs,0).invert,Eh(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=n=null,a}return a.center=function(t){return arguments.length?(e="function"==typeof t?t:bh([+t[0],+t[1]]),a):e},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:bh(+t),a):r},a.precision=function(t){return arguments.length?(i="function"==typeof t?t:bh(+t),a):i},a}function Ch(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Ws,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Ph(t,n){return $s(t[0]-n[0])<As&&$s(t[1]-n[1])<As}function zh(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function $h(t,n,e,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(Ph(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a[0]+=2*As}u.push(e=new zh(r,t,null,!0)),c.push(e.o=new zh(r,null,e,!1)),u.push(e=new zh(a,t,null,!1)),c.push(e.o=new zh(a,null,e,!0))}})),u.length){for(c.sort(n),Dh(u),Dh(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var f,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=f.length;o<a;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}}function Dh(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function Rh(t){return $s(t[0])<=Es?t[0]:js(t[0])*(($s(t[0])+Es)%Cs-Es)}function Oh(t,n){var e=Rh(n),r=n[1],i=Ys(r),o=[Ys(e),-Os(e),0],a=0,u=0,c=new k;1===i?r=Ns+As:-1===i&&(r=-Ns-As);for(var f=0,s=t.length;f<s;++f)if(h=(l=t[f]).length)for(var l,h,d=l[h-1],p=Rh(d),g=d[1]/2+ks,y=Ys(g),v=Os(g),_=0;_<h;++_,p=m,y=w,v=M,d=b){var b=l[_],m=Rh(b),x=b[1]/2+ks,w=Ys(x),M=Os(x),T=m-p,A=T>=0?1:-1,S=A*T,E=S>Es,N=y*w;if(c.add(Rs(N*A*Ys(S),v*M+N*Os(S))),a+=E?T+A*Cs:T,E^p>=e^m>=e){var C=kl(El(d),El(b));zl(C);var P=kl(o,C);zl(P);var z=(E^T>=0?-1:1)*Gs(P[2]);(r>z||r===z&&(C[0]||C[1]))&&(u+=E^T>=0?1:-1)}}return(a<-As||a<As&&c<-Ss)^1&u}function qh(t,n,e,r){return function(i){var o,a,u,c=n(i),f=Ch(),s=n(f),l=!1,h={point:d,lineStart:g,lineEnd:y,polygonStart:function(){h.point=v,h.lineStart=_,h.lineEnd=b,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=y,a=kt(a);var t=Oh(o,r);a.length?(l||(i.polygonStart(),l=!0),$h(a,Uh,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function g(){h.point=p,c.lineStart()}function y(){h.point=d,c.lineEnd()}function v(t,n){u.push([t,n]),s.point(t,n)}function _(){s.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(u.pop(),o.push(u),u=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),a.push(h.filter(Fh))}return h}}function Fh(t){return t.length>1}function Uh(t,n){return((t=t.x)[0]<0?t[1]-Ns-As:Ns-t[1])-((n=n.x)[0]<0?n[1]-Ns-As:Ns-n[1])}xh.invert=xh;const Ih=qh((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Es:-Es,c=$s(o-e);$s(c-Es)<As?(t.point(e,r=(r+a)/2>0?Ns:-Ns),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&c>=Es&&($s(e-i)<As&&(e-=i*As),$s(o-u)<As&&(o-=u*As),r=function(t,n,e,r){var i,o,a=Ys(t-e);return $s(a)>As?Ds((Ys(n)*(o=Os(r))*Ys(e)-Ys(r)*(i=Os(n))*Ys(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Ns,r.point(-Es,i),r.point(0,i),r.point(Es,i),r.point(Es,0),r.point(Es,-i),r.point(0,-i),r.point(-Es,-i),r.point(-Es,0),r.point(-Es,i);else if($s(t[0]-n[0])>As){var o=t[0]<n[0]?Es:-Es;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Es,-Ns]);function Bh(t){var n=Os(t),e=2*zs,r=n>0,i=$s(n)>As;function o(t,e){return Os(t)*Os(e)>n}function a(t,e,r){var i=[1,0,0],o=kl(El(t),El(e)),a=Nl(o,o),u=o[0],c=a-u*u;if(!c)return!r&&t;var f=n*a/c,s=-n*u/c,l=kl(i,o),h=Pl(i,f);Cl(h,Pl(o,s));var d=l,p=Nl(h,d),g=Nl(d,d),y=p*p-g*(Nl(h,h)-1);if(!(y<0)){var v=Ls(y),_=Pl(d,(-p-v)/g);if(Cl(_,h),_=Sl(_),!r)return _;var b,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(b=m,m=x,x=b);var T=x-m,A=$s(T-Es)<As;if(!A&&M<w&&(b=w,w=M,M=b),A||T<As?A?w+M>0^_[1]<($s(_[0]-m)<As?w:M):w<=_[1]&&_[1]<=M:T>Es^(m<=_[0]&&_[0]<=x)){var S=Pl(d,(-p+v)/g);return Cl(S,h),[_,Sl(S)]}}}function u(n,e){var i=r?t:Es-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return qh(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],g=o(l,h),y=r?g?0:u(l,h):g?u(l+(l<0?Es:-Es),h):0;if(!n&&(f=c=g)&&t.lineStart(),g!==c&&(!(d=a(n,p))||Ph(n,d)||Ph(p,d))&&(p[2]=1),g!==c)s=0,g?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^g){var v;y&e||!(v=a(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1],3)))}!g||n&&Ph(n,p)||t.point(p[0],p[1]),n=p,c=g,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){Eh(o,t,e,i,n,r)}),r?[0,-t]:[-Es,t-Es])}var Yh,jh,Lh,Hh,Xh=1e9,Gh=-Xh;function Vh(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,f){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else f.point(o[0],o[1])}function a(r,i){return $s(r[0]-t)<As?i>0?0:3:$s(r[0]-e)<As?i>0?2:1:$s(r[1]-n)<As?i>0?1:0:i>0?3:2}function u(t,n){return c(t.x,n.x)}function c(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var c,f,s,l,h,d,p,g,y,v,_,b=a,m=Ch(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]),v=!0,y=!1,p=g=NaN},lineEnd:function(){c&&(M(l,h),d&&y&&m.rejoin(),c.push(m.result())),x.point=w,y&&b.lineEnd()},polygonStart:function(){b=m,c=[],f=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,a,u=f[e],c=1,s=u.length,l=u[0],h=l[0],d=l[1];c<s;++c)o=h,a=d,h=(l=u[c])[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=_&&n,i=(c=kt(c)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&$h(c,u,n,o,a),a.polygonEnd()),b=a,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,a){var u=i(o,a);if(f&&s.push([o,a]),v)l=o,h=a,d=u,v=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&y)b.point(o,a);else{var c=[p=Math.max(Gh,Math.min(Xh,p)),g=Math.max(Gh,Math.min(Xh,g))],m=[o=Math.max(Gh,Math.min(Xh,o)),a=Math.max(Gh,Math.min(Xh,a))];!function(t,n,e,r,i,o){var a,u=t[0],c=t[1],f=0,s=1,l=n[0]-u,h=n[1]-c;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>f&&(f=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<s&&(s=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>f&&(f=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<s&&(s=a)}return f>0&&(t[0]=u+f*l,t[1]=c+f*h),s<1&&(n[0]=u+s*l,n[1]=c+s*h),!0}}}}}(c,m,t,n,e,r)?u&&(b.lineStart(),b.point(o,a),_=!1):(y||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),u||b.lineEnd(),_=!1)}p=o,g=a,y=u}return x}}function Wh(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=Vh(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}}var Zh={sphere:Ws,point:Ws,lineStart:function(){Zh.point=Qh,Zh.lineEnd=Kh},lineEnd:Ws,polygonStart:Ws,polygonEnd:Ws};function Kh(){Zh.point=Zh.lineEnd=Ws}function Qh(t,n){jh=t*=zs,Lh=Ys(n*=zs),Hh=Os(n),Zh.point=Jh}function Jh(t,n){t*=zs;var e=Ys(n*=zs),r=Os(n),i=$s(t-jh),o=Os(i),a=r*Ys(i),u=Hh*e-Lh*r*o,c=Lh*e+Hh*r*o;Yh.add(Rs(Ls(a*a+u*u),c)),jh=t,Lh=e,Hh=r}function td(t){return Yh=new k,nl(t,Zh),+Yh}var nd=[null,null],ed={type:"LineString",coordinates:nd};function rd(t,n){return nd[0]=t,nd[1]=n,td(ed)}var id={Feature:function(t,n){return ad(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(ad(e[r].geometry,n))return!0;return!1}},od={Sphere:function(){return!0},Point:function(t,n){return ud(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ud(e[r],n))return!0;return!1},LineString:function(t,n){return cd(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(cd(e[r],n))return!0;return!1},Polygon:function(t,n){return fd(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(fd(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(ad(e[r],n))return!0;return!1}};function ad(t,n){return!(!t||!od.hasOwnProperty(t.type))&&od[t.type](t,n)}function ud(t,n){return 0===rd(t,n)}function cd(t,n){for(var e,r,i,o=0,a=t.length;o<a;o++){if(0===(r=rd(t[o],n)))return!0;if(o>0&&(i=rd(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<Ss*i)return!0;e=r}return!1}function fd(t,n){return!!Oh(t.map(sd),ld(n))}function sd(t){return(t=t.map(ld)).pop(),t}function ld(t){return[t[0]*zs,t[1]*zs]}function hd(t,n){return(t&&id.hasOwnProperty(t.type)?id[t.type]:ad)(t,n)}function dd(t,n,e){var r=$t(t,n-As,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function pd(t,n,e){var r=$t(t,n-As,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function gd(){var t,n,e,r,i,o,a,u,c,f,s,l,h=10,d=h,p=90,g=360,y=2.5;function v(){return{type:"MultiLineString",coordinates:_()}}function _(){return $t(qs(r/p)*p,e,p).map(s).concat($t(qs(u/g)*g,a,g).map(l)).concat($t(qs(n/h)*h,t,h).filter((function(t){return $s(t%p)>As})).map(c)).concat($t(qs(o/d)*d,i,d).filter((function(t){return $s(t%g)>As})).map(f))}return v.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},v.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(a).slice(1),s(e).reverse().slice(1),l(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],u=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),u>a&&(t=u,u=a,a=t),v.precision(y)):[[r,u],[e,a]]},v.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),v.precision(y)):[[n,o],[t,i]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],v):[p,g]},v.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],v):[h,d]},v.precision=function(h){return arguments.length?(y=+h,c=dd(o,i,90),f=pd(n,t,y),s=dd(u,a,90),l=pd(r,e,y),v):y},v.extentMajor([[-180,-90+As],[180,90-As]]).extentMinor([[-180,-80-As],[180,80+As]])}function yd(){return gd()()}function vd(t,n){var e=t[0]*zs,r=t[1]*zs,i=n[0]*zs,o=n[1]*zs,a=Os(r),u=Ys(r),c=Os(o),f=Ys(o),s=a*Os(e),l=a*Ys(e),h=c*Os(i),d=c*Ys(i),p=2*Gs(Ls(Vs(o-r)+a*c*Vs(i-e))),g=Ys(p),y=p?function(t){var n=Ys(t*=p)/g,e=Ys(p-t)/g,r=e*s+n*h,i=e*l+n*d,o=e*u+n*f;return[Rs(i,r)*Ps,Rs(o,Ls(r*r+i*i))*Ps]}:function(){return[e*Ps,r*Ps]};return y.distance=p,y}const _d=t=>t;var bd,md,xd,wd,Md=new k,Td=new k,Ad={point:Ws,lineStart:Ws,lineEnd:Ws,polygonStart:function(){Ad.lineStart=Sd,Ad.lineEnd=kd},polygonEnd:function(){Ad.lineStart=Ad.lineEnd=Ad.point=Ws,Md.add($s(Td)),Td=new k},result:function(){var t=Md/2;return Md=new k,t}};function Sd(){Ad.point=Ed}function Ed(t,n){Ad.point=Nd,bd=xd=t,md=wd=n}function Nd(t,n){Td.add(wd*t-xd*n),xd=t,wd=n}function kd(){Nd(bd,md)}const Cd=Ad;var Pd=1/0,zd=Pd,$d=-Pd,Dd=$d,Rd={point:function(t,n){t<Pd&&(Pd=t),t>$d&&($d=t),n<zd&&(zd=n),n>Dd&&(Dd=n)},lineStart:Ws,lineEnd:Ws,polygonStart:Ws,polygonEnd:Ws,result:function(){var t=[[Pd,zd],[$d,Dd]];return $d=Dd=-(zd=Pd=1/0),t}};const Od=Rd;var qd,Fd,Ud,Id,Bd=0,Yd=0,jd=0,Ld=0,Hd=0,Xd=0,Gd=0,Vd=0,Wd=0,Zd={point:Kd,lineStart:Qd,lineEnd:np,polygonStart:function(){Zd.lineStart=ep,Zd.lineEnd=rp},polygonEnd:function(){Zd.point=Kd,Zd.lineStart=Qd,Zd.lineEnd=np},result:function(){var t=Wd?[Gd/Wd,Vd/Wd]:Xd?[Ld/Xd,Hd/Xd]:jd?[Bd/jd,Yd/jd]:[NaN,NaN];return Bd=Yd=jd=Ld=Hd=Xd=Gd=Vd=Wd=0,t}};function Kd(t,n){Bd+=t,Yd+=n,++jd}function Qd(){Zd.point=Jd}function Jd(t,n){Zd.point=tp,Kd(Ud=t,Id=n)}function tp(t,n){var e=t-Ud,r=n-Id,i=Ls(e*e+r*r);Ld+=i*(Ud+t)/2,Hd+=i*(Id+n)/2,Xd+=i,Kd(Ud=t,Id=n)}function np(){Zd.point=Kd}function ep(){Zd.point=ip}function rp(){op(qd,Fd)}function ip(t,n){Zd.point=op,Kd(qd=Ud=t,Fd=Id=n)}function op(t,n){var e=t-Ud,r=n-Id,i=Ls(e*e+r*r);Ld+=i*(Ud+t)/2,Hd+=i*(Id+n)/2,Xd+=i,Gd+=(i=Id*t-Ud*n)*(Ud+t),Vd+=i*(Id+n),Wd+=3*i,Kd(Ud=t,Id=n)}const ap=Zd;function up(t){this._context=t}up.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Cs)}},result:Ws};var cp,fp,sp,lp,hp,dp=new k,pp={point:Ws,lineStart:function(){pp.point=gp},lineEnd:function(){cp&&yp(fp,sp),pp.point=Ws},polygonStart:function(){cp=!0},polygonEnd:function(){cp=null},result:function(){var t=+dp;return dp=new k,t}};function gp(t,n){pp.point=yp,fp=lp=t,sp=hp=n}function yp(t,n){lp-=t,hp-=n,dp.add(Ls(lp*lp+hp*hp)),lp=t,hp=n}const vp=pp;let _p,bp,mp,xp;class wp{constructor(t){this._append=null==t?Mp:function(t){const n=Math.floor(t);if(!(n>=0))throw new RangeError(`invalid digits: ${t}`);if(n>15)return Mp;if(n!==_p){const t=10**n;_p=n,bp=function(n){let e=1;this._+=n[0];for(const r=n.length;e<r;++e)this._+=Math.round(arguments[e]*t)/t+n[e]}}return bp}(t),this._radius=4.5,this._=""}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+="Z"),this._point=NaN}point(t,n){switch(this._point){case 0:this._append`M${t},${n}`,this._point=1;break;case 1:this._append`L${t},${n}`;break;default:if(this._append`M${t},${n}`,this._radius!==mp||this._append!==bp){const t=this._radius,n=this._;this._="",this._append`m0,${t}a${t},${t} 0 1,1 0,${-2*t}a${t},${t} 0 1,1 0,${2*t}z`,mp=t,bp=this._append,xp=this._,this._=n}this._+=xp}}result(){const t=this._;return this._="",t.length?t:null}}function Mp(t){let n=1;this._+=t[0];for(const e=t.length;n<e;++n)this._+=arguments[n]+t[n]}function Tp(t,n){let e,r,i=3,o=4.5;function a(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),nl(t,e(r))),r.result()}return a.area=function(t){return nl(t,e(Cd)),Cd.result()},a.measure=function(t){return nl(t,e(vp)),vp.result()},a.bounds=function(t){return nl(t,e(Od)),Od.result()},a.centroid=function(t){return nl(t,e(ap)),ap.result()},a.projection=function(n){return arguments.length?(e=null==n?(t=null,_d):(t=n).stream,a):t},a.context=function(t){return arguments.length?(r=null==t?(n=null,new wp(i)):new up(n=t),"function"!=typeof o&&r.pointRadius(o),a):n},a.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),a):o},a.digits=function(t){if(!arguments.length)return i;if(null==t)i=null;else{const n=Math.floor(t);if(!(n>=0))throw new RangeError(`invalid digits: ${t}`);i=n}return null===n&&(r=new wp(i)),a},a.projection(t).digits(i).context(n)}function Ap(t){return{stream:Sp(t)}}function Sp(t){return function(n){var e=new Ep;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ep(){}function Np(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),nl(e,t.stream(Od)),n(Od.result()),null!=r&&t.clipExtent(r),t}function kp(t,n,e){return Np(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}function Cp(t,n,e){return kp(t,[[0,0],n],e)}function Pp(t,n,e){return Np(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}function zp(t,n,e){return Np(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}Ep.prototype={constructor:Ep,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var $p=16,Dp=Os(30*zs);function Rp(t,n){return+n?function(t,n){function e(r,i,o,a,u,c,f,s,l,h,d,p,g,y){var v=f-r,_=s-i,b=v*v+_*_;if(b>4*n&&g--){var m=a+h,x=u+d,w=c+p,M=Ls(m*m+x*x+w*w),T=Gs(w/=M),A=$s($s(w)-1)<As||$s(o-l)<As?(o+l)/2:Rs(x,m),S=t(A,T),E=S[0],N=S[1],k=E-r,C=N-i,P=_*k-v*C;(P*P/b>n||$s((v*k+_*C)/b-.5)>.3||a*h+u*d+c*p<Dp)&&(e(r,i,o,a,u,c,E,N,A,m/=M,x/=M,w,g,y),y.point(E,N),e(E,N,A,m,x,w,f,s,l,h,d,p,g,y))}}return function(n){var r,i,o,a,u,c,f,s,l,h,d,p,g={point:y,lineStart:v,lineEnd:b,polygonStart:function(){n.polygonStart(),g.lineStart=m},polygonEnd:function(){n.polygonEnd(),g.lineStart=v}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,g.point=_,n.lineStart()}function _(r,i){var o=El([r,i]),a=t(r,i);e(s,l,f,h,d,p,s=a[0],l=a[1],f=r,h=o[0],d=o[1],p=o[2],$p,n),n.point(s,l)}function b(){g.point=y,n.lineEnd()}function m(){v(),g.point=x,g.lineEnd=w}function x(t,n){_(r=t,n),i=s,o=l,a=h,u=d,c=p,g.point=_}function w(){e(s,l,f,h,d,p,i,o,r,a,u,c,$p,n),g.lineEnd=b,b()}return g}}(t,n):function(t){return Sp({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Op=Sp({point:function(t,n){this.stream.point(t*zs,n*zs)}});function qp(t,n,e,r,i,o){if(!o)return function(t,n,e,r,i){function o(o,a){return[n+t*(o*=r),e-t*(a*=i)]}return o.invert=function(o,a){return[(o-n)/t*r,(e-a)/t*i]},o}(t,n,e,r,i);var a=Os(o),u=Ys(o),c=a*t,f=u*t,s=a/t,l=u/t,h=(u*e-a*n)/t,d=(u*n+a*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function Fp(t){return Up((function(){return t}))()}function Up(t){var n,e,r,i,o,a,u,c,f,s,l=150,h=480,d=250,p=0,g=0,y=0,v=0,_=0,b=0,m=1,x=1,w=null,M=Ih,T=null,A=_d,S=.5;function E(t){return c(t[0]*zs,t[1]*zs)}function N(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Ps,t[1]*Ps]}function k(){var t=qp(l,0,0,m,x,b).apply(null,n(p,g)),r=qp(l,h-t[0],d-t[1],m,x,b);return e=wh(y,v,_),u=mh(n,r),c=mh(e,u),a=Rp(u,S),C()}function C(){return f=s=null,E}return E.stream=function(t){return f&&s===t?f:f=Op(function(t){return Sp({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(a(A(s=t)))))},E.preclip=function(t){return arguments.length?(M=t,w=void 0,C()):M},E.postclip=function(t){return arguments.length?(A=t,T=r=i=o=null,C()):A},E.clipAngle=function(t){return arguments.length?(M=+t?Bh(w=t*zs):(w=null,Ih),C()):w*Ps},E.clipExtent=function(t){return arguments.length?(A=null==t?(T=r=i=o=null,_d):Vh(T=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),C()):null==T?null:[[T,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,k()):l},E.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],k()):[h,d]},E.center=function(t){return arguments.length?(p=t[0]%360*zs,g=t[1]%360*zs,k()):[p*Ps,g*Ps]},E.rotate=function(t){return arguments.length?(y=t[0]%360*zs,v=t[1]%360*zs,_=t.length>2?t[2]%360*zs:0,k()):[y*Ps,v*Ps,_*Ps]},E.angle=function(t){return arguments.length?(b=t%360*zs,k()):b*Ps},E.reflectX=function(t){return arguments.length?(m=t?-1:1,k()):m<0},E.reflectY=function(t){return arguments.length?(x=t?-1:1,k()):x<0},E.precision=function(t){return arguments.length?(a=Rp(u,S=t*t),C()):Ls(S)},E.fitExtent=function(t,n){return kp(E,t,n)},E.fitSize=function(t,n){return Cp(E,t,n)},E.fitWidth=function(t,n){return Pp(E,t,n)},E.fitHeight=function(t,n){return zp(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&N,k()}}function Ip(t){var n=0,e=Es/3,r=Up(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*zs,e=t[1]*zs):[n*Ps,e*Ps]},i}function Bp(t,n){var e=Ys(t),r=(e+Ys(n))/2;if($s(r)<As)return function(t){var n=Os(t);function e(t,e){return[t*n,Ys(e)/n]}return e.invert=function(t,e){return[t/n,Gs(e*n)]},e}(t);var i=1+e*(2*r-e),o=Ls(i)/r;function a(t,n){var e=Ls(i-2*r*Ys(n))/r;return[e*Ys(t*=r),o-e*Os(t)]}return a.invert=function(t,n){var e=o-n,a=Rs(t,$s(e))*js(e);return e*r<0&&(a-=Es*js(t)*js(e)),[a/r,Gs((i-(t*t+e*e)*r*r)/(2*r))]},a}function Yp(){return Ip(Bp).scale(155.424).center([0,33.6442])}function jp(){return Yp().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Lp(){var t,n,e,r,i,o,a=jp(),u=Yp().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Yp().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],a=t[1];return o=null,e.point(n,a),o||(r.point(n,a),o)||(i.point(n,a),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=a.scale(),e=a.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:a).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[a.stream(n=e),u.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),l()):a.precision()},s.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),s.translate(a.translate())):a.scale()},s.translate=function(t){if(!arguments.length)return a.translate();var n=a.scale(),o=+t[0],s=+t[1];return e=a.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=u.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+As,s+.12*n+As],[o-.214*n-As,s+.234*n-As]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+As,s+.166*n+As],[o-.115*n-As,s+.234*n-As]]).stream(f),l()},s.fitExtent=function(t,n){return kp(s,t,n)},s.fitSize=function(t,n){return Cp(s,t,n)},s.fitWidth=function(t,n){return Pp(s,t,n)},s.fitHeight=function(t,n){return zp(s,t,n)},s.scale(1070)}function Hp(t){return function(n,e){var r=Os(n),i=Os(e),o=t(r*i);return o===1/0?[2,0]:[o*i*Ys(n),o*Ys(e)]}}function Xp(t){return function(n,e){var r=Ls(n*n+e*e),i=t(r),o=Ys(i),a=Os(i);return[Rs(n*o,r*a),Gs(r&&e*o/r)]}}var Gp=Hp((function(t){return Ls(2/(1+t))}));function Vp(){return Fp(Gp).scale(124.75).clipAngle(179.999)}Gp.invert=Xp((function(t){return 2*Gs(t/2)}));var Wp=Hp((function(t){return(t=Xs(t))&&t/Ys(t)}));function Zp(){return Fp(Wp).scale(79.4188).clipAngle(179.999)}function Kp(t,n){return[t,Is(Hs((Ns+n)/2))]}function Qp(){return Jp(Kp).scale(961/Cs)}function Jp(t){var n,e,r,i=Fp(t),o=i.center,a=i.scale,u=i.translate,c=i.clipExtent,f=null;function s(){var o=Es*a(),u=i(Sh(i.rotate()).invert([0,0]));return c(null==f?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===Kp?[[Math.max(u[0]-o,f),n],[Math.min(u[0]+o,e),r]]:[[f,Math.max(u[1]-o,n)],[e,Math.min(u[1]+o,r)]])}return i.scale=function(t){return arguments.length?(a(t),s()):a()},i.translate=function(t){return arguments.length?(u(t),s()):u()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function tg(t){return Hs((Ns+t)/2)}function ng(t,n){var e=Os(t),r=t===n?Ys(t):Is(e/Os(n))/Is(tg(n)/tg(t)),i=e*Bs(tg(t),r)/r;if(!r)return Kp;function o(t,n){i>0?n<-Ns+As&&(n=-Ns+As):n>Ns-As&&(n=Ns-As);var e=i/Bs(tg(n),r);return[e*Ys(r*t),i-e*Os(r*t)]}return o.invert=function(t,n){var e=i-n,o=js(r)*Ls(t*t+e*e),a=Rs(t,$s(e))*js(e);return e*r<0&&(a-=Es*js(t)*js(e)),[a/r,2*Ds(Bs(i/o,1/r))-Ns]},o}function eg(){return Ip(ng).scale(109.5).parallels([30,30])}function rg(t,n){return[t,n]}function ig(){return Fp(rg).scale(152.63)}function og(t,n){var e=Os(t),r=t===n?Ys(t):(e-Os(n))/(n-t),i=e/r+t;if($s(r)<As)return rg;function o(t,n){var e=i-n,o=r*t;return[e*Ys(o),i-e*Os(o)]}return o.invert=function(t,n){var e=i-n,o=Rs(t,$s(e))*js(e);return e*r<0&&(o-=Es*js(t)*js(e)),[o/r,i-js(r)*Ls(t*t+e*e)]},o}function ag(){return Ip(og).scale(131.154).center([0,13.9389])}Wp.invert=Xp((function(t){return t})),Kp.invert=function(t,n){return[t,2*Ds(Fs(n))-Ns]},rg.invert=rg;var ug=1.340264,cg=-.081106,fg=893e-6,sg=.003796,lg=Ls(3)/2;function hg(t,n){var e=Gs(lg*Ys(n)),r=e*e,i=r*r*r;return[t*Os(e)/(lg*(ug+3*cg*r+i*(7*fg+9*sg*r))),e*(ug+cg*r+i*(fg+sg*r))]}function dg(){return Fp(hg).scale(177.158)}function pg(t,n){var e=Os(n),r=Os(t)*e;return[e*Ys(t)/r,Ys(n)/r]}function gg(){return Fp(pg).scale(144.049).clipAngle(60)}function yg(){var t,n,e,r,i,o,a,u=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,g=1,y=Sp({point:function(t,n){var e=b([t,n]);this.stream.point(e[0],e[1])}}),v=_d;function _(){return p=u*s,g=u*l,o=a=null,b}function b(e){var r=e[0]*p,i=e[1]*g;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return b.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/g]},b.stream=function(t){return o&&a===t?o:o=y(v(a=t))},b.postclip=function(t){return arguments.length?(v=t,d=e=r=i=null,_()):v},b.clipExtent=function(t){return arguments.length?(v=null==t?(d=e=r=i=null,_d):Vh(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),_()):null==d?null:[[d,e],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,_()):u},b.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],_()):[c,f]},b.angle=function(e){return arguments.length?(n=Ys(h=e%360*zs),t=Os(h),_()):h*Ps},b.reflectX=function(t){return arguments.length?(s=t?-1:1,_()):s<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,_()):l<0},b.fitExtent=function(t,n){return kp(b,t,n)},b.fitSize=function(t,n){return Cp(b,t,n)},b.fitWidth=function(t,n){return Pp(b,t,n)},b.fitHeight=function(t,n){return zp(b,t,n)},b}function vg(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function _g(){return Fp(vg).scale(175.295)}function bg(t,n){return[Os(n)*Ys(t),Ys(n)]}function mg(){return Fp(bg).scale(249.5).clipAngle(90+As)}function xg(t,n){var e=Os(n),r=1+Os(t)*e;return[e*Ys(t)/r,Ys(n)/r]}function wg(){return Fp(xg).scale(250).clipAngle(142)}function Mg(t,n){return[Is(Hs((Ns+n)/2)),-t]}function Tg(){var t=Jp(Mg),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function Ag(t,n){return t.parent===n.parent?1:2}function Sg(t,n){return t+n.x}function Eg(t,n){return Math.max(t,n.y)}function Ng(){var t=Ag,n=1,e=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Sg,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Eg,0)}(e)):(n.x=o?a+=t(n,o):0,n.y=0,o=n)}));var u=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=u.x-t(u,c)/2,s=c.x+t(c,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function kg(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Cg(t,n){t instanceof Map?(t=[void 0,t],void 0===n&&(n=zg)):void 0===n&&(n=Pg);for(var e,r,i,o,a,u=new Rg(t),c=[u];e=c.pop();)if((i=n(e.data))&&(a=(i=Array.from(i)).length))for(e.children=i,o=a-1;o>=0;--o)c.push(r=i[o]=new Rg(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(Dg)}function Pg(t){return t.children}function zg(t){return Array.isArray(t)?t[1]:null}function $g(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function Dg(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Rg(t){this.data=t,this.depth=this.height=0,this.parent=null}function Og(t){return null==t?null:qg(t)}function qg(t){if("function"!=typeof t)throw new Error;return t}function Fg(){return 0}function Ug(t){return function(){return t}}hg.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(ug+cg*i+o*(fg+sg*i))-n)/(ug+3*cg*i+o*(7*fg+9*sg*i)))*r)*i*i,!($s(e)<Ss));++a);return[lg*t*(ug+3*cg*i+o*(7*fg+9*sg*i))/Os(r),Gs(Ys(r)/lg)]},pg.invert=Xp(Ds),vg.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while($s(e)>As&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},bg.invert=Xp(Gs),xg.invert=Xp((function(t){return 2*Ds(t)})),Mg.invert=function(t,n){return[-n,2*Ds(Fs(t))-Ns]},Rg.prototype=Cg.prototype={constructor:Rg,count:function(){return this.eachAfter(kg)},each:function(t,n){let e=-1;for(const r of this)t.call(n,r,++e,this);return this},eachAfter:function(t,n){for(var e,r,i,o=this,a=[o],u=[],c=-1;o=a.pop();)if(u.push(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r]);for(;o=u.pop();)t.call(n,o,++c,this);return this},eachBefore:function(t,n){for(var e,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(n,i,++a,this),e=i.children)for(r=e.length-1;r>=0;--r)o.push(e[r]);return this},find:function(t,n){let e=-1;for(const r of this)if(t.call(n,r,++e,this))return r},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Cg(this).eachBefore($g)},[Symbol.iterator]:function*(){var t,n,e,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e])}while(o.length)}};const Ig=1664525,Bg=1013904223,Yg=4294967296;function jg(){let t=1;return()=>(t=(Ig*t+Bg)%Yg)/Yg}function Lg(t){return Hg(t,jg())}function Hg(t,n){for(var e,r,i=0,o=(t=function(t,n){let e,r,i=t.length;for(;i;)r=n()*i--|0,e=t[i],t[i]=t[r],t[r]=e;return t}(Array.from(t),n)).length,a=[];i<o;)e=t[i],r&&Vg(r,e)?++i:(r=Zg(a=Xg(a,e)),i=0);return r}function Xg(t,n){var e,r;if(Wg(n,t))return[n];for(e=0;e<t.length;++e)if(Gg(n,t[e])&&Wg(Kg(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Gg(Kg(t[e],t[r]),n)&&Gg(Kg(t[e],n),t[r])&&Gg(Kg(t[r],n),t[e])&&Wg(Qg(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Gg(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Vg(t,n){var e=t.r-n.r+1e-9*Math.max(t.r,n.r,1),r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Wg(t,n){for(var e=0;e<n.length;++e)if(!Vg(t,n[e]))return!1;return!0}function Zg(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Kg(t[0],t[1]);case 3:return Qg(t[0],t[1],t[2])}}function Kg(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,c=o-e,f=a-r,s=u-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+a+f/l*s)/2,r:(l+i+u)/2}}function Qg(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-a,d=r-f,p=i-u,g=i-s,y=c-o,v=l-o,_=r*r+i*i-o*o,b=_-a*a-u*u+c*c,m=_-f*f-s*s+l*l,x=d*p-h*g,w=(p*m-g*b)/(2*x)-r,M=(g*y-p*v)/x,T=(d*b-h*m)/(2*x)-i,A=(h*v-d*y)/x,S=M*M+A*A-1,E=2*(o+w*M+T*A),N=w*w+T*T-o*o,k=-(Math.abs(S)>1e-6?(E+Math.sqrt(E*E-4*S*N))/(2*S):N/E);return{x:r+w+M*k,y:i+T+A*k,r:k}}function Jg(t,n,e){var r,i,o,a,u=t.x-n.x,c=t.y-n.y,f=u*u+c*c;f?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(f+a-i)/(2*f),o=Math.sqrt(Math.max(0,a/f-r*r)),e.x=t.x-r*u-o*c,e.y=t.y-r*c+o*u):(r=(f+i-a)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*u-o*c,e.y=n.y+r*c+o*u)):(e.x=n.x+e.r,e.y=n.y)}function ty(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function ny(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function ey(t){this._=t,this.next=null,this.previous=null}function ry(t,n){if(!(a=(e=t,t="object"==typeof e&&"length"in e?e:Array.from(e)).length))return 0;var e,r,i,o,a,u,c,f,s,l,h,d;if((r=t[0]).x=0,r.y=0,!(a>1))return r.r;if(i=t[1],r.x=-i.r,i.x=r.r,i.y=0,!(a>2))return r.r+i.r;Jg(i,r,o=t[2]),r=new ey(r),i=new ey(i),o=new ey(o),r.next=o.previous=i,i.next=r.previous=o,o.next=i.previous=r;t:for(f=3;f<a;++f){Jg(r._,i._,o=t[f]),o=new ey(o),s=i.next,l=r.previous,h=i._.r,d=r._.r;do{if(h<=d){if(ty(s._,o._)){i=s,r.next=i,i.previous=r,--f;continue t}h+=s._.r,s=s.next}else{if(ty(l._,o._)){(r=l).next=i,i.previous=r,--f;continue t}d+=l._.r,l=l.previous}}while(s!==l.next);for(o.previous=r,o.next=i,r.next=i.previous=i=o,u=ny(r);(o=o.next)!==i;)(c=ny(o))<u&&(r=o,u=c);i=r.next}for(r=[i._],o=i;(o=o.next)!==i;)r.push(o._);for(o=Hg(r,n),f=0;f<a;++f)(r=t[f]).x-=o.x,r.y-=o.y;return o.r}function iy(t){return ry(t,jg()),t}function oy(t){return Math.sqrt(t.value)}function ay(){var t=null,n=1,e=1,r=Fg;function i(i){const o=jg();return i.x=n/2,i.y=e/2,t?i.eachBefore(uy(t)).eachAfter(cy(r,.5,o)).eachBefore(fy(1)):i.eachBefore(uy(oy)).eachAfter(cy(Fg,1,o)).eachAfter(cy(r,i.r/Math.min(n,e),o)).eachBefore(fy(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Og(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ug(+t),i):r},i}function uy(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function cy(t,n,e){return function(r){if(i=r.children){var i,o,a,u=i.length,c=t(r)*n||0;if(c)for(o=0;o<u;++o)i[o].r+=c;if(a=ry(i,e),c)for(o=0;o<u;++o)i[o].r-=c;r.r=a+c}}}function fy(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function sy(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function ly(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}function hy(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&ly(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,a=r.x1-e,u=r.y1-e;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(n,o)),r&&i.eachBefore(sy),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var dy={depth:-1},py={},gy={};function yy(t){return t.id}function vy(t){return t.parentId}function _y(){var t,n=yy,e=vy;function r(r){var i,o,a,u,c,f,s,l,h=Array.from(r),d=n,p=e,g=new Map;if(null!=t){const n=h.map(((n,e)=>function(t){let n=(t=`${t}`).length;return my(t,n-1)&&!my(t,n-2)&&(t=t.slice(0,-1)),"/"===t[0]?t:`/${t}`}(t(n,e,r)))),e=n.map(by),i=new Set(n).add("");for(const t of e)i.has(t)||(i.add(t),n.push(t),e.push(by(t)),h.push(gy));d=(t,e)=>n[e],p=(t,n)=>e[n]}for(a=0,i=h.length;a<i;++a)o=h[a],f=h[a]=new Rg(o),null!=(s=d(o,a,r))&&(s+="")&&(l=f.id=s,g.set(l,g.has(l)?py:f)),null!=(s=p(o,a,r))&&(s+="")&&(f.parent=s);for(a=0;a<i;++a)if(s=(f=h[a]).parent){if(!(c=g.get(s)))throw new Error("missing: "+s);if(c===py)throw new Error("ambiguous: "+s);c.children?c.children.push(f):c.children=[f],f.parent=c}else{if(u)throw new Error("multiple roots");u=f}if(!u)throw new Error("no root");if(null!=t){for(;u.data===gy&&1===u.children.length;)u=u.children[0],--i;for(let t=h.length-1;t>=0&&(f=h[t]).data===gy;--t)f.data=null}if(u.parent=dy,u.eachBefore((function(t){t.depth=t.parent.depth+1,--i})).eachBefore(Dg),u.parent=null,i>0)throw new Error("cycle");return u}return r.id=function(t){return arguments.length?(n=Og(t),r):n},r.parentId=function(t){return arguments.length?(e=Og(t),r):e},r.path=function(n){return arguments.length?(t=Og(n),r):t},r}function by(t){let n=t.length;if(n<2)return"";for(;--n>1&&!my(t,n););return t.slice(0,n)}function my(t,n){if("/"===t[n]){let e=0;for(;n>0&&"\\"===t[--n];)++e;if(!(1&e))return!0}return!1}function xy(t,n){return t.parent===n.parent?1:2}function wy(t){var n=t.children;return n?n[0]:t.t}function My(t){var n=t.children;return n?n[n.length-1]:t.t}function Ty(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Ay(t,n,e){return t.a.parent===n.parent?t.a:e}function Sy(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function Ey(){var t=xy,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,a=new Sy(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new Sy(r[i],i)),e.parent=n;return(a.parent=new Sy(null,0)).children=[a],a}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),r)i.eachBefore(u);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),g=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*g}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,c=o.parent.children[0],f=o.m,s=a.m,l=u.m,h=c.m;u=My(u),o=wy(o),u&&o;)c=wy(c),(a=My(a)).a=n,(i=u.z+l-o.z-f+t(u._,o._))>0&&(Ty(Ay(u,n,r),n,i),f+=i,s+=i),l+=u.m,f+=o.m,h+=c.m,s+=a.m;u&&!My(a)&&(a.t=u,a.m+=l-s),o&&!wy(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Ny(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}Sy.prototype=Object.create(Rg.prototype);var ky=(1+Math.sqrt(5))/2;function Cy(t,n,e,r,i,o){for(var a,u,c,f,s,l,h,d,p,g,y,v=[],_=n.children,b=0,m=0,x=_.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=_[m++].value}while(!s&&m<x);for(l=h=s,y=s*s*(g=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/l);m<x;++m){if(s+=u=_[m].value,u<l&&(l=u),u>h&&(h=u),y=s*s*g,(d=Math.max(h/y,y/l))>p){s-=u;break}p=d}v.push(a={value:s,dice:c<f,children:_.slice(b,m)}),a.dice?ly(a,e,r,i,w?r+=f*s/w:o):Ny(a,e,r,w?e+=c*s/w:i,o),w-=s,b=m}return v}const Py=function t(n){function e(t,e,r,i,o){Cy(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ky);function zy(){var t=Py,n=!1,e=1,r=1,i=[0],o=Fg,a=Fg,u=Fg,c=Fg,f=Fg;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(sy),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=a(n)-e,(l-=u(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=qg(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Ug(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Ug(+t),s):a},s.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Ug(+t),s):u},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Ug(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Ug(+t),s):f},s}function $y(t,n,e,r,i){var o,a,u=t.children,c=u.length,f=new Array(c+1);for(f[0]=a=o=0;o<c;++o)f[o+1]=a+=u[o].value;!function t(n,e,r,i,o,a,c){if(n>=e-1){var s=u[n];return s.x0=i,s.y0=o,s.x1=a,void(s.y1=c)}for(var l=f[n],h=r/2+l,d=n+1,p=e-1;d<p;){var g=d+p>>>1;f[g]<h?d=g+1:p=g}h-f[d-1]<f[d]-h&&n+1<d&&--d;var y=f[d]-l,v=r-y;if(a-i>c-o){var _=r?(i*v+a*y)/r:a;t(n,d,y,i,o,_,c),t(d,e,v,_,o,a,c)}else{var b=r?(o*v+c*y)/r:c;t(n,d,y,i,o,a,b),t(d,e,v,i,b,a,c)}}(0,c,t.value,n,e,r,i)}function Dy(t,n,e,r,i){(1&t.depth?Ny:ly)(t,n,e,r,i)}const Ry=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,c,f,s,l=-1,h=a.length,d=t.value;++l<h;){for(c=(u=a[l]).children,f=u.value=0,s=c.length;f<s;++f)u.value+=c[f].value;u.dice?ly(u,e,r,i,d?r+=(o-r)*u.value/d:o):Ny(u,e,r,d?e+=(i-e)*u.value/d:i,o),d-=u.value}else t._squarify=a=Cy(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ky);function Oy(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function qy(t,n){var e=Rr(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}}function Fy(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function Uy(t){return((t=Math.exp(t))+1/t)/2}const Iy=function t(n,e,r){function i(t,i){var o,a,u=t[0],c=t[1],f=t[2],s=i[0],l=i[1],h=i[2],d=s-u,p=l-c,g=d*d+p*p;if(g<1e-12)a=Math.log(h/f)/n,o=function(t){return[u+t*d,c+t*p,f*Math.exp(n*t*a)]};else{var y=Math.sqrt(g),v=(h*h-f*f+r*g)/(2*f*e*y),_=(h*h-f*f-r*g)/(2*h*e*y),b=Math.log(Math.sqrt(v*v+1)-v),m=Math.log(Math.sqrt(_*_+1)-_);a=(m-b)/n,o=function(t){var r,i=t*a,o=Uy(b),s=f/(e*y)*(o*(r=n*i+b,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[u+s*d,c+s*p,f*o/Uy(n*i+b)]}}return o.duration=1e3*a*n/Math.SQRT2,o}return i.rho=function(n){var e=Math.max(.001,+n),r=e*e;return t(e,r,r*r)},i}(Math.SQRT2,2,4);function By(t){return function(n,e){var r=t((n=Ar(n)).h,(e=Ar(e)).h),i=Or(n.s,e.s),o=Or(n.l,e.l),a=Or(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const Yy=By(Rr);var jy=By(Or);function Ly(t,n){var e=Or((t=Da(t)).l,(n=Da(n)).l),r=Or(t.a,n.a),i=Or(t.b,n.b),o=Or(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function Hy(t){return function(n,e){var r=t((n=Ya(n)).h,(e=Ya(e)).h),i=Or(n.c,e.c),o=Or(n.l,e.l),a=Or(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const Xy=Hy(Rr);var Gy=Hy(Or);function Vy(t){return function n(e){function r(n,r){var i=t((n=Ja(n)).h,(r=Ja(r)).h),o=Or(n.s,r.s),a=Or(n.l,r.l),u=Or(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Wy=Vy(Rr);var Zy=Vy(Or);function Ky(t,n){void 0===n&&(n=t,t=Kr);for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}function Qy(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}function Jy(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function tv(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],c=0;++r<i;)n=u,u=t[r],c+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(c*=3),a/c]}function nv(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function ev(t,n){return t[0]-n[0]||t[1]-n[1]}function rv(t){const n=t.length,e=[0,1];let r,i=2;for(r=2;r<n;++r){for(;i>1&&nv(t[e[i-2]],t[e[i-1]],t[r])<=0;)--i;e[i++]=r}return e.slice(0,i)}function iv(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(ev),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=rv(r),a=rv(i),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+u;n<a.length-c;++n)f.push(t[r[a[n]][2]]);return f}function ov(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>u!=f>u&&a<(c-e)*(u-r)/(f-r)+e&&(s=!s),c=e,f=r;return s}function av(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],c=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],c+=Math.hypot(n,e);return c}const uv=Math.random,cv=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(uv),fv=function t(n){function e(t,e){return arguments.length<2&&(e=t,t=0),t=Math.floor(t),e=Math.floor(e)-t,function(){return Math.floor(n()*e+t)}}return e.source=t,e}(uv),sv=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(uv),lv=function t(n){var e=sv.source(n);function r(){var t=e.apply(this,arguments);return function(){return Math.exp(t())}}return r.source=t,r}(uv),hv=function t(n){function e(t){return(t=+t)<=0?()=>0:function(){for(var e=0,r=t;r>1;--r)e+=n();return e+r*n()}}return e.source=t,e}(uv),dv=function t(n){var e=hv.source(n);function r(t){if(0==(t=+t))return n;var r=e(t);return function(){return r()/t}}return r.source=t,r}(uv),pv=function t(n){function e(t){return function(){return-Math.log1p(-n())/t}}return e.source=t,e}(uv),gv=function t(n){function e(t){if((t=+t)<0)throw new RangeError("invalid alpha");return t=1/-t,function(){return Math.pow(1-n(),t)}}return e.source=t,e}(uv),yv=function t(n){function e(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return function(){return Math.floor(n()+t)}}return e.source=t,e}(uv),vv=function t(n){function e(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return 0===t?()=>1/0:1===t?()=>1:(t=Math.log1p(-t),function(){return 1+Math.floor(Math.log1p(-n())/t)})}return e.source=t,e}(uv),_v=function t(n){var e=sv.source(n)();function r(t,r){if((t=+t)<0)throw new RangeError("invalid k");if(0===t)return()=>0;if(r=null==r?1:+r,1===t)return()=>-Math.log1p(-n())*r;var i=(t<1?t+1:t)-1/3,o=1/(3*Math.sqrt(i)),a=t<1?()=>Math.pow(n(),1/t):()=>1;return function(){do{do{var t=e(),u=1+o*t}while(u<=0);u*=u*u;var c=1-n()}while(c>=1-.0331*t*t*t*t&&Math.log(c)>=.5*t*t+i*(1-u+Math.log(u)));return i*u*a()*r}}return r.source=t,r}(uv),bv=function t(n){var e=_v.source(n);function r(t,n){var r=e(t),i=e(n);return function(){var t=r();return 0===t?0:t/(t+i())}}return r.source=t,r}(uv),mv=function t(n){var e=vv.source(n),r=bv.source(n);function i(t,n){return t=+t,(n=+n)>=1?()=>t:n<=0?()=>0:function(){for(var i=0,o=t,a=n;o*a>16&&o*(1-a)>16;){var u=Math.floor((o+1)*a),c=r(u,o-u+1)();c<=a?(i+=u,o-=u,a=(a-c)/(1-c)):(o=u-1,a/=c)}for(var f=a<.5,s=e(f?a:1-a),l=s(),h=0;l<=o;++h)l+=s();return i+(f?h:o-h)}}return i.source=t,i}(uv),xv=function t(n){function e(t,e,r){var i;return 0==(t=+t)?i=t=>-Math.log(t):(t=1/t,i=n=>Math.pow(n,t)),e=null==e?0:+e,r=null==r?1:+r,function(){return e+r*i(-Math.log1p(-n()))}}return e.source=t,e}(uv),wv=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,function(){return t+e*Math.tan(Math.PI*n())}}return e.source=t,e}(uv),Mv=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,function(){var r=n();return t+e*Math.log(r/(1-r))}}return e.source=t,e}(uv),Tv=function t(n){var e=_v.source(n),r=mv.source(n);function i(t){return function(){for(var i=0,o=t;o>16;){var a=Math.floor(.875*o),u=e(a)();if(u>o)return i+r(a-1,o/u)();i+=a,o-=u}for(var c=-Math.log1p(-n()),f=0;c<=o;++f)c-=Math.log1p(-n());return i+f}}return i.source=t,i}(uv),Av=1664525,Sv=1013904223,Ev=1/4294967296;function Nv(t=Math.random()){let n=0|(0<=t&&t<1?t/Ev:Math.abs(t));return()=>(n=Av*n+Sv|0,Ev*(n>>>0))}function kv(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Cv(t,n){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof n?this.interpolator(n):this.range(n)}return this}const Pv=Symbol("implicit");function zv(){var t=new z,n=[],e=[],r=Pv;function i(i){let o=t.get(i);if(void 0===o){if(r!==Pv)return r;t.set(i,o=n.push(i)-1)}return e[o%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new z;for(const r of e)t.has(r)||t.set(r,n.push(r)-1);return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return zv(n,e).unknown(r)},kv.apply(i,arguments),i}function $v(){var t,n,e=zv().unknown(void 0),r=e.domain,i=e.range,o=0,a=1,u=!1,c=0,f=0,s=.5;function l(){var e=r().length,l=a<o,h=l?a:o,d=l?o:a;t=(d-h)/Math.max(1,e-c+2*f),u&&(t=Math.floor(t)),h+=(d-h-t*(e-c))*s,n=t*(1-c),u&&(h=Math.round(h),n=Math.round(n));var p=$t(e).map((function(n){return h+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?([o,a]=t,o=+o,a=+a,l()):[o,a]},e.rangeRound=function(t){return[o,a]=t,o=+o,a=+a,u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(c=Math.min(1,f=+t),l()):c},e.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),l()):c},e.paddingOuter=function(t){return arguments.length?(f=+t,l()):f},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},e.copy=function(){return $v(r(),[o,a]).round(u).paddingInner(c).paddingOuter(f).align(s)},kv.apply(l(),arguments)}function Dv(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Dv(n())},t}function Rv(){return Dv($v.apply(null,arguments).paddingInner(1))}function Ov(t){return+t}var qv=[0,1];function Fv(t){return t}function Uv(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Iv(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Uv(i,r),o=e(a,o)):(r=Uv(r,i),o=e(o,a)),function(t){return o(r(t))}}function Bv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Uv(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=h(t,n,1,r)-1;return o[e](i[e](n))}}function Yv(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function jv(){var t,n,e,r,i,o,a=qv,u=qv,c=Kr,f=Fv;function s(){var t=Math.min(a.length,u.length);return f!==Fv&&(f=function(t,n){var e;return t>n&&(e=t,t=n,n=e),function(e){return Math.max(t,Math.min(n,e))}}(a[0],a[t-1])),r=t>2?Bv:Iv,i=o=null,l}function l(n){return null==n||isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(u,a.map(t),Xr)))(e)))},l.domain=function(t){return arguments.length?(a=Array.from(t,Ov),s()):a.slice()},l.range=function(t){return arguments.length?(u=Array.from(t),s()):u.slice()},l.rangeRound=function(t){return u=Array.from(t),c=Fy,s()},l.clamp=function(t){return arguments.length?(f=!!t||Fv,s()):f!==Fv},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function Lv(){return jv()(Fv,Fv)}function Hv(t,n,e,r){var i,o=st(t,n,e);switch((r=ss(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=Ms(o,a))||(r.precision=i),vs(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=Ts(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=ws(o))||(r.precision=i-2*("%"===r.type))}return ys(r)}function Xv(t){var n=t.domain;return t.ticks=function(t){var e=n();return ct(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Hv(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,u=o.length-1,c=o[a],f=o[u],s=10;for(f<c&&(i=c,c=f,f=i,i=a,a=u,u=i);s-- >0;){if((i=ft(c,f,e))===r)return o[a]=c,o[u]=f,n(o);if(i>0)c=Math.floor(c/i)*i,f=Math.ceil(f/i)*i;else{if(!(i<0))break;c=Math.ceil(c*i)/i,f=Math.floor(f*i)/i}r=i}return t},t}function Gv(){var t=Lv();return t.copy=function(){return Yv(t,Gv())},kv.apply(t,arguments),Xv(t)}function Vv(t){var n;function e(t){return null==t||isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Array.from(n,Ov),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Vv(t).unknown(n)},t=arguments.length?Array.from(t,Ov):[0,1],Xv(e)}function Wv(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function Zv(t){return Math.log(t)}function Kv(t){return Math.exp(t)}function Qv(t){return-Math.log(-t)}function Jv(t){return-Math.exp(-t)}function t_(t){return isFinite(t)?+("1e"+t):t<0?0:t}function n_(t){return(n,e)=>-t(-n,e)}function e_(t){const n=t(Zv,Kv),e=n.domain;let r,i,o=10;function a(){return r=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),n=>Math.log(n)/t)}(o),i=function(t){return 10===t?t_:t===Math.E?Math.exp:n=>Math.pow(t,n)}(o),e()[0]<0?(r=n_(r),i=n_(i),t(Qv,Jv)):t(Zv,Kv),n}return n.base=function(t){return arguments.length?(o=+t,a()):o},n.domain=function(t){return arguments.length?(e(t),a()):e()},n.ticks=t=>{const n=e();let a=n[0],u=n[n.length-1];const c=u<a;c&&([a,u]=[u,a]);let f,s,l=r(a),h=r(u);const d=null==t?10:+t;let p=[];if(!(o%1)&&h-l<d){if(l=Math.floor(l),h=Math.ceil(h),a>0){for(;l<=h;++l)for(f=1;f<o;++f)if(s=l<0?f/i(-l):f*i(l),!(s<a)){if(s>u)break;p.push(s)}}else for(;l<=h;++l)for(f=o-1;f>=1;--f)if(s=l>0?f/i(-l):f*i(l),!(s<a)){if(s>u)break;p.push(s)}2*p.length<d&&(p=ct(a,u,d))}else p=ct(l,h,Math.min(h-l,d)).map(i);return c?p.reverse():p},n.tickFormat=(t,e)=>{if(null==t&&(t=10),null==e&&(e=10===o?"s":","),"function"!=typeof e&&(o%1||null!=(e=ss(e)).precision||(e.trim=!0),e=ys(e)),t===1/0)return e;const a=Math.max(1,o*t/n.ticks().length);return t=>{let n=t/i(Math.round(r(t)));return n*o<o-.5&&(n*=o),n<=a?e(t):""}},n.nice=()=>e(Wv(e(),{floor:t=>i(Math.floor(r(t))),ceil:t=>i(Math.ceil(r(t)))})),n}function r_(){const t=e_(jv()).domain([1,10]);return t.copy=()=>Yv(t,r_()).base(t.base()),kv.apply(t,arguments),t}function i_(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function o_(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function a_(t){var n=1,e=t(i_(n),o_(n));return e.constant=function(e){return arguments.length?t(i_(n=+e),o_(n)):n},Xv(e)}function u_(){var t=a_(jv());return t.copy=function(){return Yv(t,u_()).constant(t.constant())},kv.apply(t,arguments)}function c_(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function f_(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function s_(t){return t<0?-t*t:t*t}function l_(t){var n=t(Fv,Fv),e=1;return n.exponent=function(n){return arguments.length?1==(e=+n)?t(Fv,Fv):.5===e?t(f_,s_):t(c_(e),c_(1/e)):e},Xv(n)}function h_(){var t=l_(jv());return t.copy=function(){return Yv(t,h_()).exponent(t.exponent())},kv.apply(t,arguments),t}function d_(){return h_.apply(null,arguments).exponent(.5)}function p_(t){return Math.sign(t)*t*t}function g_(){var t,n=Lv(),e=[0,1],r=!1;function i(e){var i=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(n(e));return isNaN(i)?t:r?Math.round(i):i}return i.invert=function(t){return n.invert(p_(t))},i.domain=function(t){return arguments.length?(n.domain(t),i):n.domain()},i.range=function(t){return arguments.length?(n.range((e=Array.from(t,Ov)).map(p_)),i):e.slice()},i.rangeRound=function(t){return i.range(t).round(!0)},i.round=function(t){return arguments.length?(r=!!t,i):r},i.clamp=function(t){return arguments.length?(n.clamp(t),i):n.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return g_(n.domain(),e).round(r).clamp(n.clamp()).unknown(t)},kv.apply(i,arguments),Xv(i)}function y_(){var t,n=[],e=[],i=[];function o(){var t=0,r=Math.max(1,e.length);for(i=new Array(r-1);++t<r;)i[t-1]=wt(n,t/r);return a}function a(n){return null==n||isNaN(n=+n)?t:e[h(i,n)]}return a.invertExtent=function(t){var r=e.indexOf(t);return r<0?[NaN,NaN]:[r>0?i[r-1]:n[0],r<i.length?i[r]:n[n.length-1]]},a.domain=function(t){if(!arguments.length)return n.slice();n=[];for(let e of t)null==e||isNaN(e=+e)||n.push(e);return n.sort(r),o()},a.range=function(t){return arguments.length?(e=Array.from(t),o()):e.slice()},a.unknown=function(n){return arguments.length?(t=n,a):t},a.quantiles=function(){return i.slice()},a.copy=function(){return y_().domain(n).range(e).unknown(t)},kv.apply(a,arguments)}function v_(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function a(n){return null!=n&&n<=n?o[h(i,n,0,r)]:t}function u(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return a}return a.domain=function(t){return arguments.length?([n,e]=t,n=+n,e=+e,u()):[n,e]},a.range=function(t){return arguments.length?(r=(o=Array.from(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[n,i[0]]:a>=r?[i[r-1],e]:[i[a-1],i[a]]},a.unknown=function(n){return arguments.length?(t=n,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return v_().domain([n,e]).range(o).unknown(t)},kv.apply(Xv(a),arguments)}function __(){var t,n=[.5],e=[0,1],r=1;function i(i){return null!=i&&i<=i?e[h(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Array.from(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Array.from(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return __().domain(n).range(e).unknown(t)},kv.apply(i,arguments)}const b_=1e3,m_=6e4,x_=36e5,w_=864e5,M_=6048e5,T_=31536e6,A_=new Date,S_=new Date;function E_(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=n=>(t(n=new Date(+n)),n),i.ceil=e=>(t(e=new Date(e-1)),n(e,1),t(e),e),i.round=t=>{const n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=(t,e)=>(n(t=new Date(+t),null==e?1:Math.floor(e)),t),i.range=(e,r,o)=>{const a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;let u;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=e=>E_((n=>{if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),((t,r)=>{if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})),e&&(i.count=(n,r)=>(A_.setTime(+n),S_.setTime(+r),t(A_),t(S_),Math.floor(e(A_,S_))),i.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?n=>r(n)%t==0:n=>i.count(0,n)%t==0):i:null)),i}const N_=E_((()=>{}),((t,n)=>{t.setTime(+t+n)}),((t,n)=>n-t));N_.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?E_((n=>{n.setTime(Math.floor(n/t)*t)}),((n,e)=>{n.setTime(+n+e*t)}),((n,e)=>(e-n)/t)):N_:null);const k_=N_.range,C_=E_((t=>{t.setTime(t-t.getMilliseconds())}),((t,n)=>{t.setTime(+t+n*b_)}),((t,n)=>(n-t)/b_),(t=>t.getUTCSeconds())),P_=C_.range,z_=E_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*b_)}),((t,n)=>{t.setTime(+t+n*m_)}),((t,n)=>(n-t)/m_),(t=>t.getMinutes())),$_=z_.range,D_=E_((t=>{t.setUTCSeconds(0,0)}),((t,n)=>{t.setTime(+t+n*m_)}),((t,n)=>(n-t)/m_),(t=>t.getUTCMinutes())),R_=D_.range,O_=E_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*b_-t.getMinutes()*m_)}),((t,n)=>{t.setTime(+t+n*x_)}),((t,n)=>(n-t)/x_),(t=>t.getHours())),q_=O_.range,F_=E_((t=>{t.setUTCMinutes(0,0,0)}),((t,n)=>{t.setTime(+t+n*x_)}),((t,n)=>(n-t)/x_),(t=>t.getUTCHours())),U_=F_.range,I_=E_((t=>t.setHours(0,0,0,0)),((t,n)=>t.setDate(t.getDate()+n)),((t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*m_)/w_),(t=>t.getDate()-1)),B_=I_.range,Y_=E_((t=>{t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCDate(t.getUTCDate()+n)}),((t,n)=>(n-t)/w_),(t=>t.getUTCDate()-1)),j_=Y_.range,L_=E_((t=>{t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCDate(t.getUTCDate()+n)}),((t,n)=>(n-t)/w_),(t=>Math.floor(t/w_))),H_=L_.range;function X_(t){return E_((n=>{n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),((t,n)=>{t.setDate(t.getDate()+7*n)}),((t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*m_)/M_))}const G_=X_(0),V_=X_(1),W_=X_(2),Z_=X_(3),K_=X_(4),Q_=X_(5),J_=X_(6),tb=G_.range,nb=V_.range,eb=W_.range,rb=Z_.range,ib=K_.range,ob=Q_.range,ab=J_.range;function ub(t){return E_((n=>{n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCDate(t.getUTCDate()+7*n)}),((t,n)=>(n-t)/M_))}const cb=ub(0),fb=ub(1),sb=ub(2),lb=ub(3),hb=ub(4),db=ub(5),pb=ub(6),gb=cb.range,yb=fb.range,vb=sb.range,_b=lb.range,bb=hb.range,mb=db.range,xb=pb.range,wb=E_((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,n)=>{t.setMonth(t.getMonth()+n)}),((t,n)=>n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())),(t=>t.getMonth())),Mb=wb.range,Tb=E_((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCMonth(t.getUTCMonth()+n)}),((t,n)=>n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth())),Ab=Tb.range,Sb=E_((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,n)=>{t.setFullYear(t.getFullYear()+n)}),((t,n)=>n.getFullYear()-t.getFullYear()),(t=>t.getFullYear()));Sb.every=t=>isFinite(t=Math.floor(t))&&t>0?E_((n=>{n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),((n,e)=>{n.setFullYear(n.getFullYear()+e*t)})):null;const Eb=Sb.range,Nb=E_((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n)}),((t,n)=>n.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));Nb.every=t=>isFinite(t=Math.floor(t))&&t>0?E_((n=>{n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),((n,e)=>{n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null;const kb=Nb.range;function Cb(t,n,e,r,i,a){const u=[[C_,1,b_],[C_,5,5e3],[C_,15,15e3],[C_,30,3e4],[a,1,m_],[a,5,3e5],[a,15,9e5],[a,30,18e5],[i,1,x_],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,w_],[r,2,1728e5],[e,1,M_],[n,1,2592e6],[n,3,7776e6],[t,1,T_]];function c(n,e,r){const i=Math.abs(e-n)/r,a=o((([,,t])=>t)).right(u,i);if(a===u.length)return t.every(st(n/T_,e/T_,r));if(0===a)return N_.every(Math.max(st(n,e,r),1));const[c,f]=u[i/u[a-1][2]<u[a][2]/i?a-1:a];return c.every(f)}return[function(t,n,e){const r=n<t;r&&([t,n]=[n,t]);const i=e&&"function"==typeof e.range?e:c(t,n,e),o=i?i.range(t,+n+1):[];return r?o.reverse():o},c]}const[Pb,zb]=Cb(Nb,Tb,cb,L_,F_,D_),[$b,Db]=Cb(Sb,wb,G_,I_,O_,z_);function Rb(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ob(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function qb(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Fb(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=Zb(i),s=Kb(i),l=Zb(o),h=Kb(o),d=Zb(a),p=Kb(a),g=Zb(u),y=Kb(u),v=Zb(c),_=Kb(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:_m,e:_m,f:Mm,g:Dm,G:Om,H:bm,I:mm,j:xm,L:wm,m:Tm,M:Am,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ox,s:ax,S:Sm,u:Em,U:Nm,V:Cm,w:Pm,W:zm,x:null,X:null,y:$m,Y:Rm,Z:qm,"%":ix},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Fm,e:Fm,f:jm,g:tx,G:ex,H:Um,I:Im,j:Bm,L:Ym,m:Lm,M:Hm,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ox,s:ax,S:Xm,u:Gm,U:Vm,V:Zm,w:Km,W:Qm,x:null,X:null,y:Jm,Y:nx,Z:rx,"%":ix},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p.get(r[0].toLowerCase()),e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h.get(r[0].toLowerCase()),e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=_.get(r[0].toLowerCase()),e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=y.get(r[0].toLowerCase()),e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:cm,e:cm,f:pm,g:im,G:rm,H:sm,I:sm,j:fm,L:dm,m:um,M:lm,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s.get(r[0].toLowerCase()),e+r[0].length):-1},q:am,Q:ym,s:vm,S:hm,u:Jb,U:tm,V:nm,w:Qb,W:em,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:im,Y:rm,Z:om,"%":gm};function w(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=Lb[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=qb(1900,void 0,1);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ob(qb(o.y,0,1))).getUTCDay(),r=i>4||0===i?fb.ceil(r):fb(r),r=Y_.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Rb(qb(o.y,0,1))).getDay(),r=i>4||0===i?V_.ceil(r):V_(r),r=I_.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ob(qb(o.y,0,1)).getUTCDay():Rb(qb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ob(o)):Rb(o)}}function T(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Lb?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var Ub,Ib,Bb,Yb,jb,Lb={"-":"",_:" ",0:"0"},Hb=/^\s*\d+/,Xb=/^%/,Gb=/[\\^$*+?|[\]().{}]/g;function Vb(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Wb(t){return t.replace(Gb,"\\$&")}function Zb(t){return new RegExp("^(?:"+t.map(Wb).join("|")+")","i")}function Kb(t){return new Map(t.map(((t,n)=>[t.toLowerCase(),n])))}function Qb(t,n,e){var r=Hb.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Jb(t,n,e){var r=Hb.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function tm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function nm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function em(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function rm(t,n,e){var r=Hb.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function im(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function om(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function am(t,n,e){var r=Hb.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function um(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function cm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function fm(t,n,e){var r=Hb.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function sm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function lm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function hm(t,n,e){var r=Hb.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function dm(t,n,e){var r=Hb.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function pm(t,n,e){var r=Hb.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function gm(t,n,e){var r=Xb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ym(t,n,e){var r=Hb.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function vm(t,n,e){var r=Hb.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function _m(t,n){return Vb(t.getDate(),n,2)}function bm(t,n){return Vb(t.getHours(),n,2)}function mm(t,n){return Vb(t.getHours()%12||12,n,2)}function xm(t,n){return Vb(1+I_.count(Sb(t),t),n,3)}function wm(t,n){return Vb(t.getMilliseconds(),n,3)}function Mm(t,n){return wm(t,n)+"000"}function Tm(t,n){return Vb(t.getMonth()+1,n,2)}function Am(t,n){return Vb(t.getMinutes(),n,2)}function Sm(t,n){return Vb(t.getSeconds(),n,2)}function Em(t){var n=t.getDay();return 0===n?7:n}function Nm(t,n){return Vb(G_.count(Sb(t)-1,t),n,2)}function km(t){var n=t.getDay();return n>=4||0===n?K_(t):K_.ceil(t)}function Cm(t,n){return t=km(t),Vb(K_.count(Sb(t),t)+(4===Sb(t).getDay()),n,2)}function Pm(t){return t.getDay()}function zm(t,n){return Vb(V_.count(Sb(t)-1,t),n,2)}function $m(t,n){return Vb(t.getFullYear()%100,n,2)}function Dm(t,n){return Vb((t=km(t)).getFullYear()%100,n,2)}function Rm(t,n){return Vb(t.getFullYear()%1e4,n,4)}function Om(t,n){var e=t.getDay();return Vb((t=e>=4||0===e?K_(t):K_.ceil(t)).getFullYear()%1e4,n,4)}function qm(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Vb(n/60|0,"0",2)+Vb(n%60,"0",2)}function Fm(t,n){return Vb(t.getUTCDate(),n,2)}function Um(t,n){return Vb(t.getUTCHours(),n,2)}function Im(t,n){return Vb(t.getUTCHours()%12||12,n,2)}function Bm(t,n){return Vb(1+Y_.count(Nb(t),t),n,3)}function Ym(t,n){return Vb(t.getUTCMilliseconds(),n,3)}function jm(t,n){return Ym(t,n)+"000"}function Lm(t,n){return Vb(t.getUTCMonth()+1,n,2)}function Hm(t,n){return Vb(t.getUTCMinutes(),n,2)}function Xm(t,n){return Vb(t.getUTCSeconds(),n,2)}function Gm(t){var n=t.getUTCDay();return 0===n?7:n}function Vm(t,n){return Vb(cb.count(Nb(t)-1,t),n,2)}function Wm(t){var n=t.getUTCDay();return n>=4||0===n?hb(t):hb.ceil(t)}function Zm(t,n){return t=Wm(t),Vb(hb.count(Nb(t),t)+(4===Nb(t).getUTCDay()),n,2)}function Km(t){return t.getUTCDay()}function Qm(t,n){return Vb(fb.count(Nb(t)-1,t),n,2)}function Jm(t,n){return Vb(t.getUTCFullYear()%100,n,2)}function tx(t,n){return Vb((t=Wm(t)).getUTCFullYear()%100,n,2)}function nx(t,n){return Vb(t.getUTCFullYear()%1e4,n,4)}function ex(t,n){var e=t.getUTCDay();return Vb((t=e>=4||0===e?hb(t):hb.ceil(t)).getUTCFullYear()%1e4,n,4)}function rx(){return"+0000"}function ix(){return"%"}function ox(t){return+t}function ax(t){return Math.floor(+t/1e3)}function ux(t){return Ub=Fb(t),Ib=Ub.format,Bb=Ub.parse,Yb=Ub.utcFormat,jb=Ub.utcParse,Ub}function cx(t){return new Date(t)}function fx(t){return t instanceof Date?+t:+new Date(+t)}function sx(t,n,e,r,i,o,a,u,c,f){var s=Lv(),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),g=f("%I:%M"),y=f("%I %p"),v=f("%a %d"),_=f("%b %d"),b=f("%B"),m=f("%Y");function x(t){return(c(t)<t?d:u(t)<t?p:a(t)<t?g:o(t)<t?y:r(t)<t?i(t)<t?v:_:e(t)<t?b:m)(t)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(Array.from(t,fx)):h().map(cx)},s.ticks=function(n){var e=h();return t(e[0],e[e.length-1],null==n?10:n)},s.tickFormat=function(t,n){return null==n?x:f(n)},s.nice=function(t){var e=h();return t&&"function"==typeof t.range||(t=n(e[0],e[e.length-1],null==t?10:t)),t?h(Wv(e,t)):s},s.copy=function(){return Yv(s,sx(t,n,e,r,i,o,a,u,c,f))},s}function lx(){return kv.apply(sx($b,Db,Sb,wb,G_,I_,O_,z_,C_,Ib).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function hx(){return kv.apply(sx(Pb,zb,Nb,Tb,cb,Y_,F_,D_,C_,Yb).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function dx(){var t,n,e,r,i,o=0,a=1,u=Fv,c=!1;function f(n){return null==n||isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}function s(t){return function(n){var e,r;return arguments.length?([e,r]=n,u=t(e,r),f):[u(0),u(1)]}}return f.domain=function(i){return arguments.length?([o,a]=i,t=r(o=+o),n=r(a=+a),e=t===n?0:1/(n-t),f):[o,a]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(u=t,f):u},f.range=s(Kr),f.rangeRound=s(Fy),f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),f}}function px(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function gx(){var t=Xv(dx()(Fv));return t.copy=function(){return px(t,gx())},Cv.apply(t,arguments)}function yx(){var t=e_(dx()).domain([1,10]);return t.copy=function(){return px(t,yx()).base(t.base())},Cv.apply(t,arguments)}function vx(){var t=a_(dx());return t.copy=function(){return px(t,vx()).constant(t.constant())},Cv.apply(t,arguments)}function _x(){var t=l_(dx());return t.copy=function(){return px(t,_x()).exponent(t.exponent())},Cv.apply(t,arguments)}function bx(){return _x.apply(null,arguments).exponent(.5)}function mx(){var t=[],n=Fv;function e(e){if(null!=e&&!isNaN(e=+e))return n((h(t,e,1)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(let e of n)null==e||isNaN(e=+e)||t.push(e);return t.sort(r),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.range=function(){return t.map(((e,r)=>n(r/(t.length-1))))},e.quantiles=function(n){return Array.from({length:n+1},((e,r)=>xt(t,r/n)))},e.copy=function(){return mx(n).domain(t)},Cv.apply(e,arguments)}function xx(){var t,n,e,r,i,o,a,u=0,c=.5,f=1,s=1,l=Fv,h=!1;function d(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-n)*(s*t<s*n?r:i),l(h?Math.max(0,Math.min(1,t)):t))}function p(t){return function(n){var e,r,i;return arguments.length?([e,r,i]=n,l=Ky(t,[e,r,i]),d):[l(0),l(.5),l(1)]}}return d.domain=function(a){return arguments.length?([u,c,f]=a,t=o(u=+u),n=o(c=+c),e=o(f=+f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),s=n<t?-1:1,d):[u,c,f]},d.clamp=function(t){return arguments.length?(h=!!t,d):h},d.interpolator=function(t){return arguments.length?(l=t,d):l},d.range=p(Kr),d.rangeRound=p(Fy),d.unknown=function(t){return arguments.length?(a=t,d):a},function(a){return o=a,t=a(u),n=a(c),e=a(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),s=n<t?-1:1,d}}function wx(){var t=Xv(xx()(Fv));return t.copy=function(){return px(t,wx())},Cv.apply(t,arguments)}function Mx(){var t=e_(xx()).domain([.1,1,10]);return t.copy=function(){return px(t,Mx()).base(t.base())},Cv.apply(t,arguments)}function Tx(){var t=a_(xx());return t.copy=function(){return px(t,Tx()).constant(t.constant())},Cv.apply(t,arguments)}function Ax(){var t=l_(xx());return t.copy=function(){return px(t,Ax()).exponent(t.exponent())},Cv.apply(t,arguments)}function Sx(){return Ax.apply(null,arguments).exponent(.5)}function Ex(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}ux({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const Nx=Ex("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),kx=Ex("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Cx=Ex("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Px=Ex("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),zx=Ex("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),$x=Ex("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Dx=Ex("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Rx=Ex("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Ox=Ex("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),qx=Ex("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Fx=Ex("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ux=t=>Ur(t[t.length-1]);var Ix=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ex);const Bx=Ux(Ix);var Yx=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ex);const jx=Ux(Yx);var Lx=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ex);const Hx=Ux(Lx);var Xx=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ex);const Gx=Ux(Xx);var Vx=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ex);const Wx=Ux(Vx);var Zx=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ex);const Kx=Ux(Zx);var Qx=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ex);const Jx=Ux(Qx);var tw=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ex);const nw=Ux(tw);var ew=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ex);const rw=Ux(ew);var iw=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ex);const ow=Ux(iw);var aw=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ex);const uw=Ux(aw);var cw=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ex);const fw=Ux(cw);var sw=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ex);const lw=Ux(sw);var hw=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ex);const dw=Ux(hw);var pw=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ex);const gw=Ux(pw);var yw=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ex);const vw=Ux(yw);var _w=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ex);const bw=Ux(_w);var mw=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ex);const xw=Ux(mw);var ww=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ex);const Mw=Ux(ww);var Tw=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ex);const Aw=Ux(Tw);var Sw=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ex);const Ew=Ux(Sw);var Nw=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ex);const kw=Ux(Nw);var Cw=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ex);const Pw=Ux(Cw);var zw=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ex);const $w=Ux(zw);var Dw=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ex);const Rw=Ux(Dw);var Ow=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ex);const qw=Ux(Ow);var Fw=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ex);const Uw=Ux(Fw);function Iw(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const Bw=Zy(Ja(300,.5,0),Ja(-240,.5,1));var Yw=Zy(Ja(-100,.75,.35),Ja(80,1.5,.8)),jw=Zy(Ja(260,.75,.35),Ja(80,1.5,.8)),Lw=Ja();function Hw(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Lw.h=360*t-100,Lw.s=1.5-1.5*n,Lw.l=.8-.9*n,Lw+""}var Xw=yr(),Gw=Math.PI/3,Vw=2*Math.PI/3;function Ww(t){var n;return t=(.5-t)*Math.PI,Xw.r=255*(n=Math.sin(t))*n,Xw.g=255*(n=Math.sin(t+Gw))*n,Xw.b=255*(n=Math.sin(t+Vw))*n,Xw+""}function Zw(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function Kw(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Qw=Kw(Ex("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Jw=Kw(Ex("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),tM=Kw(Ex("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),nM=Kw(Ex("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function eM(t){return Be(Ee(t).call(document.documentElement))}var rM=0;function iM(){return new oM}function oM(){this._="@"+(++rM).toString(36)}function aM(t,n){return t.target&&(t=Qr(t),void 0===n&&(n=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Jr(t,n)))}function uM(t){return"string"==typeof t?new Fe([document.querySelectorAll(t)],[document.documentElement]):new Fe([Cn(t)],qe)}function cM(t){return function(){return t}}oM.prototype=iM.prototype={constructor:oM,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};const fM=Math.abs,sM=Math.atan2,lM=Math.cos,hM=Math.max,dM=Math.min,pM=Math.sin,gM=Math.sqrt,yM=1e-12,vM=Math.PI,_M=vM/2,bM=2*vM;function mM(t){return t>=1?_M:t<=-1?-_M:Math.asin(t)}function xM(t){let n=3;return t.digits=function(e){if(!arguments.length)return n;if(null==e)n=null;else{const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);n=t}return t},()=>new ca(n)}function wM(t){return t.innerRadius}function MM(t){return t.outerRadius}function TM(t){return t.startAngle}function AM(t){return t.endAngle}function SM(t){return t&&t.padAngle}function EM(t,n,e,r,i,o,a){var u=t-e,c=n-r,f=(a?o:-o)/gM(u*u+c*c),s=f*c,l=-f*u,h=t+s,d=n+l,p=e+s,g=r+l,y=(h+p)/2,v=(d+g)/2,_=p-h,b=g-d,m=_*_+b*b,x=i-o,w=h*g-p*d,M=(b<0?-1:1)*gM(hM(0,x*x*m-w*w)),T=(w*b-_*M)/m,A=(-w*_-b*M)/m,S=(w*b+_*M)/m,E=(-w*_+b*M)/m,N=T-y,k=A-v,C=S-y,P=E-v;return N*N+k*k>C*C+P*P&&(T=S,A=E),{cx:T,cy:A,x01:-s,y01:-l,x11:T*(i/x-1),y11:A*(i/x-1)}}function NM(){var t=wM,n=MM,e=cM(0),r=null,i=TM,o=AM,a=SM,u=null,c=xM(f);function f(){var f,s,l,h=+t.apply(this,arguments),d=+n.apply(this,arguments),p=i.apply(this,arguments)-_M,g=o.apply(this,arguments)-_M,y=fM(g-p),v=g>p;if(u||(u=f=c()),d<h&&(s=d,d=h,h=s),d>yM)if(y>bM-yM)u.moveTo(d*lM(p),d*pM(p)),u.arc(0,0,d,p,g,!v),h>yM&&(u.moveTo(h*lM(g),h*pM(g)),u.arc(0,0,h,g,p,v));else{var _,b,m=p,x=g,w=p,M=g,T=y,A=y,S=a.apply(this,arguments)/2,E=S>yM&&(r?+r.apply(this,arguments):gM(h*h+d*d)),N=dM(fM(d-h)/2,+e.apply(this,arguments)),k=N,C=N;if(E>yM){var P=mM(E/h*pM(S)),z=mM(E/d*pM(S));(T-=2*P)>yM?(w+=P*=v?1:-1,M-=P):(T=0,w=M=(p+g)/2),(A-=2*z)>yM?(m+=z*=v?1:-1,x-=z):(A=0,m=x=(p+g)/2)}var $=d*lM(m),D=d*pM(m),R=h*lM(M),O=h*pM(M);if(N>yM){var q,F=d*lM(x),U=d*pM(x),I=h*lM(w),B=h*pM(w);if(y<vM)if(q=function(t,n,e,r,i,o,a,u){var c=e-t,f=r-n,s=a-i,l=u-o,h=l*c-s*f;if(!(h*h<yM))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}($,D,I,B,F,U,R,O)){var Y=$-q[0],j=D-q[1],L=F-q[0],H=U-q[1],X=1/pM(((l=(Y*L+j*H)/(gM(Y*Y+j*j)*gM(L*L+H*H)))>1?0:l<-1?vM:Math.acos(l))/2),G=gM(q[0]*q[0]+q[1]*q[1]);k=dM(N,(h-G)/(X-1)),C=dM(N,(d-G)/(X+1))}else k=C=0}A>yM?C>yM?(_=EM(I,B,$,D,d,C,v),b=EM(F,U,R,O,d,C,v),u.moveTo(_.cx+_.x01,_.cy+_.y01),C<N?u.arc(_.cx,_.cy,C,sM(_.y01,_.x01),sM(b.y01,b.x01),!v):(u.arc(_.cx,_.cy,C,sM(_.y01,_.x01),sM(_.y11,_.x11),!v),u.arc(0,0,d,sM(_.cy+_.y11,_.cx+_.x11),sM(b.cy+b.y11,b.cx+b.x11),!v),u.arc(b.cx,b.cy,C,sM(b.y11,b.x11),sM(b.y01,b.x01),!v))):(u.moveTo($,D),u.arc(0,0,d,m,x,!v)):u.moveTo($,D),h>yM&&T>yM?k>yM?(_=EM(R,O,F,U,h,-k,v),b=EM($,D,I,B,h,-k,v),u.lineTo(_.cx+_.x01,_.cy+_.y01),k<N?u.arc(_.cx,_.cy,k,sM(_.y01,_.x01),sM(b.y01,b.x01),!v):(u.arc(_.cx,_.cy,k,sM(_.y01,_.x01),sM(_.y11,_.x11),!v),u.arc(0,0,h,sM(_.cy+_.y11,_.cx+_.x11),sM(b.cy+b.y11,b.cx+b.x11),v),u.arc(b.cx,b.cy,k,sM(b.y11,b.x11),sM(b.y01,b.x01),!v))):u.arc(0,0,h,M,w,v):u.lineTo(R,O)}else u.moveTo(0,0);if(u.closePath(),f)return u=null,f+""||null}return f.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-vM/2;return[lM(r)*e,pM(r)*e]},f.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:cM(+n),f):t},f.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:cM(+t),f):n},f.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:cM(+t),f):e},f.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:cM(+t),f):r},f.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:cM(+t),f):i},f.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:cM(+t),f):o},f.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:cM(+t),f):a},f.context=function(t){return arguments.length?(u=null==t?null:t,f):u},f}var kM=Array.prototype.slice;function CM(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function PM(t){this._context=t}function zM(t){return new PM(t)}function $M(t){return t[0]}function DM(t){return t[1]}function RM(t,n){var e=cM(!0),r=null,i=zM,o=null,a=xM(u);function u(u){var c,f,s,l=(u=CM(u)).length,h=!1;for(null==r&&(o=i(s=a())),c=0;c<=l;++c)!(c<l&&e(f=u[c],c,u))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(f,c,u),+n(f,c,u));if(s)return o=null,s+""||null}return t="function"==typeof t?t:void 0===t?$M:cM(t),n="function"==typeof n?n:void 0===n?DM:cM(n),u.x=function(n){return arguments.length?(t="function"==typeof n?n:cM(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:cM(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:cM(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function OM(t,n,e){var r=null,i=cM(!0),o=null,a=zM,u=null,c=xM(f);function f(f){var s,l,h,d,p,g=(f=CM(f)).length,y=!1,v=new Array(g),_=new Array(g);for(null==o&&(u=a(p=c())),s=0;s<=g;++s){if(!(s<g&&i(d=f[s],s,f))===y)if(y=!y)l=s,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=s-1;h>=l;--h)u.point(v[h],_[h]);u.lineEnd(),u.areaEnd()}y&&(v[s]=+t(d,s,f),_[s]=+n(d,s,f),u.point(r?+r(d,s,f):v[s],e?+e(d,s,f):_[s]))}if(p)return u=null,p+""||null}function s(){return RM().defined(i).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?$M:cM(+t),n="function"==typeof n?n:cM(void 0===n?0:+n),e="function"==typeof e?e:void 0===e?DM:cM(+e),f.x=function(n){return arguments.length?(t="function"==typeof n?n:cM(+n),r=null,f):t},f.x0=function(n){return arguments.length?(t="function"==typeof n?n:cM(+n),f):t},f.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:cM(+t),f):r},f.y=function(t){return arguments.length?(n="function"==typeof t?t:cM(+t),e=null,f):n},f.y0=function(t){return arguments.length?(n="function"==typeof t?t:cM(+t),f):n},f.y1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:cM(+t),f):e},f.lineX0=f.lineY0=function(){return s().x(t).y(n)},f.lineY1=function(){return s().x(t).y(e)},f.lineX1=function(){return s().x(r).y(n)},f.defined=function(t){return arguments.length?(i="function"==typeof t?t:cM(!!t),f):i},f.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),f):a},f.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),f):o},f}function qM(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function FM(t){return t}function UM(){var t=FM,n=qM,e=null,r=cM(0),i=cM(bM),o=cM(0);function a(a){var u,c,f,s,l,h=(a=CM(a)).length,d=0,p=new Array(h),g=new Array(h),y=+r.apply(this,arguments),v=Math.min(bM,Math.max(-bM,i.apply(this,arguments)-y)),_=Math.min(Math.abs(v)/h,o.apply(this,arguments)),b=_*(v<0?-1:1);for(u=0;u<h;++u)(l=g[p[u]=u]=+t(a[u],u,a))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(g[t],g[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,f=d?(v-h*b)/d:0;u<h;++u,y=s)c=p[u],s=y+((l=g[c])>0?l*f:0)+b,g[c]={data:a[c],index:u,value:l,startAngle:y,endAngle:s,padAngle:_};return g}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:cM(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:cM(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:cM(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:cM(+t),a):o},a}PM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var IM=YM(zM);function BM(t){this._curve=t}function YM(t){function n(n){return new BM(t(n))}return n._curve=t,n}function jM(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(YM(t)):n()._curve},t}function LM(){return jM(RM().curve(IM))}function HM(){var t=OM().curve(IM),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return jM(e())},delete t.lineX0,t.lineEndAngle=function(){return jM(r())},delete t.lineX1,t.lineInnerRadius=function(){return jM(i())},delete t.lineY0,t.lineOuterRadius=function(){return jM(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(YM(t)):n()._curve},t}function XM(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}BM.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};class GM{constructor(t,n){this._context=t,this._x=n}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n)}this._x0=t,this._y0=n}}class VM{constructor(t){this._context=t}lineStart(){this._point=0}lineEnd(){}point(t,n){if(t=+t,n=+n,0===this._point)this._point=1;else{const e=XM(this._x0,this._y0),r=XM(this._x0,this._y0=(this._y0+n)/2),i=XM(t,this._y0),o=XM(t,n);this._context.moveTo(...e),this._context.bezierCurveTo(...r,...i,...o)}this._x0=t,this._y0=n}}function WM(t){return new GM(t,!0)}function ZM(t){return new GM(t,!1)}function KM(t){return new VM(t)}function QM(t){return t.source}function JM(t){return t.target}function tT(t){let n=QM,e=JM,r=$M,i=DM,o=null,a=null,u=xM(c);function c(){let c;const f=kM.call(arguments),s=n.apply(this,f),l=e.apply(this,f);if(null==o&&(a=t(c=u())),a.lineStart(),f[0]=s,a.point(+r.apply(this,f),+i.apply(this,f)),f[0]=l,a.point(+r.apply(this,f),+i.apply(this,f)),a.lineEnd(),c)return a=null,c+""||null}return c.source=function(t){return arguments.length?(n=t,c):n},c.target=function(t){return arguments.length?(e=t,c):e},c.x=function(t){return arguments.length?(r="function"==typeof t?t:cM(+t),c):r},c.y=function(t){return arguments.length?(i="function"==typeof t?t:cM(+t),c):i},c.context=function(n){return arguments.length?(null==n?o=a=null:a=t(o=n),c):o},c}function nT(){return tT(WM)}function eT(){return tT(ZM)}function rT(){const t=tT(KM);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const iT=gM(3),oT={draw(t,n){const e=.59436*gM(n+dM(n/28,.75)),r=e/2,i=r*iT;t.moveTo(0,e),t.lineTo(0,-e),t.moveTo(-i,-r),t.lineTo(i,r),t.moveTo(-i,r),t.lineTo(i,-r)}},aT={draw(t,n){const e=gM(n/vM);t.moveTo(e,0),t.arc(0,0,e,0,bM)}},uT={draw(t,n){const e=gM(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},cT=gM(1/3),fT=2*cT,sT={draw(t,n){const e=gM(n/fT),r=e*cT;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},lT={draw(t,n){const e=.62625*gM(n);t.moveTo(0,-e),t.lineTo(e,0),t.lineTo(0,e),t.lineTo(-e,0),t.closePath()}},hT={draw(t,n){const e=.87559*gM(n-dM(n/7,2));t.moveTo(-e,0),t.lineTo(e,0),t.moveTo(0,e),t.lineTo(0,-e)}},dT={draw(t,n){const e=gM(n),r=-e/2;t.rect(r,r,e,e)}},pT={draw(t,n){const e=.4431*gM(n);t.moveTo(e,e),t.lineTo(e,-e),t.lineTo(-e,-e),t.lineTo(-e,e),t.closePath()}},gT=pM(vM/10)/pM(7*vM/10),yT=pM(bM/10)*gT,vT=-lM(bM/10)*gT,_T={draw(t,n){const e=gM(.8908130915292852*n),r=yT*e,i=vT*e;t.moveTo(0,-e),t.lineTo(r,i);for(let n=1;n<5;++n){const o=bM*n/5,a=lM(o),u=pM(o);t.lineTo(u*e,-a*e),t.lineTo(a*r-u*i,u*r+a*i)}t.closePath()}},bT=gM(3),mT={draw(t,n){const e=-gM(n/(3*bT));t.moveTo(0,2*e),t.lineTo(-bT*e,-e),t.lineTo(bT*e,-e),t.closePath()}},xT=gM(3),wT={draw(t,n){const e=.6824*gM(n),r=e/2,i=e*xT/2;t.moveTo(0,-e),t.lineTo(i,r),t.lineTo(-i,r),t.closePath()}},MT=-.5,TT=gM(3)/2,AT=1/gM(12),ST=3*(AT/2+1),ET={draw(t,n){const e=gM(n/ST),r=e/2,i=e*AT,o=r,a=e*AT+e,u=-o,c=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(MT*r-TT*i,TT*r+MT*i),t.lineTo(MT*o-TT*a,TT*o+MT*a),t.lineTo(MT*u-TT*c,TT*u+MT*c),t.lineTo(MT*r+TT*i,MT*i-TT*r),t.lineTo(MT*o+TT*a,MT*a-TT*o),t.lineTo(MT*u+TT*c,MT*c-TT*u),t.closePath()}},NT={draw(t,n){const e=.6189*gM(n-dM(n/6,1.7));t.moveTo(-e,-e),t.lineTo(e,e),t.moveTo(-e,e),t.lineTo(e,-e)}},kT=[aT,uT,sT,dT,_T,mT,ET],CT=[aT,hT,NT,wT,oT,pT,lT];function PT(t,n){let e=null,r=xM(i);function i(){let i;if(e||(e=i=r()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),i)return e=null,i+""||null}return t="function"==typeof t?t:cM(t||aT),n="function"==typeof n?n:cM(void 0===n?64:+n),i.type=function(n){return arguments.length?(t="function"==typeof n?n:cM(n),i):t},i.size=function(t){return arguments.length?(n="function"==typeof t?t:cM(+t),i):n},i.context=function(t){return arguments.length?(e=null==t?null:t,i):e},i}function zT(){}function $T(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function DT(t){this._context=t}function RT(t){return new DT(t)}function OT(t){this._context=t}function qT(t){return new OT(t)}function FT(t){this._context=t}function UT(t){return new FT(t)}function IT(t,n){this._basis=new DT(t),this._beta=n}DT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:$T(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:$T(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},OT.prototype={areaStart:zT,areaEnd:zT,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:$T(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},FT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:$T(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},IT.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*a),this._beta*n[c]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const BT=function t(n){function e(t){return 1===n?new DT(t):new IT(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function YT(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function jT(t,n){this._context=t,this._k=(1-n)/6}jT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:YT(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:YT(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const LT=function t(n){function e(t){return new jT(t,n)}return e.tension=function(n){return t(+n)},e}(0);function HT(t,n){this._context=t,this._k=(1-n)/6}HT.prototype={areaStart:zT,areaEnd:zT,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:YT(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const XT=function t(n){function e(t){return new HT(t,n)}return e.tension=function(n){return t(+n)},e}(0);function GT(t,n){this._context=t,this._k=(1-n)/6}GT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:YT(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const VT=function t(n){function e(t){return new GT(t,n)}return e.tension=function(n){return t(+n)},e}(0);function WT(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>yM){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>yM){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,a=(a*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function ZT(t,n){this._context=t,this._alpha=n}ZT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:WT(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const KT=function t(n){function e(t){return n?new ZT(t,n):new jT(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function QT(t,n){this._context=t,this._alpha=n}QT.prototype={areaStart:zT,areaEnd:zT,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:WT(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const JT=function t(n){function e(t){return n?new QT(t,n):new HT(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function tA(t,n){this._context=t,this._alpha=n}tA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:WT(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const nA=function t(n){function e(t){return n?new tA(t,n):new GT(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function eA(t){this._context=t}function rA(t){return new eA(t)}function iA(t){return t<0?-1:1}function oA(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(iA(o)+iA(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function aA(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function uA(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function cA(t){this._context=t}function fA(t){this._context=new sA(t)}function sA(t){this._context=t}function lA(t){return new cA(t)}function hA(t){return new fA(t)}function dA(t){this._context=t}function pA(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function gA(t){return new dA(t)}function yA(t,n){this._context=t,this._t=n}function vA(t){return new yA(t,.5)}function _A(t){return new yA(t,0)}function bA(t){return new yA(t,1)}function mA(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function xA(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function wA(t,n){return t[n]}function MA(t){const n=[];return n.key=t,n}function TA(){var t=cM([]),n=xA,e=mA,r=wA;function i(i){var o,a,u=Array.from(t.apply(this,arguments),MA),c=u.length,f=-1;for(const t of i)for(o=0,++f;o<c;++o)(u[o][f]=[0,+r(t,u[o].key,f,i)]).data=t;for(o=0,a=CM(n(u));o<c;++o)u[a[o]].index=o;return e(u,a),u}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:cM(Array.from(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:cM(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?xA:"function"==typeof t?t:cM(Array.from(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?mA:t,i):e},i}function AA(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}mA(t,n)}}function SA(t,n){if((u=t.length)>0)for(var e,r,i,o,a,u,c=0,f=t[n[0]].length;c<f;++c)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)}function EA(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}mA(t,n)}}function NA(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,c=0,f=0;u<i;++u){for(var s=t[n[u]],l=s[a][1]||0,h=(l-(s[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}c+=l,f+=h*l}e[a-1][1]+=e[a-1][0]=o,c&&(o-=f/c)}e[a-1][1]+=e[a-1][0]=o,mA(t,n)}}function kA(t){var n=t.map(CA);return xA(t).sort((function(t,e){return n[t]-n[e]}))}function CA(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function PA(t){var n=t.map(zA);return xA(t).sort((function(t,e){return n[t]-n[e]}))}function zA(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function $A(t){return PA(t).reverse()}function DA(t){var n,e,r=t.length,i=t.map(zA),o=kA(t),a=0,u=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],c.push(e)):(u+=i[e],f.push(e));return f.reverse().concat(c)}function RA(t){return xA(t).reverse()}eA.prototype={areaStart:zT,areaEnd:zT,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},cA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:uA(this,this._t0,aA(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,uA(this,aA(this,e=oA(this,t,n)),e);break;default:uA(this,this._t0,e=oA(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(fA.prototype=Object.create(cA.prototype)).point=function(t,n){cA.prototype.point.call(this,n,t)},sA.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},dA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=pA(t),i=pA(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},yA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var OA="%Y-%m-%dT%H:%M:%S.%LZ",qA=Date.prototype.toISOString?function(t){return t.toISOString()}:Yb(OA);const FA=qA;var UA=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:jb(OA);const IA=UA;function BA(t,n,e){var r=new hi,i=n;return null==n?(r.restart(t,n,e),r):(r._restart=r.restart,r.restart=function(t,n,e){n=+n,e=null==e?si():+e,r._restart((function o(a){a+=i,r._restart(o,i+=n,e),t(a)}),n,e)},r.restart(t,n,e),r)}const YA=t=>()=>t;function jA(t,{sourceEvent:n,target:e,transform:r,dispatch:i}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:e,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:i}})}function LA(t,n,e){this.k=t,this.x=n,this.y=e}LA.prototype={constructor:LA,scale:function(t){return 1===t?this:new LA(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new LA(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var HA=new LA(1,0,0);function XA(t){for(;!t.__zoom;)if(!(t=t.parentNode))return HA;return t.__zoom}function GA(t){t.stopImmediatePropagation()}function VA(t){t.preventDefault(),t.stopImmediatePropagation()}function WA(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function ZA(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function KA(){return this.__zoom||HA}function QA(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function JA(){return navigator.maxTouchPoints||"ontouchstart"in this}function tS(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function nS(){var t,n,e,r=WA,i=ZA,o=tS,a=QA,u=JA,c=[0,1/0],f=[[-1/0,-1/0],[1/0,1/0]],s=250,l=Iy,h=En("start","zoom","end"),d=0,p=10;function g(t){t.property("__zoom",KA).on("wheel.zoom",w,{passive:!1}).on("mousedown.zoom",M).on("dblclick.zoom",T).filter(u).on("touchstart.zoom",A).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",E).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,n){return(n=Math.max(c[0],Math.min(c[1],n)))===t.k?t:new LA(n,t.x,t.y)}function v(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new LA(t.k,r,i)}function _(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function b(t,n,e,r){t.on("start.zoom",(function(){m(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){m(this,arguments).event(r).end()})).tween("zoom",(function(){var t=this,o=arguments,a=m(t,o).event(r),u=i.apply(t,o),c=null==e?_(u):"function"==typeof e?e.apply(t,o):e,f=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,h="function"==typeof n?n.apply(t,o):n,d=l(s.invert(c).concat(f/s.k),h.invert(c).concat(f/h.k));return function(t){if(1===t)t=h;else{var n=d(t),e=f/n[2];t=new LA(e,c[0]-n[0]*e,c[1]-n[1]*e)}a.zoom(null,t)}}))}function m(t,n,e){return!e&&t.__zooming||new x(t,n)}function x(t,n){this.that=t,this.args=n,this.active=0,this.sourceEvent=null,this.extent=i.apply(t,n),this.taps=0}function w(t,...n){if(r.apply(this,arguments)){var e=m(this,n).event(t),i=this.__zoom,u=Math.max(c[0],Math.min(c[1],i.k*Math.pow(2,a.apply(this,arguments)))),s=Jr(t);if(e.wheel)e.mouse[0][0]===s[0]&&e.mouse[0][1]===s[1]||(e.mouse[1]=i.invert(e.mouse[0]=s)),clearTimeout(e.wheel);else{if(i.k===u)return;e.mouse=[s,i.invert(s)],ki(this),e.start()}VA(t),e.wheel=setTimeout((function(){e.wheel=null,e.end()}),150),e.zoom("mouse",o(v(y(i,u),e.mouse[0],e.mouse[1]),e.extent,f))}}function M(t,...n){if(!e&&r.apply(this,arguments)){var i=t.currentTarget,a=m(this,n,!0).event(t),u=Be(t.view).on("mousemove.zoom",(function(t){if(VA(t),!a.moved){var n=t.clientX-s,e=t.clientY-l;a.moved=n*n+e*e>d}a.event(t).zoom("mouse",o(v(a.that.__zoom,a.mouse[0]=Jr(t,i),a.mouse[1]),a.extent,f))}),!0).on("mouseup.zoom",(function(t){u.on("mousemove.zoom mouseup.zoom",null),Ge(t.view,a.moved),VA(t),a.event(t).end()}),!0),c=Jr(t,i),s=t.clientX,l=t.clientY;Xe(t.view),GA(t),a.mouse=[c,this.__zoom.invert(c)],ki(this),a.start()}}function T(t,...n){if(r.apply(this,arguments)){var e=this.__zoom,a=Jr(t.changedTouches?t.changedTouches[0]:t,this),u=e.invert(a),c=e.k*(t.shiftKey?.5:2),l=o(v(y(e,c),a,u),i.apply(this,n),f);VA(t),s>0?Be(this).transition().duration(s).call(b,l,a,t):Be(this).call(g.transform,l,a,t)}}function A(e,...i){if(r.apply(this,arguments)){var o,a,u,c,f=e.touches,s=f.length,l=m(this,i,e.changedTouches.length===s).event(e);for(GA(e),a=0;a<s;++a)c=[c=Jr(u=f[a],this),this.__zoom.invert(c),u.identifier],l.touch0?l.touch1||l.touch0[2]===c[2]||(l.touch1=c,l.taps=0):(l.touch0=c,o=!0,l.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(l.taps<2&&(n=c[0],t=setTimeout((function(){t=null}),500)),ki(this),l.start())}}function S(t,...n){if(this.__zooming){var e,r,i,a,u=m(this,n).event(t),c=t.changedTouches,s=c.length;for(VA(t),e=0;e<s;++e)i=Jr(r=c[e],this),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=i:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=i);if(r=u.that.__zoom,u.touch1){var l=u.touch0[0],h=u.touch0[1],d=u.touch1[0],p=u.touch1[1],g=(g=d[0]-l[0])*g+(g=d[1]-l[1])*g,_=(_=p[0]-h[0])*_+(_=p[1]-h[1])*_;r=y(r,Math.sqrt(g/_)),i=[(l[0]+d[0])/2,(l[1]+d[1])/2],a=[(h[0]+p[0])/2,(h[1]+p[1])/2]}else{if(!u.touch0)return;i=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(v(r,i,a),u.extent,f))}}function E(t,...r){if(this.__zooming){var i,o,a=m(this,r).event(t),u=t.changedTouches,c=u.length;for(GA(t),e&&clearTimeout(e),e=setTimeout((function(){e=null}),500),i=0;i<c;++i)o=u[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Jr(o,this),Math.hypot(n[0]-o[0],n[1]-o[1])<p)){var f=Be(this).on("dblclick.zoom");f&&f.apply(this,arguments)}}}return g.transform=function(t,n,e,r){var i=t.selection?t.selection():t;i.property("__zoom",KA),t!==i?b(t,n,e,r):i.interrupt().each((function(){m(this,arguments).event(r).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},g.scaleBy=function(t,n,e,r){g.scaleTo(t,(function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)}),e,r)},g.scaleTo=function(t,n,e,r){g.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=null==e?_(t):"function"==typeof e?e.apply(this,arguments):e,u=r.invert(a),c="function"==typeof n?n.apply(this,arguments):n;return o(v(y(r,c),a,u),t,f)}),e,r)},g.translateBy=function(t,n,e,r){g.transform(t,(function(){return o(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),i.apply(this,arguments),f)}),null,r)},g.translateTo=function(t,n,e,r,a){g.transform(t,(function(){var t=i.apply(this,arguments),a=this.__zoom,u=null==r?_(t):"function"==typeof r?r.apply(this,arguments):r;return o(HA.translate(u[0],u[1]).scale(a.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,f)}),r,a)},x.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var n=Be(this.that).datum();h.call(t,this.that,new jA(t,{sourceEvent:this.sourceEvent,target:g,type:t,transform:this.that.__zoom,dispatch:h}),n)}},g.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:YA(+t),g):a},g.filter=function(t){return arguments.length?(r="function"==typeof t?t:YA(!!t),g):r},g.touchable=function(t){return arguments.length?(u="function"==typeof t?t:YA(!!t),g):u},g.extent=function(t){return arguments.length?(i="function"==typeof t?t:YA([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),g):i},g.scaleExtent=function(t){return arguments.length?(c[0]=+t[0],c[1]=+t[1],g):[c[0],c[1]]},g.translateExtent=function(t){return arguments.length?(f[0][0]=+t[0][0],f[1][0]=+t[1][0],f[0][1]=+t[0][1],f[1][1]=+t[1][1],g):[[f[0][0],f[0][1]],[f[1][0],f[1][1]]]},g.constrain=function(t){return arguments.length?(o=t,g):o},g.duration=function(t){return arguments.length?(s=+t,g):s},g.interpolate=function(t){return arguments.length?(l=t,g):l},g.on=function(){var t=h.on.apply(h,arguments);return t===h?g:t},g.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,g):Math.sqrt(d)},g.tapDistance=function(t){return arguments.length?(p=+t,g):p},g}XA.prototype=LA.prototype},702:function(t,n,e){var r,i=this&&this.__createBinding||(Object.create?function(t,n,e,r){void 0===r&&(r=e);var i=Object.getOwnPropertyDescriptor(n,e);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[e]}}),Object.defineProperty(t,r,i)}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]}),o=this&&this.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),a=this&&this.__importStar||(r=function(t){return r=Object.getOwnPropertyNames||function(t){var n=[];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[n.length]=e);return n},r(t)},function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e=r(t),a=0;a<e.length;a++)"default"!==e[a]&&i(n,t,e[a]);return o(n,t),n});Object.defineProperty(n,"__esModule",{value:!0}),a(e(365)).select("#viz").append("svg").attr("width",200).attr("height",100).append("g").append("text").attr("x",50).attr("y",50).attr("text-anchor","left").attr("font-size","20px").text("Hello, D3.js!")}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return t[r].call(o.exports,o,o.exports,e),o.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(702)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,